<?xml version="1.0" encoding="utf-8"?>
<TestRun id="3dc9b461-df22-40d4-bf03-85cebbb7dccd" name="@r3e 2025-08-22 04:19:09" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-08-22T04:19:09.5098500+00:00" queuing="2025-08-22T04:19:09.5098501+00:00" start="2025-08-22T04:19:09.0495894+00:00" finish="2025-08-22T04:19:56.8413438+00:00" />
  <TestSettings name="default" id="be8e693e-41a8-44e3-9a64-50aeaaca35e8">
    <Deployment runDeploymentRoot="_r3e_2025-08-22_04_19_09" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="b9fc0269-3576-46d6-8bdc-46c93439961d" testId="2563e2a7-4774-1734-682f-9b5a97cf68dd" testName="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_ShouldCreateCorrectScript" computerName="r3e" duration="00:00:00.0027937" startTime="2025-08-22T04:19:09.6363622+00:00" endTime="2025-08-22T04:19:09.6363623+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9fc0269-3576-46d6-8bdc-46c93439961d" />
    <UnitTestResult executionId="dbecef4f-7511-4dde-942b-753dcd7fc64e" testId="8dc7aaf8-eccc-25c6-3e3b-36a084427ca9" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2AddressGeneration" computerName="r3e" duration="00:00:00.0002474" startTime="2025-08-22T04:19:56.7782556+00:00" endTime="2025-08-22T04:19:56.7782558+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbecef4f-7511-4dde-942b-753dcd7fc64e">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2AddressGeneration() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 204
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9f18b5a5-e25d-4cb4-85bd-d86d04187722" testId="45d2fbdd-356c-c68c-8b8d-eb409c7fbdd5" testName="NeoSharp.Tests.Wallet.AccountTests.GetAddress_ShouldReturnCorrectAddress" computerName="r3e" duration="00:00:00.1073907" startTime="2025-08-22T04:19:09.5742519+00:00" endTime="2025-08-22T04:19:09.5742521+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9f18b5a5-e25d-4cb4-85bd-d86d04187722">
      <Output>
        <ErrorInfo>
          <Message>Expected address to be "NLnyLtep7jwyq1qhNPkwXbJpurC4jUT8ke", but "NLLev3iNfYUUCgeC4eCmQLyr1obKGwvZSy" differs near "Lev" (index 2).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
   at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstMismatch()
   at FluentAssertions.Primitives.StringValidator.Validate()
   at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Wallet.AccountTests.GetAddress_ShouldReturnCorrectAddress() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 156
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="70efdb98-821d-430a-bde7-d261ceb7d009" testId="8920274a-5d15-dd80-35c4-6ef25156aa22" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;\ud83d\udd10\ud83d\udd11\ud83d\udc8e&quot;)" computerName="r3e" duration="00:00:03.8713940" startTime="2025-08-22T04:19:30.1680437+00:00" endTime="2025-08-22T04:19:30.1680439+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="70efdb98-821d-430a-bde7-d261ceb7d009">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 147
   at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8d9c716-1a4d-4e2b-b805-cba76c003c85" testId="b097dbb8-c1a9-a4fd-8dd1-eb21b696c11d" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleVeryLargeNumbers" computerName="r3e" duration="00:00:00.0027390" startTime="2025-08-22T04:19:09.5935021+00:00" endTime="2025-08-22T04:19:09.5935022+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8d9c716-1a4d-4e2b-b805-cba76c003c85" />
    <UnitTestResult executionId="ec2b7042-1140-4556-ba8b-84398b21d067" testId="7215a0c9-7676-8e37-e04e-db7c106aeda3" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteUInt32_ShouldWriteCorrectBytes" computerName="r3e" duration="00:00:00.0003987" startTime="2025-08-22T04:19:09.5826402+00:00" endTime="2025-08-22T04:19:09.5826402+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec2b7042-1140-4556-ba8b-84398b21d067" />
    <UnitTestResult executionId="15fdab1b-18eb-476c-9300-ce8ac711b9ac" testId="f0c0998a-02c2-d6bb-d7e3-38a411a27bd4" testName="NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(compressed: True)" computerName="r3e" duration="00:00:00.0077986" startTime="2025-08-22T04:19:09.5109084+00:00" endTime="2025-08-22T04:19:09.5109085+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15fdab1b-18eb-476c-9300-ce8ac711b9ac" />
    <UnitTestResult executionId="5cf1afc1-10a7-455b-8dd0-64caf622050c" testId="deb531c7-2015-a88f-674c-68295032b174" testName="NeoSharp.Tests.Crypto.WIFTests.EmptyWifString_ShouldThrowWIFException" computerName="r3e" duration="00:00:00.0045129" startTime="2025-08-22T04:19:09.5132577+00:00" endTime="2025-08-22T04:19:09.5132577+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5cf1afc1-10a7-455b-8dd0-64caf622050c" />
    <UnitTestResult executionId="dae3f294-badc-460e-9bb2-1a50e2f0629d" testId="9a7d42b9-5bb8-9a73-719c-d3d0d3f66968" testName="NeoSharp.Tests.Wallet.AccountTests.GetScriptHash_ShouldReturnCorrectHash" computerName="r3e" duration="00:00:00.0002309" startTime="2025-08-22T04:19:09.6055863+00:00" endTime="2025-08-22T04:19:09.6055864+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dae3f294-badc-460e-9bb2-1a50e2f0629d">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.GetScriptHash_ShouldReturnCorrectHash() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 134
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cd24a75a-fd1d-4d5a-a4ca-89104ead03aa" testId="d8c28e8f-0978-66b7-aeff-ee6e5f77d9ad" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBytes_ShouldReadSpecifiedNumberOfBytes" computerName="r3e" duration="00:00:00.0026519" startTime="2025-08-22T04:19:09.5108389+00:00" endTime="2025-08-22T04:19:09.5108390+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd24a75a-fd1d-4d5a-a4ca-89104ead03aa" />
    <UnitTestResult executionId="40e3a52c-7372-45d3-99cf-cd51b264ec38" testId="6ab66c03-5ab2-3e1f-187f-860a3bcb8043" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyInequality_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0533048" startTime="2025-08-22T04:19:09.5795775+00:00" endTime="2025-08-22T04:19:09.5795775+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="40e3a52c-7372-45d3-99cf-cd51b264ec38" />
    <UnitTestResult executionId="4445f8bf-09ac-438a-9537-e5013c111a5d" testId="89cd3ca8-497c-6040-13f0-10f5cb59f90d" testName="NeoSharp.Tests.Crypto.SecurityTests.TestSecureBytesConstantTimeComparison" computerName="r3e" duration="00:00:00.0003298" startTime="2025-08-22T04:19:18.3873588+00:00" endTime="2025-08-22T04:19:18.3873588+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4445f8bf-09ac-438a-9537-e5013c111a5d" />
    <UnitTestResult executionId="bbc1e07c-cd51-40b6-867d-ffb3e96fd5de" testId="35966a0e-660b-4e81-3caf-977868899497" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithNonDefaultScryptParams" computerName="r3e" duration="00:00:00.0006648" startTime="2025-08-22T04:19:38.6704123+00:00" endTime="2025-08-22T04:19:38.6704134+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bbc1e07c-cd51-40b6-867d-ffb3e96fd5de">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 273
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithNonDefaultScryptParams() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 37
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f3f4bef7-eda1-4c59-8482-622f354211ae" testId="125ad7c0-573e-815a-337e-6925403e5304" testName="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithNullMethod_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0018936" startTime="2025-08-22T04:19:09.6335193+00:00" endTime="2025-08-22T04:19:09.6335194+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3f4bef7-eda1-4c59-8482-622f354211ae" />
    <UnitTestResult executionId="8653ddb3-8b49-4015-8b4c-62a5540b06db" testId="7a5cf7da-061e-50b8-db52-35905e76bf20" testName="NeoSharp.Tests.Wallet.AccountTests.SignData_ShouldCreateValidSignature" computerName="r3e" duration="00:00:00.0002177" startTime="2025-08-22T04:19:09.5947131+00:00" endTime="2025-08-22T04:19:09.5947132+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8653ddb3-8b49-4015-8b4c-62a5540b06db">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.SignData_ShouldCreateValidSignature() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 258
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bff371d-6a11-4322-af12-2bac455dc5cf" testId="520fc664-9814-ee48-7c06-87170716aa83" testName="NeoSharp.Tests.Crypto.SecurityTests.TestHashCacheThreadSafety" computerName="r3e" duration="00:00:00.0037575" startTime="2025-08-22T04:19:14.1352065+00:00" endTime="2025-08-22T04:19:14.1352068+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bff371d-6a11-4322-af12-2bac455dc5cf" />
    <UnitTestResult executionId="0ff42af3-f13b-44b1-a63f-af3fb12dd247" testId="26db6d8c-2b9b-41b0-9243-370f8164f8a8" testName="NeoSharp.Tests.Crypto.SecurityTests.TestHashCaching" computerName="r3e" duration="00:00:00.0010123" startTime="2025-08-22T04:19:14.1098772+00:00" endTime="2025-08-22T04:19:14.1098773+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ff42af3-f13b-44b1-a63f-af3fb12dd247" />
    <UnitTestResult executionId="b87b412d-3798-4a6e-bfc5-2715379815c3" testId="b1072d1f-7873-6c4a-c503-939a854d65f7" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;3SEo3LWLoPntC&quot;, expectedHex: &quot;bf4f89001e670274dd&quot;)" computerName="r3e" duration="00:00:00.0000055" startTime="2025-08-22T04:19:09.5160288+00:00" endTime="2025-08-22T04:19:09.5160288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b87b412d-3798-4a6e-bfc5-2715379815c3" />
    <UnitTestResult executionId="dd61d74a-283f-41ae-b54b-e182076961ae" testId="1d0b1407-50e3-9faa-1e3c-031be37d7e48" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_WithUtf8String_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0001358" startTime="2025-08-22T04:19:09.5098605+00:00" endTime="2025-08-22T04:19:09.5098605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd61d74a-283f-41ae-b54b-e182076961ae" />
    <UnitTestResult executionId="02a7fac9-3238-45f8-9bd4-94595cab6f5d" testId="a7973589-6615-ff59-0718-69a2453e4a2e" testName="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeByteComparison" computerName="r3e" duration="00:00:00.0002357" startTime="2025-08-22T04:19:18.3869366+00:00" endTime="2025-08-22T04:19:18.3869367+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02a7fac9-3238-45f8-9bd4-94595cab6f5d" />
    <UnitTestResult executionId="1ac0d849-85d8-41a9-bb9e-a5ad3b5491b9" testId="54e39a07-b8b3-ea60-fc2e-939b4e8d3e8a" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Any, expectedJson: &quot;Any&quot;, expectedByte: 0)" computerName="r3e" duration="00:00:00.0000029" startTime="2025-08-22T04:19:09.5023847+00:00" endTime="2025-08-22T04:19:09.5023847+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ac0d849-85d8-41a9-bb9e-a5ad3b5491b9" />
    <UnitTestResult executionId="d84bb336-233a-45ba-aa4a-eb60a2aa0bbc" testId="c059a965-96a2-5f6a-33b0-65d3371d6856" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestSerialize" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4891419+00:00" endTime="2025-08-22T04:19:09.4891419+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d84bb336-233a-45ba-aa4a-eb60a2aa0bbc">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e653cdce-6ce1-4c3d-987a-509a2992a2ee" testId="954601e0-f9ec-a2d9-0256-f03b3529ae84" testName="NeoSharp.Tests.Types.Hash256Tests.Parse_WithValidHexString_ShouldCreateHash" computerName="r3e" duration="00:00:00.0001611" startTime="2025-08-22T04:19:09.5084698+00:00" endTime="2025-08-22T04:19:09.5084698+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e653cdce-6ce1-4c3d-987a-509a2992a2ee" />
    <UnitTestResult executionId="f23b79a1-cb6c-433a-8525-e1f396e8558a" testId="a808c36a-caa7-39d4-cdb6-d21910c083e8" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsWithExtraFields" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4992748+00:00" endTime="2025-08-22T04:19:09.4992749+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f23b79a1-cb6c-433a-8525-e1f396e8558a">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a59b3cd-e070-4a72-a431-a910b8eaa680" testId="e29c4f29-7204-f094-f66e-43917242093b" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromStringWithInvalidSize_ShouldThrowException" computerName="r3e" duration="00:00:00.0019680" startTime="2025-08-22T04:19:09.5934720+00:00" endTime="2025-08-22T04:19:09.5934720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a59b3cd-e070-4a72-a431-a910b8eaa680" />
    <UnitTestResult executionId="f6eb1107-40a2-4a64-8bd3-aac4e1e888b8" testId="bf17d55d-18b3-99d1-0543-d696a261fdc4" testName="NeoSharp.Tests.Types.Hash256Tests.Parse_WithRealHashes_ShouldSucceed(hashString: &quot;0xf782c7fde78c1c2b2021d1c0c8f17236d1c68690b96ad884&quot;···)" computerName="r3e" duration="00:00:00.0003441" startTime="2025-08-22T04:19:09.5085179+00:00" endTime="2025-08-22T04:19:09.5085179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6eb1107-40a2-4a64-8bd3-aac4e1e888b8" />
    <UnitTestResult executionId="f33c0155-8b90-4e35-bf8d-6235e94673e1" testId="a0d97b46-0458-3af4-f41c-5d33a12c3635" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckEncoding" computerName="r3e" duration="00:00:00.0042775" startTime="2025-08-22T04:19:09.5240466+00:00" endTime="2025-08-22T04:19:09.5240466+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f33c0155-8b90-4e35-bf8d-6235e94673e1" />
    <UnitTestResult executionId="8e2318f7-6ce0-48c0-9fae-9a9c43c1ac03" testId="b0afab83-521d-3bdc-8472-8661a0acaf09" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Map&quot;)" computerName="r3e" duration="00:00:00.0001397" startTime="2025-08-22T04:19:09.5043594+00:00" endTime="2025-08-22T04:19:09.5043594+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e2318f7-6ce0-48c0-9fae-9a9c43c1ac03" />
    <UnitTestResult executionId="d60e49c9-dc25-450c-8e1b-3ffd622f1582" testId="0522e2ba-d5d4-2a3d-66cc-29afc357df8a" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58LeadingZeros" computerName="r3e" duration="00:00:00.0002531" startTime="2025-08-22T04:19:09.5253555+00:00" endTime="2025-08-22T04:19:09.5253555+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d60e49c9-dc25-450c-8e1b-3ffd622f1582" />
    <UnitTestResult executionId="4091a2fd-419d-4b85-b16e-a3cac3b70572" testId="ca4fe77c-4e86-9f45-1b70-049fdc1c1239" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;00000000000000000000&quot;, expectedBase58: &quot;1111111111&quot;)" computerName="r3e" duration="00:00:00.0000095" startTime="2025-08-22T04:19:09.5165961+00:00" endTime="2025-08-22T04:19:09.5165962+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4091a2fd-419d-4b85-b16e-a3cac3b70572" />
    <UnitTestResult executionId="11c02e17-d9aa-4a8b-8931-5babbf09d5e3" testId="66e16570-c643-e3da-6443-21f93e9732be" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsStringRepresentation" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4847565+00:00" endTime="2025-08-22T04:19:09.4847787+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11c02e17-d9aa-4a8b-8931-5babbf09d5e3">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84ffb0d9-acd3-4423-a4ab-d5b05d4b5ee1" testId="0ed4a6a8-a7ff-3968-5edc-a11fd69e54d9" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushArrayEmpty_ShouldCreateNewArray0" computerName="r3e" duration="00:00:00.0028110" startTime="2025-08-22T04:19:09.5905266+00:00" endTime="2025-08-22T04:19:09.5905266+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84ffb0d9-acd3-4423-a4ab-d5b05d4b5ee1" />
    <UnitTestResult executionId="22cd30a5-7b28-42f1-af6a-36973ded86cc" testId="ec366ec3-cbab-e25c-b165-80f003a5a779" testName="NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromPrivateKey" computerName="r3e" duration="00:00:00.0243949" startTime="2025-08-22T04:19:09.5893799+00:00" endTime="2025-08-22T04:19:09.5893799+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22cd30a5-7b28-42f1-af6a-36973ded86cc">
      <Output>
        <ErrorInfo>
          <Message>Expected derivedPublicKey to be NeoSharp.Crypto.ECPublicKey
{
    EncodedBytes = {0xD6, 0xE5, 0xD5, 0xA4, 0x25, 0x40, 0x2E, 0xCA, 0xC5, 0xB7, 0x7F, 0x09, 0x9B, 0xE1, 0xFB, 0xBC, 0x91, 0x79, 0xA8, 0x55, 0x2E, 0x83, 0x77, 0xF7, 0xF3, 0xFB, 0x85, 0xF3, 0x6B, 0x90, 0xBF, 0x65, …1 more…}
}, but found NeoSharp.Crypto.ECPublicKey
{
    EncodedBytes = {0x02, 0x9F, 0x3C, 0xB8, 0x80, 0x10, 0xC2, 0x32, 0x26, 0x5D, 0x3A, 0x73, 0x5D, 0xCE, 0x50, 0x25, 0xE3, 0xA8, 0x6F, 0x68, 0x46, 0xA7, 0x4F, 0xE2, 0x7E, 0x7E, 0x33, 0xC3, 0x41, 0xDD, 0xC1, 0x63, …1 more…}
}.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Primitives.ObjectAssertions`2.BeEquivalentTo[TExpectation](TExpectation expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Primitives.ObjectAssertions`2.BeEquivalentTo[TExpectation](TExpectation expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromPrivateKey() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 131
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="035e3cdd-21ba-430e-81cf-47ae6827e341" testId="150e6074-80a7-605c-4217-a3ae543d9419" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestDefaultScryptParams" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4890233+00:00" endTime="2025-08-22T04:19:09.4890234+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="035e3cdd-21ba-430e-81cf-47ae6827e341">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0fb5e2d-a3fa-45f8-ae09-c663b252b045" testId="77fc752b-8f45-9e78-5b84-e90ebc566278" testName="NeoSharp.Tests.Crypto.WIFTests.InvalidPrivateKeyLength_ShouldThrowWIFException(length: 33)" computerName="r3e" duration="00:00:00.0006782" startTime="2025-08-22T04:19:09.5090629+00:00" endTime="2025-08-22T04:19:09.5090629+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0fb5e2d-a3fa-45f8-ae09-c663b252b045" />
    <UnitTestResult executionId="bf5c8946-5a8a-493d-9854-189c3d770097" testId="a04a0f39-a134-c31e-63fa-5c0df3d76221" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushMap_ShouldCreateCorrectMapStructure" computerName="r3e" duration="00:00:00.0023559" startTime="2025-08-22T04:19:09.5122983+00:00" endTime="2025-08-22T04:19:09.5122984+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bf5c8946-5a8a-493d-9854-189c3d770097" />
    <UnitTestResult executionId="4bb6dde2-8df9-40f1-99ec-9b24565ee027" testId="e20dd4bc-1076-9b08-911a-53745c946843" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyEquality_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0006498" startTime="2025-08-22T04:19:09.6066605+00:00" endTime="2025-08-22T04:19:09.6066607+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bb6dde2-8df9-40f1-99ec-9b24565ee027">
      <Output>
        <ErrorInfo>
          <Message>Expected publicKey1.GetHashCode() to be 12790583, but found 64660344 (difference of 51869761).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyEquality_ShouldWorkCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs:line 199
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="97c746c6-5e0b-4d50-8a8e-4b46369c913b" testId="4867ef49-9b69-7d61-fb16-c1d4ddc1384b" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteBytes_ShouldWriteByteArray" computerName="r3e" duration="00:00:00.0001822" startTime="2025-08-22T04:19:09.5830633+00:00" endTime="2025-08-22T04:19:09.5830633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97c746c6-5e0b-4d50-8a8e-4b46369c913b" />
    <UnitTestResult executionId="68185980-39b1-4453-a4db-7ea784301507" testId="ac899e7c-3b9d-efbd-e46c-1925a05dd291" testName="NeoSharp.Tests.Wallet.AccountTests.FromPrivateKey_ShouldCreateCorrectAccount" computerName="r3e" duration="00:00:00.0038651" startTime="2025-08-22T04:19:09.5855993+00:00" endTime="2025-08-22T04:19:09.5855994+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68185980-39b1-4453-a4db-7ea784301507" />
    <UnitTestResult executionId="0e066bd5-b304-46f0-a6ec-0f795da40ebd" testId="06f81819-3fd4-bb37-39ac-53fe9c4dccb5" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromPointWithHexPrefix_ShouldHandlePrefix" computerName="r3e" duration="00:00:00.0001554" startTime="2025-08-22T04:19:09.5821167+00:00" endTime="2025-08-22T04:19:09.5821168+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0e066bd5-b304-46f0-a6ec-0f795da40ebd" />
    <UnitTestResult executionId="8c630917-8135-4192-a43e-45b9f265081e" testId="6eeceb8d-f303-db47-4bc1-99a3fca42609" testName="NeoSharp.Tests.Script.ScriptBuilderTests.OpCode_ShouldAddCorrectOpCode" computerName="r3e" duration="00:00:00.0227891" startTime="2025-08-22T04:19:09.5104771+00:00" endTime="2025-08-22T04:19:09.5104772+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8c630917-8135-4192-a43e-45b9f265081e" />
    <UnitTestResult executionId="806ec3a0-6d6a-4e56-b80c-8c29eb0a85d7" testId="35384949-bc6d-881c-1268-c51617a75afb" testName="NeoSharp.Tests.Crypto.SecurityTests.TestSecureBytesCreation" computerName="r3e" duration="00:00:00.0005246" startTime="2025-08-22T04:19:14.1410669+00:00" endTime="2025-08-22T04:19:14.1410669+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="806ec3a0-6d6a-4e56-b80c-8c29eb0a85d7" />
    <UnitTestResult executionId="51a91fa6-2ed8-4b57-9675-87b12cb9d5c6" testId="a0bebf88-5e02-e146-8258-22cf0fc669cc" testName="NeoSharp.Tests.Types.Hash160Tests.Parse_WithoutPrefix_ShouldCreateHash" computerName="r3e" duration="00:00:00.0141907" startTime="2025-08-22T04:19:09.5018102+00:00" endTime="2025-08-22T04:19:09.5018102+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51a91fa6-2ed8-4b57-9675-87b12cb9d5c6" />
    <UnitTestResult executionId="03ff9497-ca45-4c49-8503-b472bded7fed" testId="36429002-8d89-ea56-e975-9c33a5aedcfa" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithWrongPassword" computerName="r3e" duration="00:00:03.9043445" startTime="2025-08-22T04:19:34.0771561+00:00" endTime="2025-08-22T04:19:34.0771562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03ff9497-ca45-4c49-8503-b472bded7fed">
      <Output>
        <ErrorInfo>
          <Message>Expected a &lt;NeoSharp.Crypto.NEP2Exception&gt; to be thrown, but found &lt;System.FormatException&gt;:
System.FormatException: Invalid base58 check string
   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.&lt;&gt;c__DisplayClass5_0.&lt;TestDecryptWithWrongPassword&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 108
   at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
   at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithWrongPassword() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 109
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49823c45-88ba-4a8c-90c8-261e4369e788" testId="137931c0-8691-6fca-7f01-9635ba02a966" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;516b6fcd0f&quot;, expectedBase58: &quot;ABnLTmg&quot;)" computerName="r3e" duration="00:00:00.0000051" startTime="2025-08-22T04:19:09.5167444+00:00" endTime="2025-08-22T04:19:09.5167444+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49823c45-88ba-4a8c-90c8-261e4369e788" />
    <UnitTestResult executionId="534f3d6c-faf3-4051-9503-7e883fccabbc" testId="1c288487-717c-db15-18cd-7065e8403dd8" testName="NeoSharp.Tests.Wallet.AccountTests.FromWIF_ShouldCreateCorrectAccount" computerName="r3e" duration="00:00:00.0001929" startTime="2025-08-22T04:19:09.5931006+00:00" endTime="2025-08-22T04:19:09.5931007+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="534f3d6c-faf3-4051-9503-7e883fccabbc">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.FromWIF_ShouldCreateCorrectAccount() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 106
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="963db483-c736-4dc4-90ec-8d0217e8c585" testId="a3ae36ff-fb49-636b-3f78-195a1ca621d2" testName="NeoSharp.Tests.Crypto.SignTests.TestSignMessage" computerName="r3e" duration="00:00:00.0008437" startTime="2025-08-22T04:19:09.5554492+00:00" endTime="2025-08-22T04:19:09.5554492+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="963db483-c736-4dc4-90ec-8d0217e8c585">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignMessage() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 73
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0036091b-f2f8-4c47-ab7c-29e9831d46a3" testId="3ad41eb3-674c-040c-673f-5eb164d827cb" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;61&quot;, expectedBase58: &quot;2g&quot;)" computerName="r3e" duration="00:00:00.0000029" startTime="2025-08-22T04:19:09.5166696+00:00" endTime="2025-08-22T04:19:09.5166696+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0036091b-f2f8-4c47-ab7c-29e9831d46a3" />
    <UnitTestResult executionId="69bc25f1-d9ba-44ee-a416-8c80e5b8f224" testId="5a36d705-aa38-507a-4b32-976bc129677f" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Integer_ShouldSerializeCorrectly" computerName="r3e" duration="00:00:00.0136740" startTime="2025-08-22T04:19:09.5013545+00:00" endTime="2025-08-22T04:19:09.5013545+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69bc25f1-d9ba-44ee-a416-8c80e5b8f224" />
    <UnitTestResult executionId="9b701f6c-6066-4b92-833b-ef7746f7405c" testId="0631d2fe-14c3-645d-b7f2-ea6ec366fdbe" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.Reset_ShouldClearBuffer" computerName="r3e" duration="00:00:00.0033283" startTime="2025-08-22T04:19:09.5859518+00:00" endTime="2025-08-22T04:19:09.5859519+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9b701f6c-6066-4b92-833b-ef7746f7405c">
      <Output>
        <ErrorInfo>
          <Message>Expected _writer.ToArray() to be empty, but found {0x42}.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
   at FluentAssertions.Execution.GivenSelector`1.FailWith(String message, Object[] args)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEmpty(String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryWriterTests.Reset_ShouldClearBuffer() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs:line 213
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d49c32f7-7018-4279-8250-1ce96ec9ebb3" testId="513e7ecc-85ad-0979-62bb-1b73ef202de7" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.DeterministicKeyGeneration_ShouldBeConsistent" computerName="r3e" duration="00:00:00.0060514" startTime="2025-08-22T04:19:09.5174043+00:00" endTime="2025-08-22T04:19:09.5174044+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d49c32f7-7018-4279-8250-1ce96ec9ebb3" />
    <UnitTestResult executionId="aea5e2b0-eed2-45cc-8d4f-c5cfe70a99eb" testId="f3e83804-4bfc-b256-1868-00b97a2ebe4b" testName="NeoSharp.Tests.Types.ContractParameterTests.Array_ShouldCreateArrayParameter" computerName="r3e" duration="00:00:00.0003734" startTime="2025-08-22T04:19:09.5094722+00:00" endTime="2025-08-22T04:19:09.5094723+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aea5e2b0-eed2-45cc-8d4f-c5cfe70a99eb" />
    <UnitTestResult executionId="24315a28-45a3-4f19-a32f-2c5d48ce5fa7" testId="7b266048-0978-0a8c-a97a-95543f8ed20d" testName="NeoSharp.Tests.Types.ContractParameterTests.Hash160_ShouldCreateHash160Parameter" computerName="r3e" duration="00:00:00.0002499" startTime="2025-08-22T04:19:09.5042098+00:00" endTime="2025-08-22T04:19:09.5042098+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24315a28-45a3-4f19-a32f-2c5d48ce5fa7" />
    <UnitTestResult executionId="4aed0f98-cf59-4058-b27b-e803348dbf7a" testId="47219b03-e477-2ce4-e2b2-e738b7e057c5" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithNonDefaultScryptParams" computerName="r3e" duration="00:00:00.0039236" startTime="2025-08-22T04:19:45.2548319+00:00" endTime="2025-08-22T04:19:45.2548322+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4aed0f98-cf59-4058-b27b-e803348dbf7a">
      <Output>
        <ErrorInfo>
          <Message>Expected encrypted to be "6PYM7jHL3uwhP8uuHP9fMGMfJxfyQbanUZPQEh1772iyb7vRnUkbkZmdRT" with a length of 58, but "QnVwghv7C7vBxoJCewcvJSY3Eeoa6DT3BMUhjUeCbwokzCHpoP9mrgMTM27" has a length of 59, differs near "QnV" (index 0).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstLengthDifferences()
   at FluentAssertions.Primitives.StringValidator.Validate()
   at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithNonDefaultScryptParams() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 74
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f57ed279-0ab2-49f3-9448-df37d132750c" testId="af020ac1-365f-b7eb-a431-ac7da1a55d0e" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarInt_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0007957" startTime="2025-08-22T04:19:09.5118393+00:00" endTime="2025-08-22T04:19:09.5118393+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f57ed279-0ab2-49f3-9448-df37d132750c" />
    <UnitTestResult executionId="65825c97-4051-48fc-8bfb-58d5215dd893" testId="92594ce4-a29a-2f60-6b95-8de7cbb18821" testName="NeoSharp.Tests.Contract.SmartContractTests.ScriptHash_ShouldBeReadOnly" computerName="r3e" duration="00:00:00.0023220" startTime="2025-08-22T04:19:09.6154460+00:00" endTime="2025-08-22T04:19:09.6154464+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65825c97-4051-48fc-8bfb-58d5215dd893" />
    <UnitTestResult executionId="b6ee372b-afbb-4cd0-8f9a-a8285c96ecbd" testId="f5fc6183-1464-d7b4-9e54-d9f91a9efcb6" testName="NeoSharp.Tests.Crypto.SignTests.TestSignatureByteArrayConversion" computerName="r3e" duration="00:00:00.0006368" startTime="2025-08-22T04:19:09.5496469+00:00" endTime="2025-08-22T04:19:09.5496470+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6ee372b-afbb-4cd0-8f9a-a8285c96ecbd" />
    <UnitTestResult executionId="742717e8-8148-46e7-a044-b321dace141e" testId="ea24ca3c-4e72-8267-eca6-49c11c381c9b" testName="NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKey_ShouldCreateCorrectScript" computerName="r3e" duration="00:00:00.0034652" startTime="2025-08-22T04:19:09.5900670+00:00" endTime="2025-08-22T04:19:09.5900672+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="742717e8-8148-46e7-a044-b321dace141e">
      <Output>
        <ErrorInfo>
          <Message>Expected script[36] to be 0x5C, but found 0x56.
Expected script[37] to be 0x1F, but found 0xE7.
Expected script[38] to be 0x5F, but found 0xB3.
Expected script[39] to be 0xC1, but found 0x27.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Include all non-private properties
- Include all non-private fields
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKey_ShouldCreateCorrectScript() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs:line 234
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="30e9c147-3a6f-412d-8391-ebeef853c867" testId="37ed753f-fb31-f836-a9b4-732002d7c58a" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;Rt5zm&quot;, expectedHex: &quot;10c8511e&quot;)" computerName="r3e" duration="00:00:00.0002563" startTime="2025-08-22T04:19:09.5155696+00:00" endTime="2025-08-22T04:19:09.5155697+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30e9c147-3a6f-412d-8391-ebeef853c867" />
    <UnitTestResult executionId="ced0221a-8cdc-44b0-956e-39441f879255" testId="bbd40c50-138a-242f-0a1a-f5146e72bc55" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.CreateRandomKeyPair_ShouldGenerateValidKeys" computerName="r3e" duration="00:00:00.0059479" startTime="2025-08-22T04:19:09.5862738+00:00" endTime="2025-08-22T04:19:09.5862738+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ced0221a-8cdc-44b0-956e-39441f879255" />
    <UnitTestResult executionId="cf716c78-d434-4c3c-97fc-36e874ff7cc9" testId="c064602b-a199-c25b-89df-ce5815c62b71" testName="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_ShouldCreateCorrectMultiSigAccount" computerName="r3e" duration="00:00:00.0046138" startTime="2025-08-22T04:19:09.5821495+00:00" endTime="2025-08-22T04:19:09.5821496+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cf716c78-d434-4c3c-97fc-36e874ff7cc9" />
    <UnitTestResult executionId="aca8545f-4346-4f9d-8d41-4ded5216e744" testId="fb9dbead-6581-a40e-326f-bb7f29555d11" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Boolean&quot;)" computerName="r3e" duration="00:00:00.0000063" startTime="2025-08-22T04:19:09.5044272+00:00" endTime="2025-08-22T04:19:09.5044273+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aca8545f-4346-4f9d-8d41-4ded5216e744" />
    <UnitTestResult executionId="0d148a32-769f-4906-938e-954e5fb51f65" testId="42f0c1d8-472b-225e-839a-1e8337b6f2c9" testName="NeoSharp.Tests.Types.Hash160Tests.ToLittleEndianArray_ShouldReverseBytes" computerName="r3e" duration="00:00:00.0151167" startTime="2025-08-22T04:19:09.5105255+00:00" endTime="2025-08-22T04:19:09.5105256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d148a32-769f-4906-938e-954e5fb51f65" />
    <UnitTestResult executionId="172c2140-81d3-4e8f-b3cb-f1f825162841" testId="05a04dc9-7731-84e7-b9ed-ede4e5c43f86" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Integer&quot;)" computerName="r3e" duration="00:00:00.0000083" startTime="2025-08-22T04:19:09.5043938+00:00" endTime="2025-08-22T04:19:09.5043938+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="172c2140-81d3-4e8f-b3cb-f1f825162841" />
    <UnitTestResult executionId="59f914b8-0c53-460d-b6ff-67c89929fc3b" testId="ebf5a56a-f7f7-6329-0fdd-d1c186256e6a" testName="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;&quot;)" computerName="r3e" duration="00:00:00.0002553" startTime="2025-08-22T04:19:09.5134381+00:00" endTime="2025-08-22T04:19:09.5134381+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59f914b8-0c53-460d-b6ff-67c89929fc3b" />
    <UnitTestResult executionId="c3e04221-fdd3-43dd-b73b-4a873e967041" testId="c0fece1f-9b44-eed0-6d57-25d33d60c993" testName="NeoSharp.Tests.Wallet.AccountTests.FromPublicKey_ShouldCreateCorrectAccount" computerName="r3e" duration="00:00:00.0002269" startTime="2025-08-22T04:19:09.5947873+00:00" endTime="2025-08-22T04:19:09.5947874+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3e04221-fdd3-43dd-b73b-4a873e967041" />
    <UnitTestResult executionId="1aa4c7f7-f51b-4d33-81aa-2c6c29a10aee" testId="9a19bf8c-2f75-d177-6e9d-60a96d4a88db" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;2cFupjhnEsSn59qHXstmK2ffpLv2&quot;, expectedHex: &quot;73696d706c792061206c6f6e6720737472696e67&quot;)" computerName="r3e" duration="00:00:00.0000100" startTime="2025-08-22T04:19:09.5159519+00:00" endTime="2025-08-22T04:19:09.5159519+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1aa4c7f7-f51b-4d33-81aa-2c6c29a10aee" />
    <UnitTestResult executionId="52ed5229-73a5-4bd5-b0e3-b2ec2e160100" testId="a5f85e1f-a238-e2d3-1bc1-0d79eff381b9" testName="NeoSharp.Tests.Crypto.WIFTests.PrivateKeyToWif_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0001710" startTime="2025-08-22T04:19:09.5117517+00:00" endTime="2025-08-22T04:19:09.5117518+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52ed5229-73a5-4bd5-b0e3-b2ec2e160100" />
    <UnitTestResult executionId="f86f3752-cf71-42ea-a781-587c4ca009a8" testId="3a8dc186-285e-ba06-37ed-700bdc91daf9" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_String_ShouldSerializeCorrectly" computerName="r3e" duration="00:00:00.0001154" startTime="2025-08-22T04:19:09.5037809+00:00" endTime="2025-08-22T04:19:09.5037809+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f86f3752-cf71-42ea-a781-587c4ca009a8" />
    <UnitTestResult executionId="e93ef869-6e08-4d53-aad9-d9929254b16f" testId="05f8f41f-2a0a-483a-d80a-d63002f27122" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2KeyChecksumValidation" computerName="r3e" duration="00:00:04.6782159" startTime="2025-08-22T04:19:14.1444890+00:00" endTime="2025-08-22T04:19:14.1444891+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e93ef869-6e08-4d53-aad9-d9929254b16f">
      <Output>
        <ErrorInfo>
          <Message>Expected exception message to match the equivalent of "*checksum*", but "Invalid base58 check string" does not.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.ExceptionAssertions`1.WithMessage(String expectedWildcardPattern, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2KeyChecksumValidation() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 193
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ad07e665-6306-46b6-bc63-98610241b948" testId="4b35573e-3a26-d9e4-572f-1869874e4bc6" testName="NeoSharp.Tests.Wallet.AccountTests.Sign_ShouldCreateValidSignature" computerName="r3e" duration="00:00:00.0013041" startTime="2025-08-22T04:19:09.5965486+00:00" endTime="2025-08-22T04:19:09.5965487+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad07e665-6306-46b6-bc63-98610241b948">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.Sign_ShouldCreateValidSignature() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 227
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="34d44a2d-00a7-46ee-b4bd-7d8b1722d4dc" testId="9c0fb039-5409-8e27-4cbc-4bb910228eab" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsEquality" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4984408+00:00" endTime="2025-08-22T04:19:09.4984408+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34d44a2d-00a7-46ee-b4bd-7d8b1722d4dc">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cda7fdca-fef4-4409-b305-1212f00657dd" testId="17439590-e91f-3aab-b409-463c285438fd" testName="NeoSharp.Tests.Crypto.SecurityTests.TestDeterministicSignatures" computerName="r3e" duration="00:00:00.0032600" startTime="2025-08-22T04:19:14.1406561+00:00" endTime="2025-08-22T04:19:14.1406562+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cda7fdca-fef4-4409-b305-1212f00657dd">
      <Output>
        <ErrorInfo>
          <Message>Expected sig1[0] to be 0xF8, but found 0xA8.
Expected sig1[1] to be 0xF7, but found 0x3C.
Expected sig1[2] to be 0x1C, but found 0xA6.
Expected sig1[3] to be 0xD5, but found 0x29.
Expected sig1[4] to be 0xEF, but found 0x9A.
Expected sig1[5] to be 0x4A, but found 0xC1.
Expected sig1[6] to be 0x0D, but found 0x63.
Expected sig1[7] to be 0xEC, but found 0x2B.
Expected sig1[8] to be 0x08, but found 0x49.
Expected sig1[9] to be 0x8C, but found 0xA1.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Include all non-private properties
- Include all non-private fields
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestDeterministicSignatures() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 247
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a336b5a9-943a-4596-be81-cd2bb88ada3f" testId="a7471f80-cbf9-8a3c-4135-e8764bf5beac" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadByte_ShouldReadSingleByte" computerName="r3e" duration="00:00:00.0001968" startTime="2025-08-22T04:19:09.9198918+00:00" endTime="2025-08-22T04:19:09.9198918+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a336b5a9-943a-4596-be81-cd2bb88ada3f" />
    <UnitTestResult executionId="7b785ece-173a-4df1-8ca5-58339b3a6bf5" testId="7d2410b8-3c58-b582-417b-c169fd10082a" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarBytes_ShouldReadVariableBytes" computerName="r3e" duration="00:00:00.0006373" startTime="2025-08-22T04:19:09.9119606+00:00" endTime="2025-08-22T04:19:09.9119608+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b785ece-173a-4df1-8ca5-58339b3a6bf5" />
    <UnitTestResult executionId="ef8d1ed7-fefb-403e-84a5-ef69aaf2498e" testId="459adc09-7f49-1440-4f10-c70a3ca70d53" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_ShouldCreateTransactionBuilder" computerName="r3e" duration="00:00:00.0021752" startTime="2025-08-22T04:19:09.6511953+00:00" endTime="2025-08-22T04:19:09.6511954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ef8d1ed7-fefb-403e-84a5-ef69aaf2498e" />
    <UnitTestResult executionId="96a63b0c-08f7-4d8b-b3d0-cb2c3776ec2c" testId="5a39d779-7003-bdf3-d546-1b77b3f14d9c" testName="NeoSharp.Tests.Crypto.SignTests.TestSignatureDataFromBytes" computerName="r3e" duration="00:00:00.0039544" startTime="2025-08-22T04:19:09.5610293+00:00" endTime="2025-08-22T04:19:09.5610294+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96a63b0c-08f7-4d8b-b3d0-cb2c3776ec2c" />
    <UnitTestResult executionId="102f51dc-96a4-40b0-ae34-06b16cb7601c" testId="0a80ec7c-a614-b66a-c381-75aab29fd732" testName="NeoSharp.Tests.Crypto.WIFTests.NullPrivateKey_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0004736" startTime="2025-08-22T04:19:09.5155404+00:00" endTime="2025-08-22T04:19:09.5155404+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="102f51dc-96a4-40b0-ae34-06b16cb7601c" />
    <UnitTestResult executionId="324a34f5-5d17-40aa-84ab-8b8dc10b4ab2" testId="64826042-8696-d8e4-f559-e9388633cb53" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Hash160_ShouldSerializeCorrectly" computerName="r3e" duration="00:00:00.0001963" startTime="2025-08-22T04:19:09.5038418+00:00" endTime="2025-08-22T04:19:09.5038418+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="324a34f5-5d17-40aa-84ab-8b8dc10b4ab2" />
    <UnitTestResult executionId="9c7572c3-fe04-43ff-89d3-7bed7b682043" testId="e8045b2b-82d5-c4bc-52d0-a2b14899b624" testName="NeoSharp.Tests.Crypto.SecurityTests.TestNEP2WrongPassword" computerName="r3e" duration="00:00:04.6205424" startTime="2025-08-22T04:19:14.1079797+00:00" endTime="2025-08-22T04:19:14.1079805+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c7572c3-fe04-43ff-89d3-7bed7b682043">
      <Output>
        <ErrorInfo>
          <Message>Expected a &lt;NeoSharp.Crypto.NEP2Exception&gt; to be thrown, but found &lt;System.FormatException&gt;:
System.FormatException: Invalid base58 check string
   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.SecurityTests.&lt;&gt;c__DisplayClass7_0.&lt;TestNEP2WrongPassword&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 150
   at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
   at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestNEP2WrongPassword() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 151
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65d0cbc8-2d66-44b8-953d-96f55455c08f" testId="5569ace7-c374-a3a5-367c-296344974383" testName="NeoSharp.Tests.Types.Hash160Tests.Equals_WithDifferentHash_ShouldReturnFalse" computerName="r3e" duration="00:00:00.0001747" startTime="2025-08-22T04:19:09.5152983+00:00" endTime="2025-08-22T04:19:09.5152984+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65d0cbc8-2d66-44b8-953d-96f55455c08f" />
    <UnitTestResult executionId="eab58b7c-805e-464f-b111-0b96f273fac5" testId="7c596a1b-f03c-10d5-15f5-4962c4c57d6b" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EmptyInput" computerName="r3e" duration="00:00:00.0001543" startTime="2025-08-22T04:19:09.5244703+00:00" endTime="2025-08-22T04:19:09.5244704+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eab58b7c-805e-464f-b111-0b96f273fac5" />
    <UnitTestResult executionId="41acbb7b-33e9-423f-93b2-db4532d800c7" testId="723e2c01-0ca0-a41a-c68a-e34ac45318ce" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarInt_ShouldReadVariableIntegers" computerName="r3e" duration="00:00:00.0003063" startTime="2025-08-22T04:19:09.9198342+00:00" endTime="2025-08-22T04:19:09.9198342+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41acbb7b-33e9-423f-93b2-db4532d800c7" />
    <UnitTestResult executionId="00ff6d74-cb9e-4595-8914-0a89959d0ccb" testId="fb9c5acf-a0a4-9474-e2d6-b90acdb6038f" testName="NeoSharp.Tests.Contract.SmartContractTests.Constructor_ShouldSetScriptHashCorrectly" computerName="r3e" duration="00:00:00.0051094" startTime="2025-08-22T04:19:09.6473307+00:00" endTime="2025-08-22T04:19:09.6473308+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00ff6d74-cb9e-4595-8914-0a89959d0ccb" />
    <UnitTestResult executionId="ebc57958-c9f9-411c-9d8e-a4383c9b6209" testId="8fc4c271-55a8-1d75-ee9b-ca171542217e" testName="NeoSharp.Tests.Crypto.SignTests.TestDeterministicSigning" computerName="r3e" duration="00:00:00.0007697" startTime="2025-08-22T04:19:09.5562685+00:00" endTime="2025-08-22T04:19:09.5562686+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ebc57958-c9f9-411c-9d8e-a4383c9b6209">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestDeterministicSigning() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 187
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fbd663a2-741b-41e7-bac1-8fe69e6fcd86" testId="5c8b8879-3785-ed7e-8517-b4801c6cd5ed" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.ToArray_ShouldReturnAllWrittenData" computerName="r3e" duration="00:00:00.0003433" startTime="2025-08-22T04:19:09.5110457+00:00" endTime="2025-08-22T04:19:09.5110458+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbd663a2-741b-41e7-bac1-8fe69e6fcd86" />
    <UnitTestResult executionId="ac957922-5244-4826-9623-64178c8eb8df" testId="498133df-5339-0fec-7f10-6cd5a987c16c" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Array&quot;)" computerName="r3e" duration="00:00:00.0000061" startTime="2025-08-22T04:19:09.5044594+00:00" endTime="2025-08-22T04:19:09.5044594+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac957922-5244-4826-9623-64178c8eb8df" />
    <UnitTestResult executionId="df30c644-c4fe-4995-be6c-b722a16cd283" testId="8037f4df-cf2b-6def-7972-b1473d2ac3fc" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;ABnLTmg&quot;, expectedHex: &quot;516b6fcd0f&quot;)" computerName="r3e" duration="00:00:00.0000087" startTime="2025-08-22T04:19:09.5156063+00:00" endTime="2025-08-22T04:19:09.5156063+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df30c644-c4fe-4995-be6c-b722a16cd283" />
    <UnitTestResult executionId="dbbf5318-d76d-4b8c-bef6-2738814d5a0e" testId="7b1adb34-29e1-8e99-6cf5-b6dc68ed1598" testName="NeoSharp.Tests.Types.Hash160Tests.GetHashCode_ShouldBeConsistent" computerName="r3e" duration="00:00:00.0001912" startTime="2025-08-22T04:19:09.5148679+00:00" endTime="2025-08-22T04:19:09.5148679+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbbf5318-d76d-4b8c-bef6-2738814d5a0e" />
    <UnitTestResult executionId="9c3a99f5-f02c-4169-a934-105aa6da7d67" testId="89d95cf3-c50b-5860-b057-4a39d76baba8" testName="NeoSharp.Tests.Types.ContractParameterTests.Equals_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0005316" startTime="2025-08-22T04:19:09.5096213+00:00" endTime="2025-08-22T04:19:09.5096214+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9c3a99f5-f02c-4169-a934-105aa6da7d67" />
    <UnitTestResult executionId="42d07d75-fef1-48cd-bc30-fd8d5ccd0b5b" testId="6f06f4f6-7e48-c0da-1fff-f5c44b023382" testName="NeoSharp.Tests.Types.Hash160Tests.FromScript_WithValidScript_ShouldCreateHash" computerName="r3e" duration="00:00:00.0062654" startTime="2025-08-22T04:19:09.5080917+00:00" endTime="2025-08-22T04:19:09.5080922+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42d07d75-fef1-48cd-bc30-fd8d5ccd0b5b" />
    <UnitTestResult executionId="9ec7853d-a34b-44cd-a15a-72e15c29f4dd" testId="7f7ab2b2-597e-eee2-72be-73a112a769f7" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Integer, expectedJson: &quot;Integer&quot;, expectedByte: 17)" computerName="r3e" duration="00:00:00.0001724" startTime="2025-08-22T04:19:09.5022651+00:00" endTime="2025-08-22T04:19:09.5022652+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ec7853d-a34b-44cd-a15a-72e15c29f4dd" />
    <UnitTestResult executionId="92653fac-e576-45c2-8d6f-584be39a94af" testId="cabce220-086e-7b08-bb2d-5b89bcbe34c8" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingForInvalidStrings" computerName="r3e" duration="00:00:00.0001695" startTime="2025-08-22T04:19:09.5242623+00:00" endTime="2025-08-22T04:19:09.5242624+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92653fac-e576-45c2-8d6f-584be39a94af" />
    <UnitTestResult executionId="8156ab60-2ca0-4cb1-a3aa-0c885b15fc9f" testId="c9d78f46-4c53-e244-bafd-0d22014fcd87" testName="NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_ShouldDecryptPrivateKey" computerName="r3e" duration="00:00:00.0003572" startTime="2025-08-22T04:19:09.5774367+00:00" endTime="2025-08-22T04:19:09.5774367+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8156ab60-2ca0-4cb1-a3aa-0c885b15fc9f">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_ShouldDecryptPrivateKey() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 199
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b01bdca7-3810-4bbe-bb77-08884b5aad81" testId="1c147b09-1397-43a6-8b37-d96f2d1f3ed4" testName="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeStringComparison" computerName="r3e" duration="00:00:00.0001023" startTime="2025-08-22T04:19:18.3874890+00:00" endTime="2025-08-22T04:19:18.3874890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b01bdca7-3810-4bbe-bb77-08884b5aad81" />
    <UnitTestResult executionId="855db99c-4cd6-41e7-bab0-a3e9a11aefed" testId="c6ca9350-47d0-de0b-9e29-00de07b6df7a" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithWhitespaceMethod_ShouldThrowArgumentException" computerName="r3e" duration="00:00:00.0056628" startTime="2025-08-22T04:19:09.6421498+00:00" endTime="2025-08-22T04:19:09.6421500+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="855db99c-4cd6-41e7-bab0-a3e9a11aefed" />
    <UnitTestResult executionId="95393441-e1cf-462e-bbca-2657d419a8dd" testId="242ecbf7-6100-e859-58bb-a5d31355fd7f" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushBoolean_ShouldCreateCorrectOpCode" computerName="r3e" duration="00:00:00.0003260" startTime="2025-08-22T04:19:09.5143778+00:00" endTime="2025-08-22T04:19:09.5143778+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95393441-e1cf-462e-bbca-2657d419a8dd" />
    <UnitTestResult executionId="379dd9db-f836-4c32-88fc-f0233b02514f" testId="78f352c5-3b6e-fb0e-98ff-03ea8c6b439a" testName="NeoSharp.Tests.Script.ScriptBuilderTests.ContractCall_ShouldCreateCorrectScript" computerName="r3e" duration="00:00:00.0006133" startTime="2025-08-22T04:19:09.5940644+00:00" endTime="2025-08-22T04:19:09.5940644+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="379dd9db-f836-4c32-88fc-f0233b02514f" />
    <UnitTestResult executionId="37e2a3d1-43b9-423f-b693-09a0cbfcdf6e" testId="bf7d9fb7-e62a-8966-f152-a6c666e37bf0" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairFromPrivateKey_ShouldGenerateCorrectPublicKey" computerName="r3e" duration="00:00:00.0010440" startTime="2025-08-22T04:19:09.5239244+00:00" endTime="2025-08-22T04:19:09.5239246+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37e2a3d1-43b9-423f-b693-09a0cbfcdf6e" />
    <UnitTestResult executionId="b3ccb2d2-7192-4599-8e3d-c28c1825dcb4" testId="8bf81e66-377b-fa96-3dfc-8bfd6c40e44c" testName="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException" computerName="r3e" duration="00:00:00.0039949" startTime="2025-08-22T04:19:09.6049541+00:00" endTime="2025-08-22T04:19:09.6049542+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3ccb2d2-7192-4599-8e3d-c28c1825dcb4">
      <Output>
        <ErrorInfo>
          <Message>Expected exception message to match the equivalent of "*empty*", but "At least one public key is required (Parameter 'publicKeys')" does not.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.ExceptionAssertions`1.WithMessage(String expectedWildcardPattern, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 299
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="96e24c92-1792-4106-85f2-4b9398884dbb" testId="064f0647-333d-d6ac-aef1-1673d5818907" testName="NeoSharp.Tests.Script.ScriptBuilderTests.Clear_ShouldResetBuilder" computerName="r3e" duration="00:00:00.0001895" startTime="2025-08-22T04:19:09.5140031+00:00" endTime="2025-08-22T04:19:09.5140031+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96e24c92-1792-4106-85f2-4b9398884dbb" />
    <UnitTestResult executionId="267dfa9b-9ab4-45fa-b5f2-41858240e30b" testId="920e6c5d-9623-aca6-54e1-2a6db20518e7" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;&quot;, expectedBase58: &quot;&quot;)" computerName="r3e" duration="00:00:00.0001166" startTime="2025-08-22T04:19:09.5162619+00:00" endTime="2025-08-22T04:19:09.5162619+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="267dfa9b-9ab4-45fa-b5f2-41858240e30b" />
    <UnitTestResult executionId="369ece6c-3472-49ca-83c8-2a6c05e22e9e" testId="0a93bcd0-fc6a-56a2-32f3-61add043fee9" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairSigning_ShouldProduceValidSignature" computerName="r3e" duration="00:00:00.0011652" startTime="2025-08-22T04:19:09.5826889+00:00" endTime="2025-08-22T04:19:09.5826889+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="369ece6c-3472-49ca-83c8-2a6c05e22e9e" />
    <UnitTestResult executionId="98ee5991-02a2-491c-998b-ef324b59275a" testId="76faaf38-4622-4c88-5501-fed78da072ec" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushParamEmptyArray_ShouldCreateNewArray0" computerName="r3e" duration="00:00:00.0003153" startTime="2025-08-22T04:19:09.5901382+00:00" endTime="2025-08-22T04:19:09.5901383+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98ee5991-02a2-491c-998b-ef324b59275a" />
    <UnitTestResult executionId="63b48d5f-62c0-4846-af87-e1fef2656d78" testId="2b42cf1e-53f1-51d7-378c-373f8211cdc9" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeySize_ShouldBeCorrect" computerName="r3e" duration="00:00:00.0001449" startTime="2025-08-22T04:19:09.5863384+00:00" endTime="2025-08-22T04:19:09.5863385+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63b48d5f-62c0-4846-af87-e1fef2656d78" />
    <UnitTestResult executionId="e546193d-b16e-411f-b0ae-87526826336a" testId="0c17d28a-6ce5-362a-f711-bf5c79224b99" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushString_ShouldHandleDifferentSizes" computerName="r3e" duration="00:00:00.0648561" startTime="2025-08-22T04:19:09.5794109+00:00" endTime="2025-08-22T04:19:09.5794110+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e546193d-b16e-411f-b0ae-87526826336a">
      <Output>
        <ErrorInfo>
          <Message>Expected bytes to be a collection with 2 item(s), but {0x10}
contains 1 item(s) less than
{0x0C, 0x00}.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Include all non-private properties
- Include all non-private fields
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Script.ScriptBuilderTests.AssertBuilder(Byte[] expected, Nullable`1 firstN, Nullable`1 lastN, Nullable`1 length) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs:line 419
   at NeoSharp.Tests.Script.ScriptBuilderTests.PushString_ShouldHandleDifferentSizes() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs:line 87
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="244b22fe-5242-4584-bfe8-7854e91794ea" testId="969475b1-614e-3792-edcc-ede55f705bde" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;2g&quot;, expectedHex: &quot;61&quot;)" computerName="r3e" duration="00:00:00.0000026" startTime="2025-08-22T04:19:09.5161745+00:00" endTime="2025-08-22T04:19:09.5161745+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="244b22fe-5242-4584-bfe8-7854e91794ea" />
    <UnitTestResult executionId="af479630-c34c-4200-bd86-b633851e04d9" testId="5275f261-f731-19c7-4b6e-434e6bc2d08d" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBytes_ShouldReadCorrectlyBasedOnPrefix" computerName="r3e" duration="00:00:00.3326611" startTime="2025-08-22T04:19:09.9066168+00:00" endTime="2025-08-22T04:19:09.9066170+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="af479630-c34c-4200-bd86-b633851e04d9" />
    <UnitTestResult executionId="d0f27ab6-c16c-453b-bc0b-bfb8ccab5e78" testId="6a1a42d1-c8ac-745c-9a41-f4fb54483f96" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithEmptyMethod_ShouldThrowArgumentException" computerName="r3e" duration="00:00:00.1435825" startTime="2025-08-22T04:19:09.6067032+00:00" endTime="2025-08-22T04:19:09.6067032+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0f27ab6-c16c-453b-bc0b-bfb8ccab5e78" />
    <UnitTestResult executionId="44c61406-72fc-4c2e-9f38-e2e456181b64" testId="3fdd123a-6dd7-43a2-c25a-6a9fb66236db" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;3EFU7m&quot;, expectedHex: &quot;572e4794&quot;)" computerName="r3e" duration="00:00:00.0000032" startTime="2025-08-22T04:19:09.5160982+00:00" endTime="2025-08-22T04:19:09.5160982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44c61406-72fc-4c2e-9f38-e2e456181b64" />
    <UnitTestResult executionId="35266081-c8e4-4ea5-abc6-be929087b398" testId="91cbf24d-f0bf-6c41-1756-f4dc69567fe4" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithNullParameters_ShouldWork" computerName="r3e" duration="00:00:00.0028743" startTime="2025-08-22T04:19:09.6130177+00:00" endTime="2025-08-22T04:19:09.6130179+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35266081-c8e4-4ea5-abc6-be929087b398" />
    <UnitTestResult executionId="2cdee33a-42c7-4134-a43e-f244da111a8a" testId="e5bc4cef-c9d7-228d-d607-aa84511db155" testName="NeoSharp.Tests.Types.Hash256Tests.Equals_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0007520" startTime="2025-08-22T04:19:09.5148290+00:00" endTime="2025-08-22T04:19:09.5148290+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cdee33a-42c7-4134-a43e-f244da111a8a" />
    <UnitTestResult executionId="784fed1c-24c3-46a5-af61-a408846e9e73" testId="d88f0724-fb18-bcb6-0e7b-5a1ac4859c7c" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadUInt16_ShouldReadCorrectValues" computerName="r3e" duration="00:00:00.0017321" startTime="2025-08-22T04:19:09.9122273+00:00" endTime="2025-08-22T04:19:09.9122274+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="784fed1c-24c3-46a5-af61-a408846e9e73" />
    <UnitTestResult executionId="1dfab0c9-308f-4a66-aef7-035d2a586535" testId="43a93774-e244-efde-3836-bf3986847e98" testName="NeoSharp.Tests.Types.Hash160Tests.CompareTo_ShouldOrderCorrectly" computerName="r3e" duration="00:00:00.0005978" startTime="2025-08-22T04:19:09.5150180+00:00" endTime="2025-08-22T04:19:09.5150181+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1dfab0c9-308f-4a66-aef7-035d2a586535" />
    <UnitTestResult executionId="d3e364b7-daa1-4143-bc03-67a8c3ab094a" testId="0f5e07ad-4979-2fa5-f6e0-8e5750b169fc" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestHardenedDerivation" computerName="r3e" duration="00:00:00.0002705" startTime="2025-08-22T04:19:09.5083502+00:00" endTime="2025-08-22T04:19:09.5083503+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3e364b7-daa1-4143-bc03-67a8c3ab094a" />
    <UnitTestResult executionId="2997f5ce-b393-4592-91c9-ab73f9e07e93" testId="0cd0b68b-dc3d-1e65-70c2-00debc90e057" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 16384, r: 8, p: 8)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4887919+00:00" endTime="2025-08-22T04:19:09.4887920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2997f5ce-b393-4592-91c9-ab73f9e07e93">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d3ef7427-4ec8-472b-ad19-be18896c3d88" testId="ed490758-ac9d-30c7-6c35-31dda870b5e6" testName="NeoSharp.Tests.Types.Hash256Tests.Parse_WithRealHashes_ShouldSucceed(hashString: &quot;0x668e0c1f9870f61d45b8a91c77585e468c22c1216c5d6f94&quot;···)" computerName="r3e" duration="00:00:00.0001134" startTime="2025-08-22T04:19:09.5088717+00:00" endTime="2025-08-22T04:19:09.5088717+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d3ef7427-4ec8-472b-ad19-be18896c3d88" />
    <UnitTestResult executionId="c4d76e20-ad34-4e78-b5fe-21f45b9e3ecf" testId="9462caff-3bcd-cb3a-1143-b324bad75af7" testName="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;&quot;)" computerName="r3e" duration="00:00:00.0007115" startTime="2025-08-22T04:19:09.5434117+00:00" endTime="2025-08-22T04:19:09.5434118+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c4d76e20-ad34-4e78-b5fe-21f45b9e3ecf">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 255
   at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="edc8bccf-9bc6-4c85-9240-f6dae904c497" testId="3f3058b5-29b7-7193-a316-a0a18c9bcf81" testName="NeoSharp.Tests.Types.Hash256Tests.Size_ShouldReturn32" computerName="r3e" duration="00:00:00.0000920" startTime="2025-08-22T04:19:09.5144395+00:00" endTime="2025-08-22T04:19:09.5144396+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edc8bccf-9bc6-4c85-9240-f6dae904c497" />
    <UnitTestResult executionId="dcff878f-5584-4614-b80a-7d8538f09d3d" testId="3c56c2c2-4fb6-11eb-e517-8e04c9da4bfc" testName="NeoSharp.Tests.Types.Hash256Tests.ImplicitStringConversion_ShouldReturnHexString" computerName="r3e" duration="00:00:00.0001296" startTime="2025-08-22T04:19:09.5134726+00:00" endTime="2025-08-22T04:19:09.5134726+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dcff878f-5584-4614-b80a-7d8538f09d3d" />
    <UnitTestResult executionId="a5141bc3-6948-4438-894b-f9cbb87fef83" testId="212362f0-6582-d921-5ad6-0f18fb1fccd7" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteByte_ShouldWriteSingleByte" computerName="r3e" duration="00:00:00.0359261" startTime="2025-08-22T04:19:09.5109329+00:00" endTime="2025-08-22T04:19:09.5109329+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a5141bc3-6948-4438-894b-f9cbb87fef83" />
    <UnitTestResult executionId="1218fd51-65c9-421d-a33e-df73fef91267" testId="ab3c62e7-d184-01a1-5e12-a63742eb3420" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.DeserializePublicKey_ShouldCreateCorrectKey" computerName="r3e" duration="00:00:00.0001212" startTime="2025-08-22T04:19:09.5827320+00:00" endTime="2025-08-22T04:19:09.5827321+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1218fd51-65c9-421d-a33e-df73fef91267" />
    <UnitTestResult executionId="d336427a-ecba-4c14-9115-bb188c1baa68" testId="a4f10603-0b26-0d65-ce5e-e2df30b3d1b6" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_ForBytes_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0001044" startTime="2025-08-22T04:19:09.5104167+00:00" endTime="2025-08-22T04:19:09.5104168+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d336427a-ecba-4c14-9115-bb188c1baa68" />
    <UnitTestResult executionId="abb8118a-fc65-485b-afdd-04ca16752534" testId="76bfe392-7fcd-a802-9e94-5d9cc9e08f66" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;QmxvY2tjaGFpbg==&quot;, originalText: &quot;Blockchain&quot;)" computerName="r3e" duration="00:00:00.0000086" startTime="2025-08-22T04:19:09.5097682+00:00" endTime="2025-08-22T04:19:09.5097683+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abb8118a-fc65-485b-afdd-04ca16752534" />
    <UnitTestResult executionId="061fd82f-8562-49a2-bcbe-c60256874bae" testId="0aff520c-12c7-ea64-ba02-ff6e8d29b49f" testName="NeoSharp.Tests.Wallet.AccountTests.EncryptPrivateKey_ShouldEncryptPrivateKey" computerName="r3e" duration="00:00:00.0001602" startTime="2025-08-22T04:19:09.5933988+00:00" endTime="2025-08-22T04:19:09.5933988+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="061fd82f-8562-49a2-bcbe-c60256874bae">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.EncryptPrivateKey_ShouldEncryptPrivateKey() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 184
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c874db28-7215-41f3-ac59-91a9e5a75354" testId="3d1072a3-d564-79e2-b111-feb2d4c2120c" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteNullableBytes_ShouldHandleNullValues" computerName="r3e" duration="00:00:00.0001833" startTime="2025-08-22T04:19:09.5128145+00:00" endTime="2025-08-22T04:19:09.5128145+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c874db28-7215-41f3-ac59-91a9e5a75354" />
    <UnitTestResult executionId="bd1692bd-9c09-4621-b46c-3ccb3439fb94" testId="8c07b406-fe7d-69af-02cd-d9ef9d9292a2" testName="NeoSharp.Tests.Types.Hash160Tests.Constructor_WithInvalidLength_ShouldThrowException" computerName="r3e" duration="00:00:00.0002788" startTime="2025-08-22T04:19:09.5117998+00:00" endTime="2025-08-22T04:19:09.5117999+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd1692bd-9c09-4621-b46c-3ccb3439fb94" />
    <UnitTestResult executionId="46e6f69a-c6ce-4e40-a8fa-27a12d522f1d" testId="bccc2445-89a6-1399-42c4-b4fe289cc575" testName="NeoSharp.Tests.Types.Hash160Tests.FromPublicKey_WithValidPublicKey_ShouldCreateHash" computerName="r3e" duration="00:00:00.0005081" startTime="2025-08-22T04:19:09.5153973+00:00" endTime="2025-08-22T04:19:09.5153974+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="46e6f69a-c6ce-4e40-a8fa-27a12d522f1d" />
    <UnitTestResult executionId="1b983a1e-d794-4652-8232-c3a9ed6420f6" testId="dff9965e-4957-f7db-013c-ff7112bdb3f5" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushMapNested_ShouldCreateCorrectNestedMapStructure" computerName="r3e" duration="00:00:00.0040762" startTime="2025-08-22T04:19:09.5134800+00:00" endTime="2025-08-22T04:19:09.5134800+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b983a1e-d794-4652-8232-c3a9ed6420f6" />
    <UnitTestResult executionId="5232cb0a-a15e-449e-858e-8dfde02fa174" testId="0d10b196-42d5-b32d-b6e6-0a21b3a72aed" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_ShouldDecodeCorrectly" computerName="r3e" duration="00:00:00.0002056" startTime="2025-08-22T04:19:09.5098131+00:00" endTime="2025-08-22T04:19:09.5098131+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5232cb0a-a15e-449e-858e-8dfde02fa174" />
    <UnitTestResult executionId="3f9ed98e-e758-45cc-8e07-0bb2e9572d2c" testId="18b7722c-b2a8-52c1-cddc-92860b3f2b90" testName="NeoSharp.Tests.Types.EnumTypeTests.TransactionAttributeType_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0001109" startTime="2025-08-22T04:19:09.5042672+00:00" endTime="2025-08-22T04:19:09.5042672+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f9ed98e-e758-45cc-8e07-0bb2e9572d2c" />
    <UnitTestResult executionId="021547c2-51d5-4776-8d6c-a215190a1f78" testId="694269c9-e36e-d154-83f2-af845bc2e686" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;a&quot;)" computerName="r3e" duration="00:00:04.0650086" startTime="2025-08-22T04:19:22.4942050+00:00" endTime="2025-08-22T04:19:22.4942051+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="021547c2-51d5-4776-8d6c-a215190a1f78">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 147
   at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f75d99c0-5976-4141-a25f-a2905053fed7" testId="ee08edbe-4c15-84de-05db-9a33d9ce21b4" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: ByteArray, expectedJson: &quot;ByteArray&quot;, expectedByte: 18)" computerName="r3e" duration="00:00:00.0000025" startTime="2025-08-22T04:19:09.5025658+00:00" endTime="2025-08-22T04:19:09.5025658+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f75d99c0-5976-4141-a25f-a2905053fed7" />
    <UnitTestResult executionId="c57b0d88-a906-42d2-bc25-df3a342d7df8" testId="37b43959-e293-89a7-a436-5db3f7c6bca6" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors3" computerName="r3e" duration="00:00:00.0001076" startTime="2025-08-22T04:19:09.5082290+00:00" endTime="2025-08-22T04:19:09.5082291+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c57b0d88-a906-42d2-bc25-df3a342d7df8" />
    <UnitTestResult executionId="53c7f11b-226c-43cc-95b2-6f0ed8e19333" testId="4c1b1419-5c14-80bd-dd63-0cffef6e6b4c" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsValidation" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4990668+00:00" endTime="2025-08-22T04:19:09.4990669+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="53c7f11b-226c-43cc-95b2-6f0ed8e19333">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b8783766-a0bb-4016-95ef-686a0449cc3a" testId="3ed16a39-f753-1684-2bda-2743af606520" testName="NeoSharp.Tests.Wallet.AccountTests.Constructor_WithExistingKeyPair_ShouldCreateCorrectAccount" computerName="r3e" duration="00:00:00.0007530" startTime="2025-08-22T04:19:09.5979058+00:00" endTime="2025-08-22T04:19:09.5979058+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8783766-a0bb-4016-95ef-686a0449cc3a" />
    <UnitTestResult executionId="997a845c-eaf6-4d06-bdba-9ebf7e7ee28f" testId="dcb9e996-abcc-94c1-715a-a881c7c87d00" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_Collections_ShouldBeDetected" computerName="r3e" duration="00:00:00.0002157" startTime="2025-08-22T04:19:09.5038185+00:00" endTime="2025-08-22T04:19:09.5038186+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="997a845c-eaf6-4d06-bdba-9ebf7e7ee28f" />
    <UnitTestResult executionId="861fd8d5-bad1-4435-bf25-9a98babb1037" testId="eb73977e-8f44-f8b8-ed4a-02bb3f4815ba" testName="NeoSharp.Tests.Types.Hash256Tests.ToArray_ShouldReturnBigEndianBytes" computerName="r3e" duration="00:00:00.0035820" startTime="2025-08-22T04:19:09.5132058+00:00" endTime="2025-08-22T04:19:09.5132059+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="861fd8d5-bad1-4435-bf25-9a98babb1037" />
    <UnitTestResult executionId="057ff842-7d9c-4a88-901e-4c15de7a717e" testId="e00d70fb-44f8-7b36-8e1e-0ef0429966ac" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2WithDifferentScryptParams" computerName="r3e" duration="00:00:04.5966269" startTime="2025-08-22T04:19:38.6692934+00:00" endTime="2025-08-22T04:19:38.6692936+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="057ff842-7d9c-4a88-901e-4c15de7a717e">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2WithDifferentScryptParams() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 171
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="121816b9-35d8-43f0-a265-aa155870a2b5" testId="dc7a5ba7-f9d6-fc52-1733-2b6ba5e7f9c8" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.Available_ShouldReturnRemainingBytes" computerName="r3e" duration="00:00:00.0004056" startTime="2025-08-22T04:19:09.5752250+00:00" endTime="2025-08-22T04:19:09.5752251+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="121816b9-35d8-43f0-a265-aa155870a2b5" />
    <UnitTestResult executionId="71c7c4cd-fc57-4c39-9dc2-9983eeb82551" testId="b985c272-2592-d0e5-e7ac-1705f30801e5" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestDeserialize" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4988507+00:00" endTime="2025-08-22T04:19:09.4988508+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71c7c4cd-fc57-4c39-9dc2-9983eeb82551">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e36cd89e-835f-4038-98aa-71eea12406e7" testId="8c8e5669-cac9-8cd2-8cb1-9da59e2f22d4" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushByteArray_ShouldHandleDifferentSizes" computerName="r3e" duration="00:00:00.0012317" startTime="2025-08-22T04:19:09.5910812+00:00" endTime="2025-08-22T04:19:09.5910812+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e36cd89e-835f-4038-98aa-71eea12406e7" />
    <UnitTestResult executionId="480d42a0-df97-49d9-ba4f-58a90c97fbcc" testId="98f39cc9-60d5-cddc-419a-d6fad552effe" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteInt64_ShouldWriteCorrectBytes" computerName="r3e" duration="00:00:00.0025273" startTime="2025-08-22T04:19:09.5795270+00:00" endTime="2025-08-22T04:19:09.5795270+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="480d42a0-df97-49d9-ba4f-58a90c97fbcc" />
    <UnitTestResult executionId="a42d0f4e-a91d-4c4a-9167-061dac1d9e6f" testId="3261412c-4855-a412-6651-3353475b70d1" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_WithEmptyInput_ShouldReturnEmptyArray" computerName="r3e" duration="00:00:00.0005130" startTime="2025-08-22T04:19:09.5102711+00:00" endTime="2025-08-22T04:19:09.5102712+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a42d0f4e-a91d-4c4a-9167-061dac1d9e6f" />
    <UnitTestResult executionId="3b1cee97-2732-45a9-b29d-a85ddfacbc05" testId="a44c85b8-f35a-b67e-c72e-802a946b2b67" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors2" computerName="r3e" duration="00:00:00.0001767" startTime="2025-08-22T04:19:09.5082873+00:00" endTime="2025-08-22T04:19:09.5082873+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b1cee97-2732-45a9-b29d-a85ddfacbc05" />
    <UnitTestResult executionId="ee029680-6661-423d-abe9-dbd5ce22d09d" testId="651bb81c-b2c1-0179-60d9-76ea480286e6" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadUInt32_ShouldReadCorrectValues" computerName="r3e" duration="00:00:00.0003386" startTime="2025-08-22T04:19:09.9126890+00:00" endTime="2025-08-22T04:19:09.9126890+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee029680-6661-423d-abe9-dbd5ce22d09d" />
    <UnitTestResult executionId="03cfa3c6-f2bc-4bb1-aea7-c1cea655363d" testId="a705c5d0-b329-898a-1d9c-c7cf3ccf19ed" testName="NeoSharp.Tests.Types.Hash256Tests.FromLittleEndianBytes_ShouldCreateHashCorrectly" computerName="r3e" duration="00:00:00.0002020" startTime="2025-08-22T04:19:09.5128632+00:00" endTime="2025-08-22T04:19:09.5128633+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03cfa3c6-f2bc-4bb1-aea7-c1cea655363d" />
    <UnitTestResult executionId="d7b07132-a977-474c-adb5-1d402c922e3f" testId="8f7f6552-5520-b454-97d1-e1ac4c03bd80" testName="NeoSharp.Tests.Types.EnumTypeTests.OpCode_ShouldHaveCorrectByteValues" computerName="r3e" duration="00:00:00.0002455" startTime="2025-08-22T04:19:09.5037414+00:00" endTime="2025-08-22T04:19:09.5037414+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7b07132-a977-474c-adb5-1d402c922e3f" />
    <UnitTestResult executionId="4c504923-7b1b-4921-8064-b27934d1aa6c" testId="8e1af9cb-da89-d0ea-4636-a773d5d75701" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;cost\&quot;:7,\&quot;blockSize\&quot;:8,\&quot;p\&quot;:9}&quot;)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4977731+00:00" endTime="2025-08-22T04:19:09.4977732+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4c504923-7b1b-4921-8064-b27934d1aa6c">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7880191-7f32-4117-8bd9-9c2128a64f61" testId="76598d68-aeac-8776-2f3e-2dda3a9a5fce" testName="NeoSharp.Tests.Wallet.AccountTests.IsDefault_ShouldReflectWalletState" computerName="r3e" duration="00:00:00.0029783" startTime="2025-08-22T04:19:09.5904737+00:00" endTime="2025-08-22T04:19:09.5904737+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7880191-7f32-4117-8bd9-9c2128a64f61" />
    <UnitTestResult executionId="e1855bee-2a19-4699-879a-16f9a5d7a7bc" testId="c945ab89-80df-493f-f507-df688cdfc95f" testName="NeoSharp.Tests.Types.Hash160Tests.Constructor_WithValidBytes_ShouldCreateHash" computerName="r3e" duration="00:00:00.0037444" startTime="2025-08-22T04:19:09.5129579+00:00" endTime="2025-08-22T04:19:09.5129579+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e1855bee-2a19-4699-879a-16f9a5d7a7bc" />
    <UnitTestResult executionId="b0c87f73-28d9-464e-9bb0-72c6c7d375fb" testId="4f32cb3d-de52-e96e-9283-a46161e53f2c" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;VeryLongPasswordWithSpecialCharacters!@#$%^&amp;*()_+-&quot;···)" computerName="r3e" duration="00:00:03.8015825" startTime="2025-08-22T04:19:26.2964995+00:00" endTime="2025-08-22T04:19:26.2964998+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b0c87f73-28d9-464e-9bb0-72c6c7d375fb">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 147
   at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8e5bef4c-5f6e-420d-8718-d2d6f2c724b4" testId="f86c1082-ed35-a19a-aa0b-8740241d8a93" testName="NeoSharp.Tests.Crypto.SignTests.TestKeyFromSignedMessageWithInvalidSignature" computerName="r3e" duration="00:00:00.0004659" startTime="2025-08-22T04:19:09.5908711+00:00" endTime="2025-08-22T04:19:09.5908711+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e5bef4c-5f6e-420d-8718-d2d6f2c724b4">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : R component must be exactly 32 bytes (Parameter 'r')</Message>
          <StackTrace>   at NeoSharp.Crypto.SignatureData..ctor(Byte v, Byte[] r, Byte[] s) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/SignatureData.cs:line 50
   at NeoSharp.Tests.Crypto.SignTests.TestKeyFromSignedMessageWithInvalidSignature() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 138
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="73dd55b3-92a6-4d34-ac82-d6e4f9158f84" testId="955eafc5-5014-d0fd-ce5e-e921d4a1d72f" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;1111111111&quot;, expectedHex: &quot;00000000000000000000&quot;)" computerName="r3e" duration="00:00:00.0000034" startTime="2025-08-22T04:19:09.5160635+00:00" endTime="2025-08-22T04:19:09.5160635+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="73dd55b3-92a6-4d34-ac82-d6e4f9158f84" />
    <UnitTestResult executionId="80b5ae13-2135-42e2-bba1-9c64cbdfebe6" testId="8b02887a-436a-84b1-9469-502e894249de" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;&quot;)" computerName="r3e" duration="00:00:00.0003242" startTime="2025-08-22T04:19:22.4944427+00:00" endTime="2025-08-22T04:19:22.4944428+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80b5ae13-2135-42e2-bba1-9c64cbdfebe6">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : Password cannot be empty (Parameter 'password')</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Encrypt(Byte[] privateKey, String password, ScryptParams scryptParams, String address) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 52
   at NeoSharp.Wallet.NEP2.Encrypt(ECKeyPair keyPair, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 35
   at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 146
   at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a64ffba-c5a5-400f-b26f-74fd7763d478" testId="f923296d-aa35-93a8-537c-cce656a0fadd" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;SGVsbG8gV29ybGQ=&quot;, originalText: &quot;Hello World&quot;)" computerName="r3e" duration="00:00:00.0001573" startTime="2025-08-22T04:19:09.5097297+00:00" endTime="2025-08-22T04:19:09.5097298+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a64ffba-c5a5-400f-b26f-74fd7763d478" />
    <UnitTestResult executionId="72b4b45b-c9b3-4f7e-916c-69c7f92d49cb" testId="d0e8e19c-dad1-887d-7e8d-e9f96daabfbb" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors1" computerName="r3e" duration="00:00:00.0031660" startTime="2025-08-22T04:19:09.5081673+00:00" endTime="2025-08-22T04:19:09.5081674+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72b4b45b-c9b3-4f7e-916c-69c7f92d49cb" />
    <UnitTestResult executionId="3be463b9-1692-407a-921b-c7a4358f5ea9" testId="58ff235e-a3c2-8d16-8f18-a5f78f51d8db" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsIncompleteJson" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4974263+00:00" endTime="2025-08-22T04:19:09.4974265+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3be463b9-1692-407a-921b-c7a4358f5ea9">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0ac767b1-baac-4ead-8d7c-d4c8c11a1c39" testId="f10fde39-91da-cdc8-1ac1-947772a818bb" testName="NeoSharp.Tests.Types.Hash256Tests.Deserialize_ShouldCreateHashFromLittleEndianBytes" computerName="r3e" duration="00:00:00.0005606" startTime="2025-08-22T04:19:09.5084204+00:00" endTime="2025-08-22T04:19:09.5084204+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ac767b1-baac-4ead-8d7c-d4c8c11a1c39" />
    <UnitTestResult executionId="578b84cc-b24b-4f23-8435-74cbaac924eb" testId="b2140eb5-1158-292e-b391-05603b283241" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Hash160, expectedJson: &quot;Hash160&quot;, expectedByte: 20)" computerName="r3e" duration="00:00:00.0000031" startTime="2025-08-22T04:19:09.5024913+00:00" endTime="2025-08-22T04:19:09.5024914+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="578b84cc-b24b-4f23-8435-74cbaac924eb" />
    <UnitTestResult executionId="8a11b585-f5ef-4877-84cb-721c2ffb0972" testId="7750cff9-d7c1-7a64-5bf0-bd8412d9d66c" testName="NeoSharp.Tests.Types.ContractParameterTests.MapToContractParameter_ShouldHandleVariousTypes" computerName="r3e" duration="00:00:00.0005315" startTime="2025-08-22T04:19:09.5095731+00:00" endTime="2025-08-22T04:19:09.5095732+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8a11b585-f5ef-4877-84cb-721c2ffb0972" />
    <UnitTestResult executionId="99d0a36d-7037-4149-98a7-1e25ce0526b5" testId="d7400e8a-7d55-2939-6e26-46d7d776b09b" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleSpecialValues" computerName="r3e" duration="00:00:00.0004888" startTime="2025-08-22T04:19:09.5139576+00:00" endTime="2025-08-22T04:19:09.5139576+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99d0a36d-7037-4149-98a7-1e25ce0526b5" />
    <UnitTestResult executionId="00771025-e53a-4329-87d9-46f55f8f0284" testId="51f5edf3-4cf1-eb27-23e0-a2855310af0f" testName="NeoSharp.Tests.Crypto.WIFTests.UncompressedWif_ShouldDecodeCorrectly" computerName="r3e" duration="00:00:00.0125018" startTime="2025-08-22T04:19:09.5017381+00:00" endTime="2025-08-22T04:19:09.5017382+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00771025-e53a-4329-87d9-46f55f8f0284">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Crypto.WIFException : Invalid WIF format: Invalid compressed flag. Expected 0x01, got 0x00</Message>
          <StackTrace>   at NeoSharp.Crypto.WIF.Decode(String wifString) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/WIF.cs:line 108
   at NeoSharp.Tests.Crypto.WIFTests.UncompressedWif_ShouldDecodeCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/WIFTests.cs:line 176
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b1c273e-5fa2-460e-97aa-2a537bd5afc1" testId="2343f28d-b6f1-ea40-62f5-69bed78cd97b" testName="NeoSharp.Tests.Crypto.SignTests.TestSignatureWithWrongKey" computerName="r3e" duration="00:00:00.0007922" startTime="2025-08-22T04:19:09.5493421+00:00" endTime="2025-08-22T04:19:09.5493424+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b1c273e-5fa2-460e-97aa-2a537bd5afc1">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignatureWithWrongKey() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 292
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5029a5a5-4bc9-4051-a573-7e237a2af36e" testId="08f8f522-e527-951e-fd77-3ff317c0ac27" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_ByteArray_ShouldSerializeAsBase64" computerName="r3e" duration="00:00:00.0002744" startTime="2025-08-22T04:19:09.5035949+00:00" endTime="2025-08-22T04:19:09.5035949+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5029a5a5-4bc9-4051-a573-7e237a2af36e" />
    <UnitTestResult executionId="bcb56b75-e8d2-4616-91f3-869110820e9f" testId="56fd0b33-b60a-b29a-95b2-a281082a22a7" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestMasterKeyGeneration(seedHex: &quot;000102030405060708090a0b0c0d0e0f&quot;, path: [])" computerName="r3e" duration="00:00:00.0005127" startTime="2025-08-22T04:19:09.5037029+00:00" endTime="2025-08-22T04:19:09.5037029+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bcb56b75-e8d2-4616-91f3-869110820e9f" />
    <UnitTestResult executionId="e92e9e63-49af-4373-a2f7-7eb995bfda56" testId="a62b168f-b9b1-d2df-3ac2-1df7f1c9725e" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteBoolean_ShouldWriteBooleaneanAsBytes" computerName="r3e" duration="00:00:00.0018464" startTime="2025-08-22T04:19:09.5863132+00:00" endTime="2025-08-22T04:19:09.5863132+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e92e9e63-49af-4373-a2f7-7eb995bfda56" />
    <UnitTestResult executionId="93e743c1-70b9-4b2c-84f3-1a7cc907b7c4" testId="84f4aa5b-2dbf-da24-8c49-9944ee9416f3" testName="NeoSharp.Tests.Types.Hash160Tests.Zero_ShouldReturnZeroHash" computerName="r3e" duration="00:00:00.0006195" startTime="2025-08-22T04:19:09.5138608+00:00" endTime="2025-08-22T04:19:09.5138608+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="93e743c1-70b9-4b2c-84f3-1a7cc907b7c4" />
    <UnitTestResult executionId="5c2f2db6-7470-4146-98b8-2f043a3c4e82" testId="dc4a098b-795d-74bb-d48d-bb930ac51271" testName="NeoSharp.Tests.Types.Hash160Tests.Parse_WithKnownContractHashes_ShouldSucceed(contractHash: &quot;0xd2a4cff31913016155e38e474a2c06d08be276cf&quot;)" computerName="r3e" duration="00:00:00.0001785" startTime="2025-08-22T04:19:09.5122484+00:00" endTime="2025-08-22T04:19:09.5122485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5c2f2db6-7470-4146-98b8-2f043a3c4e82" />
    <UnitTestResult executionId="0db9580b-522a-4fcd-ba1f-631113ca7916" testId="3a16c4e1-d197-ae08-4046-bd7faac128bf" testName="NeoSharp.Tests.Crypto.SecurityTests.TestSecureMemoryZeroing" computerName="r3e" duration="00:00:00.0021718" startTime="2025-08-22T04:19:14.1087671+00:00" endTime="2025-08-22T04:19:14.1087673+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0db9580b-522a-4fcd-ba1f-631113ca7916" />
    <UnitTestResult executionId="05dae50f-c2b0-43f6-8e97-1b7e303beca8" testId="b4da6257-ddc3-4454-c78a-2162fb472e15" testName="NeoSharp.Tests.Types.ContractParameterTests.Integer_WithInt_ShouldCreateIntegerParameter" computerName="r3e" duration="00:00:00.0001867" startTime="2025-08-22T04:19:09.5031784+00:00" endTime="2025-08-22T04:19:09.5031784+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05dae50f-c2b0-43f6-8e97-1b7e303beca8" />
    <UnitTestResult executionId="895f1284-9b12-46d4-a44f-980cb17bd542" testId="6861b503-9934-6890-ab3d-e56aa077c1aa" testName="NeoSharp.Tests.Crypto.SignTests.TestRecoverSigningScriptHash" computerName="r3e" duration="00:00:00.0004948" startTime="2025-08-22T04:19:09.5545167+00:00" endTime="2025-08-22T04:19:09.5545168+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="895f1284-9b12-46d4-a44f-980cb17bd542">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Crypto.SignException : Failed to recover public key from signature</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignedMessageToKey(Byte[] message, SignatureData signatureData) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 201
   at NeoSharp.Crypto.Sign.RecoverSigningScriptHash(Byte[] message, SignatureData signatureData) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 246
   at NeoSharp.Tests.Crypto.SignTests.TestRecoverSigningScriptHash() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 90
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="04f7bc96-bb2d-4279-9170-2fc2e181a1d6" testId="aed8925a-767a-6626-c9d6-3af8273ee6b3" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly" computerName="r3e" duration="00:00:00.0023833" startTime="2025-08-22T04:19:09.5226530+00:00" endTime="2025-08-22T04:19:09.5226532+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="04f7bc96-bb2d-4279-9170-2fc2e181a1d6">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : Public key must be 33 bytes (compressed) (Parameter 'encodedBytes')</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPublicKey..ctor(Byte[] encodedBytes) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPublicKey.cs:line 27
   at NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs:line 38
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45e3155c-ed81-4da9-be61-609e55af64bd" testId="1289e3dd-43be-584e-b51e-23570abe3f5d" testName="NeoSharp.Tests.Types.Hash160Tests.ToAddress_ShouldReturnCorrectAddress" computerName="r3e" duration="00:00:00.0007724" startTime="2025-08-22T04:19:09.5142964+00:00" endTime="2025-08-22T04:19:09.5142965+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45e3155c-ed81-4da9-be61-609e55af64bd" />
    <UnitTestResult executionId="b46aa6ac-65d5-46e4-bd33-6c2b16cd03dc" testId="00306738-6d37-3b3f-c2d6-1d2023d106ea" testName="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithNullParameters_ShouldWork" computerName="r3e" duration="00:00:00.0015460" startTime="2025-08-22T04:19:09.6489636+00:00" endTime="2025-08-22T04:19:09.6489636+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b46aa6ac-65d5-46e4-bd33-6c2b16cd03dc" />
    <UnitTestResult executionId="973c7bae-ccfd-4f37-80b3-b2c8893e7d37" testId="47faf41c-250f-3921-1a8f-8cb28a6d80ff" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestRoundTripEncryptionDecryption" computerName="r3e" duration="00:00:06.5799611" startTime="2025-08-22T04:19:45.2508315+00:00" endTime="2025-08-22T04:19:45.2508317+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="973c7bae-ccfd-4f37-80b3-b2c8893e7d37">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestRoundTripEncryptionDecryption() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 89
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a631ef01-3894-4afb-9845-b0aa44661fbc" testId="132ccf43-7ae7-adb9-92a9-df519faee0a1" testName="NeoSharp.Tests.Crypto.SecurityTests.TestTimingAttackResistance" computerName="r3e" duration="00:00:00.0085327" startTime="2025-08-22T04:19:14.1268511+00:00" endTime="2025-08-22T04:19:14.1268513+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a631ef01-3894-4afb-9845-b0aa44661fbc">
      <Output>
        <ErrorInfo>
          <Message>Expected Math.Abs(wrongTime1 - avgTime) to be less than 0.2944833333333333, but found 0.3913333333333333 (difference of 0.09684999999999999).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThan(T expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestTimingAttackResistance() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 319
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bd31c3e-8475-495a-9310-36edf662cd1f" testId="55512dc9-1dfa-597d-3130-060b23c90329" testName="NeoSharp.Tests.Types.Hash160Tests.Equals_WithSameHash_ShouldReturnTrue" computerName="r3e" duration="00:00:00.0002961" startTime="2025-08-22T04:19:09.5127114+00:00" endTime="2025-08-22T04:19:09.5127114+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bd31c3e-8475-495a-9310-36edf662cd1f" />
    <UnitTestResult executionId="ab412332-1c0f-4bae-a270-70f514dfd330" testId="7d8319eb-03fb-08d3-0f3a-a74ec239d2fe" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsMemoryUsageCalculation" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4986487+00:00" endTime="2025-08-22T04:19:09.4986488+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab412332-1c0f-4bae-a270-70f514dfd330">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b55b6698-a1ad-4c61-a8c7-e6730aca24f1" testId="39b5d22d-0067-e3ff-d99c-706c8284a251" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Map, expectedJson: &quot;Map&quot;, expectedByte: 34)" computerName="r3e" duration="00:00:00.0000025" startTime="2025-08-22T04:19:09.5029498+00:00" endTime="2025-08-22T04:19:09.5029499+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b55b6698-a1ad-4c61-a8c7-e6730aca24f1" />
    <UnitTestResult executionId="bb2cf451-4db8-4bbf-8092-dd82b80f05cc" testId="abbaed55-681d-78da-3d42-03ca0b46a976" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataString_ShouldReadStringsCorrectly" computerName="r3e" duration="00:00:00.0008395" startTime="2025-08-22T04:19:09.9174323+00:00" endTime="2025-08-22T04:19:09.9174324+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bb2cf451-4db8-4bbf-8092-dd82b80f05cc" />
    <UnitTestResult executionId="714454cc-9629-4beb-93a5-58b70a8b40f4" testId="33843bfb-59e0-4d8b-1700-315e81e57341" testName="NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey" computerName="r3e" duration="00:00:00.0002464" startTime="2025-08-22T04:19:09.6052893+00:00" endTime="2025-08-22T04:19:09.6052894+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="714454cc-9629-4beb-93a5-58b70a8b40f4">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 174
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="42f5d502-8fde-4ea8-bb1e-50a1d80de71a" testId="54257088-ee8c-40f1-c5ba-2f061684eb74" testName="NeoSharp.Tests.Crypto.SecurityTests.TestCryptographicRandomness" computerName="r3e" duration="00:00:00.0003861" startTime="2025-08-22T04:19:14.1103338+00:00" endTime="2025-08-22T04:19:14.1103338+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="42f5d502-8fde-4ea8-bb1e-50a1d80de71a" />
    <UnitTestResult executionId="6a192ba0-31a4-4019-b4c1-84989ebc5515" testId="400f22d6-d2e2-8408-a698-81e6d43f3f42" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;636363&quot;, expectedBase58: &quot;aPEr&quot;)" computerName="r3e" duration="00:00:00.0000045" startTime="2025-08-22T04:19:09.5166365+00:00" endTime="2025-08-22T04:19:09.5166366+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a192ba0-31a4-4019-b4c1-84989ebc5515" />
    <UnitTestResult executionId="706b8bac-8ed1-4379-b3b1-f37d422803f2" testId="5521532a-c03d-ff38-db82-2d0010d35d74" testName="NeoSharp.Tests.Crypto.WIFTests.WronglySizedWifs_ShouldThrowException(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWML&quot;)" computerName="r3e" duration="00:00:00.0004556" startTime="2025-08-22T04:19:09.5144785+00:00" endTime="2025-08-22T04:19:09.5144785+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="706b8bac-8ed1-4379-b3b1-f37d422803f2" />
    <UnitTestResult executionId="05cb2fc0-ffe4-47e7-adaa-c17b5a669aa5" testId="e39a4c61-b8fe-475f-ae8e-0405980a31e1" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.Dispose_ShouldNotThrowException" computerName="r3e" duration="00:00:00.0003476" startTime="2025-08-22T04:19:09.5860240+00:00" endTime="2025-08-22T04:19:09.5860240+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="05cb2fc0-ffe4-47e7-adaa-c17b5a669aa5" />
    <UnitTestResult executionId="755b9361-7ad8-4238-add5-cee0f65bc4b5" testId="86e2e90a-39da-e6e6-9a93-bb33e054653a" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 256, r: 1, p: 1)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4885672+00:00" endTime="2025-08-22T04:19:09.4885672+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="755b9361-7ad8-4238-add5-cee0f65bc4b5">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14a41134-a247-4b50-94a1-99d1b56ba265" testId="61724534-4112-de3a-86e6-9c884b4d524d" testName="NeoSharp.Tests.Wallet.AccountTests.Constructor_WithNullKeyPair_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0004390" startTime="2025-08-22T04:19:09.5967857+00:00" endTime="2025-08-22T04:19:09.5967857+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14a41134-a247-4b50-94a1-99d1b56ba265" />
    <UnitTestResult executionId="47b7f270-408c-4fc5-97ad-480b47884120" testId="66248bda-3701-ca80-1735-652ce46c5d20" testName="NeoSharp.Tests.Types.Hash160Tests.Parse_WithValidHexString_ShouldCreateHash" computerName="r3e" duration="00:00:00.0002164" startTime="2025-08-22T04:19:09.5133034+00:00" endTime="2025-08-22T04:19:09.5133035+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="47b7f270-408c-4fc5-97ad-480b47884120" />
    <UnitTestResult executionId="c1b0c861-4877-4f89-ac7c-cad143fa8ed4" testId="c2bfde30-e914-458b-e340-ab93132a81d3" testName="NeoSharp.Tests.Types.ContractParameterTests.Integer_WithBigInteger_ShouldCreateIntegerParameter" computerName="r3e" duration="00:00:00.0012801" startTime="2025-08-22T04:19:09.5091116+00:00" endTime="2025-08-22T04:19:09.5091116+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1b0c861-4877-4f89-ac7c-cad143fa8ed4" />
    <UnitTestResult executionId="30794ed2-77dc-4e9e-adad-a6ca16b630e5" testId="f8d47d8d-7ddf-b062-b8b7-9793b946bf9b" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadInt64_ShouldReadCorrectValues" computerName="r3e" duration="00:00:00.0004965" startTime="2025-08-22T04:19:09.9148352+00:00" endTime="2025-08-22T04:19:09.9148353+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="30794ed2-77dc-4e9e-adad-a6ca16b630e5" />
    <UnitTestResult executionId="1a5bba21-1b8c-4c6e-98c2-21d3ed55489e" testId="29456248-06fd-18a6-b06f-ad49591a0ced" testName="NeoSharp.Tests.Contract.SmartContractTests.Equals_ShouldCompareByScriptHash" computerName="r3e" duration="00:00:00.0019931" startTime="2025-08-22T04:19:09.6211187+00:00" endTime="2025-08-22T04:19:09.6211188+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a5bba21-1b8c-4c6e-98c2-21d3ed55489e" />
    <UnitTestResult executionId="edcfe387-061b-49cc-aad2-44678e821a9f" testId="9ef9cf35-6a67-9598-3685-c5eb1b930644" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestMultipleEncryptionsProduceDifferentResults" computerName="r3e" duration="00:00:07.7042396" startTime="2025-08-22T04:19:52.9591295+00:00" endTime="2025-08-22T04:19:52.9591296+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edcfe387-061b-49cc-aad2-44678e821a9f">
      <Output>
        <ErrorInfo>
          <Message>Expected encrypted1 not to be "QnVwghv7A5r1UrnrEfimzGdeWjpMeQEubkwJkW5rqaaAhKU2r1gR2LLi6t7".</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.StringAssertions`1.NotBe(String unexpected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestMultipleEncryptionsProduceDifferentResults() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 223
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1c75f0d0-dc1a-48ed-b1b7-ae3c914ed7f9" testId="f5c4f377-4e3e-b2d1-f112-051ef98aaff6" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;10c8511e&quot;, expectedBase58: &quot;Rt5zm&quot;)" computerName="r3e" duration="00:00:00.0000030" startTime="2025-08-22T04:19:09.5172283+00:00" endTime="2025-08-22T04:19:09.5172283+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1c75f0d0-dc1a-48ed-b1b7-ae3c914ed7f9" />
    <UnitTestResult executionId="904df2ee-779e-4ed0-a073-1e6a0aa0eafb" testId="693f5a41-e6ea-2fe8-b639-69d705d0deef" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestPathValidation" computerName="r3e" duration="00:00:00.0144132" startTime="2025-08-22T04:19:09.5019007+00:00" endTime="2025-08-22T04:19:09.5019008+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="904df2ee-779e-4ed0-a073-1e6a0aa0eafb" />
    <UnitTestResult executionId="16d151d5-4e2d-4f95-95aa-cf2db3feb044" testId="00a25fdc-9b88-3fce-f0ad-b7913fb21618" testName="NeoSharp.Tests.Crypto.SecurityTests.TestSignatureVerification" computerName="r3e" duration="00:00:00.0027872" startTime="2025-08-22T04:19:14.1176316+00:00" endTime="2025-08-22T04:19:14.1176318+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="16d151d5-4e2d-4f95-95aa-cf2db3feb044">
      <Output>
        <ErrorInfo>
          <Message>Expected isValid to be true, but found False.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestSignatureVerification() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 265
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="925526ef-27f6-4669-b2a0-4e97d1822c7b" testId="5e8ea83d-a317-e7a9-7c7b-042795e1eff1" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;73696d706c792061206c6f6e6720737472696e67&quot;, expectedBase58: &quot;2cFupjhnEsSn59qHXstmK2ffpLv2&quot;)" computerName="r3e" duration="00:00:00.0000954" startTime="2025-08-22T04:19:09.5162223+00:00" endTime="2025-08-22T04:19:09.5162223+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="925526ef-27f6-4669-b2a0-4e97d1822c7b" />
    <UnitTestResult executionId="ab94b64b-56ed-46b1-b2a2-dfecc4f36d9e" testId="8e8c20ef-c921-4caa-8e32-3f8b87a136b8" testName="NeoSharp.Tests.Crypto.SecurityTests.TestPrivateKeyNotInMemoryAfterClear" computerName="r3e" duration="00:00:00.0001458" startTime="2025-08-22T04:19:14.1411354+00:00" endTime="2025-08-22T04:19:14.1411355+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ab94b64b-56ed-46b1-b2a2-dfecc4f36d9e" />
    <UnitTestResult executionId="87d1b861-f819-4830-87d2-a6ace60626de" testId="2d2a9605-3a0d-6e02-270f-fff5f7a24d69" testName="NeoSharp.Tests.Types.Hash256Tests.Zero_ShouldReturnZeroHash" computerName="r3e" duration="00:00:00.0030754" startTime="2025-08-22T04:19:09.5089250+00:00" endTime="2025-08-22T04:19:09.5089251+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87d1b861-f819-4830-87d2-a6ace60626de" />
    <UnitTestResult executionId="3d57fa6e-4b36-4346-984c-438c40134d78" testId="2a8abbfe-1496-ae71-1450-b38c0db53bfc" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;TmVv&quot;, originalText: &quot;Neo&quot;)" computerName="r3e" duration="00:00:00.0002943" startTime="2025-08-22T04:19:09.5096896+00:00" endTime="2025-08-22T04:19:09.5096896+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d57fa6e-4b36-4346-984c-438c40134d78" />
    <UnitTestResult executionId="dc51b2c7-38b5-41b2-8f4f-ee66570a7844" testId="5b2a61b5-a877-35e2-ce62-96593f9e2cb3" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Hash256, expectedJson: &quot;Hash256&quot;, expectedByte: 21)" computerName="r3e" duration="00:00:00.0000026" startTime="2025-08-22T04:19:09.5025992+00:00" endTime="2025-08-22T04:19:09.5025992+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc51b2c7-38b5-41b2-8f4f-ee66570a7844" />
    <UnitTestResult executionId="2e401c65-54dc-4ee3-a917-c4db5c5a976f" testId="caf3251d-1749-3055-5c33-0c4dbf193eaf" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: PublicKey, expectedJson: &quot;PublicKey&quot;, expectedByte: 22)" computerName="r3e" duration="00:00:00.0000027" startTime="2025-08-22T04:19:09.5024192+00:00" endTime="2025-08-22T04:19:09.5024193+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e401c65-54dc-4ee3-a917-c4db5c5a976f" />
    <UnitTestResult executionId="97f0fd0f-7816-4dbc-9ed0-60110779599a" testId="ed290d48-5b09-a0ef-0064-b242dcf2f952" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingForValidStrings" computerName="r3e" duration="00:00:00.0001957" startTime="2025-08-22T04:19:09.5250779+00:00" endTime="2025-08-22T04:19:09.5250779+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="97f0fd0f-7816-4dbc-9ed0-60110779599a" />
    <UnitTestResult executionId="41dac500-6ccd-40b7-8dcd-4d8985109e3b" testId="7e022a46-3a6a-f120-12f8-5e2c3f2247c2" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0020889" startTime="2025-08-22T04:19:09.5032341+00:00" endTime="2025-08-22T04:19:09.5032342+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="41dac500-6ccd-40b7-8dcd-4d8985109e3b" />
    <UnitTestResult executionId="4b9a4752-efab-45e5-b5eb-a1484eb7b481" testId="e1772adc-4111-9752-4572-923cbd634c5b" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0704227" startTime="2025-08-22T04:19:09.5784432+00:00" endTime="2025-08-22T04:19:09.5784432+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b9a4752-efab-45e5-b5eb-a1484eb7b481">
      <Output>
        <ErrorInfo>
          <Message>Expected actual to be a collection with 1 item(s), but {0xFF, 0x00}
contains 1 item(s) more than
{0xFF}.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Include all non-private properties
- Include all non-private fields
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryWriterTests.TestAndReset(Byte[] expected) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs:line 266
   at NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs:line 252
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d6424393-21b4-4abf-a788-465528fdec45" testId="02b756d5-cbae-c1fe-81a7-b40c49aaf7bf" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithDefaultScryptParams" computerName="r3e" duration="00:00:00.0002619" startTime="2025-08-22T04:19:38.6701732+00:00" endTime="2025-08-22T04:19:38.6701733+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d6424393-21b4-4abf-a788-465528fdec45">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 273
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithDefaultScryptParams() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 22
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="887116ff-d989-4551-ae0f-4e5990951073" testId="46dc94f7-ad9d-a3be-24f6-15ca29f318c8" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Boolean_ShouldSerializeCorrectly" computerName="r3e" duration="00:00:00.0001383" startTime="2025-08-22T04:19:09.5091602+00:00" endTime="2025-08-22T04:19:09.5091602+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="887116ff-d989-4551-ae0f-4e5990951073" />
    <UnitTestResult executionId="d7582ae2-6653-4e0a-ab54-28aa5417f37d" testId="7152b94d-2d9b-e310-2aa2-69d02bf45611" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsPerformanceRelativeTime" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4880806+00:00" endTime="2025-08-22T04:19:09.4880807+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7582ae2-6653-4e0a-ab54-28aa5417f37d">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3099386a-a895-402e-b82a-a890470dfcd8" testId="c53f1642-5605-a1e9-4f79-ff719abd0c63" testName="NeoSharp.Tests.Wallet.AccountTests.Label_ShouldBeSettable" computerName="r3e" duration="00:00:00.0038965" startTime="2025-08-22T04:19:09.5907290+00:00" endTime="2025-08-22T04:19:09.5907291+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3099386a-a895-402e-b82a-a890470dfcd8" />
    <UnitTestResult executionId="c2e0ff23-62a1-4330-9512-25be86a49b47" testId="beaeae1a-5663-5159-f554-4cb8ce24af1b" testName="NeoSharp.Tests.Crypto.WIFTests.RoundTrip_ShouldPreservePrivateKey" computerName="r3e" duration="00:00:00.0005088" startTime="2025-08-22T04:19:09.5154558+00:00" endTime="2025-08-22T04:19:09.5154558+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2e0ff23-62a1-4330-9512-25be86a49b47" />
    <UnitTestResult executionId="1563ea4d-902d-4fb6-a37a-2d9b9650bdfe" testId="b2a5cf74-d54b-a40a-2fad-3f7112c31afc" testName="NeoSharp.Tests.Contract.SmartContractTests.SmartContract_WithNullNeoSharp_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0033976" startTime="2025-08-22T04:19:09.6315440+00:00" endTime="2025-08-22T04:19:09.6315441+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1563ea4d-902d-4fb6-a37a-2d9b9650bdfe" />
    <UnitTestResult executionId="74e58aa6-d98b-410d-9c5c-c15759b58f2a" testId="f0cdfe8d-ed22-e606-4448-12aa4bd1069a" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_WithEmptyInput_ShouldReturnEmptyString" computerName="r3e" duration="00:00:00.0001245" startTime="2025-08-22T04:19:09.5102185+00:00" endTime="2025-08-22T04:19:09.5102187+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74e58aa6-d98b-410d-9c5c-c15759b58f2a" />
    <UnitTestResult executionId="b9cea254-4e47-4752-a5bf-ab87d2f682b4" testId="1fd2d563-2db0-b811-6dea-5bf5b95f5c6c" testName="NeoSharp.Tests.Types.ContractParameterTests.ByteArray_WithBytes_ShouldCreateByteArrayParameter" computerName="r3e" duration="00:00:00.0080690" startTime="2025-08-22T04:19:09.5090133+00:00" endTime="2025-08-22T04:19:09.5090133+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b9cea254-4e47-4752-a5bf-ab87d2f682b4" />
    <UnitTestResult executionId="edbf44c0-553e-4b62-b474-9cffe5442f68" testId="d386e6a8-91ed-763e-b3a1-4b62ffed5cf3" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecodingWithInvalidCharacters" computerName="r3e" duration="00:00:00.0001451" startTime="2025-08-22T04:19:09.5195459+00:00" endTime="2025-08-22T04:19:09.5195461+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="edbf44c0-553e-4b62-b474-9cffe5442f68" />
    <UnitTestResult executionId="b921b94d-3ced-40ae-9b4f-098e747fab52" testId="04c472f2-f8b9-2afb-de0f-fb57b66e6f05" testName="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;This is a longer message that tests the signing al&quot;···)" computerName="r3e" duration="00:00:00.0006960" startTime="2025-08-22T04:19:09.5441544+00:00" endTime="2025-08-22T04:19:09.5441545+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b921b94d-3ced-40ae-9b4f-098e747fab52">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 255
   at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1cfe091c-31d8-4ee2-a048-a09eeb9618a0" testId="3458ea21-a5c4-8720-c598-ec4aa2be7d08" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecodingWithInvalidChecksum" computerName="r3e" duration="00:00:00.0003570" startTime="2025-08-22T04:19:09.5248547+00:00" endTime="2025-08-22T04:19:09.5248548+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1cfe091c-31d8-4ee2-a048-a09eeb9618a0" />
    <UnitTestResult executionId="fbb3ab8a-dc14-4fbf-b649-8898e7c0e8ba" testId="0097a575-f2af-f2ad-c169-d76c203c5e13" testName="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithNullPublicKeys_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0003322" startTime="2025-08-22T04:19:09.5982657+00:00" endTime="2025-08-22T04:19:09.5982658+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fbb3ab8a-dc14-4fbf-b649-8898e7c0e8ba" />
    <UnitTestResult executionId="9beabb00-1a5f-40b1-b045-9a896ac31dd3" testId="6e0886c3-c6d4-9316-913e-67c4a2ab715a" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.SerializePublicKey_ShouldReturnCorrectBytes" computerName="r3e" duration="00:00:00.0005060" startTime="2025-08-22T04:19:09.5228277+00:00" endTime="2025-08-22T04:19:09.5228278+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9beabb00-1a5f-40b1-b045-9a896ac31dd3" />
    <UnitTestResult executionId="5b911996-b14e-4ca5-8693-05b5644fb2af" testId="f29ca3ea-8044-4bff-f5a2-13a04fd029e4" testName="NeoSharp.Tests.Types.Hash160Tests.FromAddress_WithValidAddress_ShouldCreateHash" computerName="r3e" duration="00:00:00.0010181" startTime="2025-08-22T04:19:09.5147928+00:00" endTime="2025-08-22T04:19:09.5147928+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5b911996-b14e-4ca5-8693-05b5644fb2af" />
    <UnitTestResult executionId="7de6f2b2-232b-45f7-87d8-2923777626d2" testId="8d64e49c-54b6-a9d2-2909-1d5c6c0bbf6b" testName="NeoSharp.Tests.Types.Hash256Tests.FromData_ShouldCreateHashFromData" computerName="r3e" duration="00:00:00.0004786" startTime="2025-08-22T04:19:09.5133935+00:00" endTime="2025-08-22T04:19:09.5133935+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7de6f2b2-232b-45f7-87d8-2923777626d2" />
    <UnitTestResult executionId="24f81a47-82bb-44a3-b10a-beb67a34d463" testId="1152df18-e346-ddeb-56d2-4baba47f379b" testName="NeoSharp.Tests.Crypto.SecurityTests.TestSecureECKeyPair" computerName="r3e" duration="00:00:00.0026817" startTime="2025-08-22T04:19:14.1289817+00:00" endTime="2025-08-22T04:19:14.1289818+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24f81a47-82bb-44a3-b10a-beb67a34d463" />
    <UnitTestResult executionId="7032339b-8821-47a4-b14d-e774085d4621" testId="b151b523-5c65-459c-1a05-18b8bbbf66f9" testName="NeoSharp.Tests.Crypto.SignTests.TestInvalidSignatureVerification" computerName="r3e" duration="00:00:00.0038140" startTime="2025-08-22T04:19:09.5906877+00:00" endTime="2025-08-22T04:19:09.5906877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7032339b-8821-47a4-b14d-e774085d4621">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestInvalidSignatureVerification() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 274
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="efb923ef-ed02-44ca-833a-89cd6f79185a" testId="603a4190-4c31-e235-1dea-4448262c18fc" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_BinaryData_ShouldBeDetected" computerName="r3e" duration="00:00:00.0005823" startTime="2025-08-22T04:19:09.5030037+00:00" endTime="2025-08-22T04:19:09.5030037+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="efb923ef-ed02-44ca-833a-89cd6f79185a" />
    <UnitTestResult executionId="ac8d8d6b-91f9-4731-9565-1753e2b0289d" testId="a725406b-a2e9-2dd0-1f6b-0aa81740b95d" testName="NeoSharp.Tests.Crypto.WIFTests.InvalidPrivateKeyLength_ShouldThrowWIFException(length: 31)" computerName="r3e" duration="00:00:00.0133175" startTime="2025-08-22T04:19:09.5089742+00:00" endTime="2025-08-22T04:19:09.5089742+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac8d8d6b-91f9-4731-9565-1753e2b0289d" />
    <UnitTestResult executionId="c5d6ae29-3c7e-4d8a-b3fb-41c66c925c54" testId="3666327d-eeb2-8cf6-199c-a28cfc5678bf" testName="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestMasterKeyGeneration(seedHex: &quot;fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7&quot;···, path: [])" computerName="r3e" duration="00:00:00.0035341" startTime="2025-08-22T04:19:09.5031475+00:00" endTime="2025-08-22T04:19:09.5031475+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5d6ae29-3c7e-4d8a-b3fb-41c66c925c54" />
    <UnitTestResult executionId="298ef2ee-5940-47f2-9ebb-962a011d457b" testId="08b7c809-5c55-e168-d11e-cb58a1056788" testName="NeoSharp.Tests.Script.ScriptBuilderTests.BuildThrowScript_ShouldCreateThrowScript" computerName="r3e" duration="00:00:00.0001650" startTime="2025-08-22T04:19:09.5905026+00:00" endTime="2025-08-22T04:19:09.5905026+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="298ef2ee-5940-47f2-9ebb-962a011d457b" />
    <UnitTestResult executionId="1fefc696-f7dd-43b2-b3e5-0d4e21e7bb77" testId="b48c632d-b893-92fa-f886-b99be87992cb" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;aPEr&quot;, expectedHex: &quot;636363&quot;)" computerName="r3e" duration="00:00:00.0000032" startTime="2025-08-22T04:19:09.5161354+00:00" endTime="2025-08-22T04:19:09.5161354+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1fefc696-f7dd-43b2-b3e5-0d4e21e7bb77" />
    <UnitTestResult executionId="f1efe92e-35e1-4b3b-8d4e-c8ba87373aff" testId="180b2260-9f10-8804-ff19-b6ea3fa61d5c" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_WithInvalidInput_ShouldThrowException" computerName="r3e" duration="00:00:00.0002750" startTime="2025-08-22T04:19:09.5103719+00:00" endTime="2025-08-22T04:19:09.5103720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1efe92e-35e1-4b3b-8d4e-c8ba87373aff" />
    <UnitTestResult executionId="00f0e3ac-b742-4dc4-9fb4-f6ed5064867d" testId="709b4022-f285-904a-2c89-b604766b2030" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBigInteger_ShouldReadNumbersCorrectly" computerName="r3e" duration="00:00:00.0009824" startTime="2025-08-22T04:19:09.9146717+00:00" endTime="2025-08-22T04:19:09.9146720+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="00f0e3ac-b742-4dc4-9fb4-f6ed5064867d">
      <Output>
        <ErrorInfo>
          <Message>Expected result to be equal to 1, but found 0.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Numeric.ComparableTypeAssertions`2.Be(T expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataIntegerAndAssert(Byte[] input, BigInteger expected) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 282
   at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBigInteger_ShouldReadNumbersCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 81
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dc99bddb-555f-473c-bc30-6e983b8c8971" testId="89572e90-84de-bab5-9f95-9bc70fe162d5" testName="NeoSharp.Tests.Types.Hash256Tests.Constructor_WithValidBytes_ShouldCreateHash" computerName="r3e" duration="00:00:00.0001687" startTime="2025-08-22T04:19:09.5149078+00:00" endTime="2025-08-22T04:19:09.5149079+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dc99bddb-555f-473c-bc30-6e983b8c8971" />
    <UnitTestResult executionId="a892b8b5-7b51-4a05-8dd0-310f39c661f6" testId="46948e2c-121d-478f-8491-eb42ecb316c0" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairVerification_ShouldVerifyOwnSignature" computerName="r3e" duration="00:00:00.0120400" startTime="2025-08-22T04:19:09.6059344+00:00" endTime="2025-08-22T04:19:09.6059344+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a892b8b5-7b51-4a05-8dd0-310f39c661f6">
      <Output>
        <ErrorInfo>
          <Message>Expected isValid to be true, but found False.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
   at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairVerification_ShouldVerifyOwnSignature() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs:line 168
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9db37eab-d933-472f-be7a-bc934d737405" testId="cf9fb0fd-61f7-dc81-2870-e2efb0a27e99" testName="NeoSharp.Tests.Types.Hash160Tests.Size_ShouldReturn20" computerName="r3e" duration="00:00:00.0008058" startTime="2025-08-22T04:19:09.5123979+00:00" endTime="2025-08-22T04:19:09.5123980+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9db37eab-d933-472f-be7a-bc934d737405" />
    <UnitTestResult executionId="6513d2d8-68fc-487e-8e57-c588eec6f401" testId="ab896882-276a-8776-de00-376c160e386c" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;572e4794&quot;, expectedBase58: &quot;3EFU7m&quot;)" computerName="r3e" duration="00:00:00.0000036" startTime="2025-08-22T04:19:09.5167062+00:00" endTime="2025-08-22T04:19:09.5167062+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6513d2d8-68fc-487e-8e57-c588eec6f401" />
    <UnitTestResult executionId="ea6dd965-7e01-489e-b770-5a870e2b24ff" testId="6ec975b5-1579-df12-f95a-68143de38353" testName="NeoSharp.Tests.Wallet.AccountTests.Equals_ShouldCompareByScriptHash" computerName="r3e" duration="00:00:00.0002713" startTime="2025-08-22T04:19:09.5914248+00:00" endTime="2025-08-22T04:19:09.5914249+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea6dd965-7e01-489e-b770-5a870e2b24ff">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.Equals_ShouldCompareByScriptHash() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 341
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8d39d1e3-b086-4035-9b73-e66e81aa6ec2" testId="dd543aac-b9bf-de04-f5f2-6dbf4dce32d7" testName="NeoSharp.Tests.Crypto.SignTests.TestSignatureDataEquality" computerName="r3e" duration="00:00:00.0005718" startTime="2025-08-22T04:19:09.5480771+00:00" endTime="2025-08-22T04:19:09.5480772+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8d39d1e3-b086-4035-9b73-e66e81aa6ec2" />
    <UnitTestResult executionId="e0e72adf-f5e9-46f3-bb6a-a62455250b97" testId="2f9efc0b-2b51-e1f2-b995-c9e4d27be7ef" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestInvalidNEP2Format" computerName="r3e" duration="00:00:00.0012317" startTime="2025-08-22T04:19:56.7792860+00:00" endTime="2025-08-22T04:19:56.7792862+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e0e72adf-f5e9-46f3-bb6a-a62455250b97">
      <Output>
        <ErrorInfo>
          <Message>Expected a &lt;System.FormatException&gt; to be thrown, but found &lt;System.ArgumentException&gt;:
System.ArgumentException: NEP-2 key cannot be empty (Parameter 'nep2Key')
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 117
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.&lt;&gt;c__DisplayClass6_0.&lt;TestInvalidNEP2Format&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 128
   at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
   at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestInvalidNEP2Format() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 129
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11bbb30e-886f-4d1b-9a62-7a09b3e70109" testId="9a5a5259-43e7-a157-ba6e-2aaadbf51c75" testName="NeoSharp.Tests.Contract.SmartContractTests.ToString_ShouldReturnScriptHashString" computerName="r3e" duration="00:00:00.0040182" startTime="2025-08-22T04:19:09.6280510+00:00" endTime="2025-08-22T04:19:09.6280511+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11bbb30e-886f-4d1b-9a62-7a09b3e70109" />
    <UnitTestResult executionId="3f627a0b-8edb-4f44-9ea9-ffd1b8810fc9" testId="7567889c-89b1-6883-c5eb-0dc4a697c9a2" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.NullPrivateKey_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0006762" startTime="2025-08-22T04:19:09.5934460+00:00" endTime="2025-08-22T04:19:09.5934460+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f627a0b-8edb-4f44-9ea9-ffd1b8810fc9" />
    <UnitTestResult executionId="3a2f7d1c-0049-476b-abea-45b316a0659c" testId="a8d17546-f6ae-34d4-9e27-95bbfd5e1d33" testName="NeoSharp.Tests.Crypto.SignTests.TestSignDifferentMessages" computerName="r3e" duration="00:00:00.0028460" startTime="2025-08-22T04:19:09.5529082+00:00" endTime="2025-08-22T04:19:09.5529083+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3a2f7d1c-0049-476b-abea-45b316a0659c">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignDifferentMessages() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 200
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cbb4339b-bb28-41af-b017-69dfe833675a" testId="510613cb-21e1-a1c9-bb93-eed81a23f6dd" testName="NeoSharp.Tests.Crypto.WIFTests.InvalidChecksum_ShouldThrowException" computerName="r3e" duration="00:00:00.0008715" startTime="2025-08-22T04:19:09.5149695+00:00" endTime="2025-08-22T04:19:09.5149695+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cbb4339b-bb28-41af-b017-69dfe833675a" />
    <UnitTestResult executionId="245e7fa3-a856-4594-828b-ddc96db79c36" testId="a4ddc36c-736e-2706-b327-6b53ea1cc6d6" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarString_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0090090" startTime="2025-08-22T04:19:09.5947625+00:00" endTime="2025-08-22T04:19:09.5947625+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="245e7fa3-a856-4594-828b-ddc96db79c36" />
    <UnitTestResult executionId="82d3dd65-1ad7-4f86-98ff-ee052f121384" testId="4cd92221-df49-90c6-39a3-365e787a59a6" testName="NeoSharp.Tests.Types.Hash256Tests.ToLittleEndianArray_ShouldReverseBytes" computerName="r3e" duration="00:00:00.0004383" startTime="2025-08-22T04:19:09.5139103+00:00" endTime="2025-08-22T04:19:09.5139104+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82d3dd65-1ad7-4f86-98ff-ee052f121384" />
    <UnitTestResult executionId="b484a48f-cb28-4ae5-8a60-3c89aedc1473" testId="f8cbfdd2-aca9-9e27-c8fd-251f064fdfce" testName="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;\ud83d\ude80 Unicode message with emojis \ud83d\udd10&quot;)" computerName="r3e" duration="00:00:00.0011033" startTime="2025-08-22T04:19:09.5426529+00:00" endTime="2025-08-22T04:19:09.5426529+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b484a48f-cb28-4ae5-8a60-3c89aedc1473">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 255
   at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="701b97a9-f418-4d6d-a358-d21839b3e57e" testId="90cdd93f-96cb-b0e4-bdfb-41af2a417f44" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58RoundTrip" computerName="r3e" duration="00:00:00.0004913" startTime="2025-08-22T04:19:09.5258764+00:00" endTime="2025-08-22T04:19:09.5258765+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="701b97a9-f418-4d6d-a358-d21839b3e57e" />
    <UnitTestResult executionId="a8e62ca1-aa7c-4d9c-a0f9-14ce4d61142b" testId="e70b8920-102c-2c49-870e-b83b646da4cf" testName="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Array_ShouldSerializeCorrectly" computerName="r3e" duration="00:00:00.0028061" startTime="2025-08-22T04:19:09.5030471+00:00" endTime="2025-08-22T04:19:09.5030471+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8e62ca1-aa7c-4d9c-a0f9-14ce4d61142b" />
    <UnitTestResult executionId="74e0de80-b919-469d-ab2d-0a3d11c527ff" testId="763e5af7-a89f-7243-f04b-0e0023b5d5cf" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;EJDM8drfXA6uyA&quot;, expectedHex: &quot;ecac89cad93923c02321&quot;)" computerName="r3e" duration="00:00:00.0005109" startTime="2025-08-22T04:19:09.5155062+00:00" endTime="2025-08-22T04:19:09.5155063+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74e0de80-b919-469d-ab2d-0a3d11c527ff" />
    <UnitTestResult executionId="d7102a23-7a5d-4340-9f5d-223e8fb579a4" testId="5e97768f-d530-99d2-989a-4e0f3db77405" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteUInt16_ShouldWriteCorrectBytes" computerName="r3e" duration="00:00:00.0003020" startTime="2025-08-22T04:19:09.5830058+00:00" endTime="2025-08-22T04:19:09.5830059+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7102a23-7a5d-4340-9f5d-223e8fb579a4" />
    <UnitTestResult executionId="ffe05302-77e1-471c-9953-d1e1351b281e" testId="a0b69eef-402a-b362-a21b-b7c396dde08f" testName="NeoSharp.Tests.Crypto.SignTests.TestSignatureRecoveryIds" computerName="r3e" duration="00:00:00.0033733" startTime="2025-08-22T04:19:09.5474706+00:00" endTime="2025-08-22T04:19:09.5474707+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ffe05302-77e1-471c-9953-d1e1351b281e" />
    <UnitTestResult executionId="016163f7-6853-403f-ab1a-9e7d13437545" testId="5a4dae1a-21dc-18ed-ce1c-6af1ac37d58c" testName="NeoSharp.Tests.Types.Hash160Tests.Parse_WithKnownContractHashes_ShouldSucceed(contractHash: &quot;0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5&quot;)" computerName="r3e" duration="00:00:00.0001620" startTime="2025-08-22T04:19:09.5119009+00:00" endTime="2025-08-22T04:19:09.5119009+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="016163f7-6853-403f-ab1a-9e7d13437545" />
    <UnitTestResult executionId="5e6efb66-822f-4c8f-bf53-aa040541807d" testId="bd7495bc-9b5e-cec7-dd03-e6762280b2fa" testName="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_ForString_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0000932" startTime="2025-08-22T04:19:09.5103253+00:00" endTime="2025-08-22T04:19:09.5103254+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e6efb66-822f-4c8f-bf53-aa040541807d" />
    <UnitTestResult executionId="2e5bf273-93aa-477b-857d-9bab93536a24" testId="3531bb1c-4b27-a459-4c43-0cfe3ff11658" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 4096, r: 4, p: 4)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4889038+00:00" endTime="2025-08-22T04:19:09.4889038+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e5bf273-93aa-477b-857d-9bab93536a24">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75e6a6ff-fd92-42e3-8973-4ca0edeae862" testId="5d748615-1a32-dcc6-a161-923cde120b47" testName="NeoSharp.Tests.Types.ContractParameterTests.Boolean_ShouldCreateBooleanParameter" computerName="r3e" duration="00:00:00.0001024" startTime="2025-08-22T04:19:09.5036466+00:00" endTime="2025-08-22T04:19:09.5036467+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75e6a6ff-fd92-42e3-8973-4ca0edeae862" />
    <UnitTestResult executionId="cd159f7d-bda2-40e7-b6c0-19e089685b35" testId="90d56c51-2ddc-8245-26c9-08f2adcdbbf1" testName="NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_WithWrongPassword_ShouldThrowException" computerName="r3e" duration="00:00:00.0003679" startTime="2025-08-22T04:19:09.5825627+00:00" endTime="2025-08-22T04:19:09.5825628+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cd159f7d-bda2-40e7-b6c0-19e089685b35">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_WithWrongPassword_ShouldThrowException() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 215
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2432c8a3-8b40-4c6e-b194-15924c4eac63" testId="bb02b94f-37a8-19ca-090b-2dc88817d8ad" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;ecac89cad93923c02321&quot;, expectedBase58: &quot;EJDM8drfXA6uyA&quot;)" computerName="r3e" duration="00:00:00.0000047" startTime="2025-08-22T04:19:09.5167824+00:00" endTime="2025-08-22T04:19:09.5167825+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2432c8a3-8b40-4c6e-b194-15924c4eac63" />
    <UnitTestResult executionId="929eed49-ae97-4d1a-b45d-d1a63de6b7d6" testId="c4d11546-b7ff-9147-d8a7-3a820d75d8d6" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBeyondEnd_ShouldThrowException" computerName="r3e" duration="00:00:00.0016471" startTime="2025-08-22T04:19:09.9162114+00:00" endTime="2025-08-22T04:19:09.9162115+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="929eed49-ae97-4d1a-b45d-d1a63de6b7d6" />
    <UnitTestResult executionId="602effb9-bee9-4a0a-b544-2772cf56a3ee" testId="101a5c4c-d35c-9c36-c5db-34a72d861be1" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.Length_ShouldReturnCorrectLength" computerName="r3e" duration="00:00:00.0012275" startTime="2025-08-22T04:19:09.5821809+00:00" endTime="2025-08-22T04:19:09.5821809+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="602effb9-bee9-4a0a-b544-2772cf56a3ee" />
    <UnitTestResult executionId="d048702a-e641-46b7-b597-77d06d4d067e" testId="9ac25e8c-f2f8-8f1f-14f5-488a222ed3b0" testName="NeoSharp.Tests.Types.Hash256Tests.ExplicitHashConversion_ShouldCreateFromHexString" computerName="r3e" duration="00:00:00.0001399" startTime="2025-08-22T04:19:09.5145044+00:00" endTime="2025-08-22T04:19:09.5145045+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d048702a-e641-46b7-b597-77d06d4d067e" />
    <UnitTestResult executionId="314d3e65-3c56-42c4-adf1-afcbc671d653" testId="629e7032-8557-9949-051b-245664692db4" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Boolean, expectedJson: &quot;Boolean&quot;, expectedByte: 16)" computerName="r3e" duration="00:00:00.0000063" startTime="2025-08-22T04:19:09.5023404+00:00" endTime="2025-08-22T04:19:09.5023405+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="314d3e65-3c56-42c4-adf1-afcbc671d653" />
    <UnitTestResult executionId="fcfe8961-06ea-4224-a671-9d7f47cd6fc1" testId="3e6e6c8a-2579-62b2-c566-29b61215c625" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_Hashes_ShouldBeDetected" computerName="r3e" duration="00:00:00.0002050" startTime="2025-08-22T04:19:09.5035509+00:00" endTime="2025-08-22T04:19:09.5035510+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fcfe8961-06ea-4224-a671-9d7f47cd6fc1" />
    <UnitTestResult executionId="ad734f12-fb8c-4a30-9282-22dec5454860" testId="dc528239-1430-c276-350b-70d67eb64991" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecoding" computerName="r3e" duration="00:00:00.0001611" startTime="2025-08-22T04:19:09.5197637+00:00" endTime="2025-08-22T04:19:09.5197638+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad734f12-fb8c-4a30-9282-22dec5454860" />
    <UnitTestResult executionId="6e8fb8f2-2b65-49a1-9cc5-7263e947f21c" testId="26f25596-6bcf-2aa2-0a70-f62cab760fd9" testName="NeoSharp.Tests.Crypto.WIFTests.WrongFirstByteWif_ShouldThrowException" computerName="r3e" duration="00:00:00.0006908" startTime="2025-08-22T04:19:09.5123312+00:00" endTime="2025-08-22T04:19:09.5123312+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e8fb8f2-2b65-49a1-9cc5-7263e947f21c" />
    <UnitTestResult executionId="76de96b6-45b4-451d-a2cd-84478175f093" testId="28c1a9bf-5a93-c3ad-eea0-bb20680fffa4" testName="NeoSharp.Tests.Types.Hash256Tests.Serialize_ShouldWriteLittleEndianBytes" computerName="r3e" duration="00:00:00.0086366" startTime="2025-08-22T04:19:09.5109514+00:00" endTime="2025-08-22T04:19:09.5109514+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="76de96b6-45b4-451d-a2cd-84478175f093" />
    <UnitTestResult executionId="1a6e82e3-5b37-4d66-b110-a5734bec9f3b" testId="bf835e73-1c1d-3036-1ae1-abe8be46c4ee" testName="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;Hello World&quot;)" computerName="r3e" duration="00:00:00.0780889" startTime="2025-08-22T04:19:09.5417951+00:00" endTime="2025-08-22T04:19:09.5417954+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a6e82e3-5b37-4d66-b110-a5734bec9f3b">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 255
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4857e83-630f-4e68-8d2e-1def5ef69594" testId="e3627c06-71fc-a060-1d4d-260adb9f1210" testName="NeoSharp.Tests.Types.EnumTypeTests.WitnessScope_ShouldWorkCorrectly" computerName="r3e" duration="00:00:00.0002295" startTime="2025-08-22T04:19:09.5041652+00:00" endTime="2025-08-22T04:19:09.5041653+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4857e83-630f-4e68-8d2e-1def5ef69594" />
    <UnitTestResult executionId="2acec3be-9685-4fab-b9ce-0f2a7acaf8c6" testId="04920b5f-686b-4d0a-a325-7e2ad0ac452a" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushData_WithInvalidOpCode_ShouldThrowException" computerName="r3e" duration="00:00:00.0024497" startTime="2025-08-22T04:19:09.9111866+00:00" endTime="2025-08-22T04:19:09.9111869+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2acec3be-9685-4fab-b9ce-0f2a7acaf8c6">
      <Output>
        <ErrorInfo>
          <Message>Expected a &lt;System.InvalidOperationException&gt; to be thrown, but found &lt;System.FormatException&gt;:
System.FormatException: Current position does not contain a PUSHDATA opcode
   at NeoSharp.Serialization.BinaryReader.ReadPushData() in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Serialization/BinaryReader.cs:line 306
   at NeoSharp.Tests.Serialization.BinaryReaderTests.&lt;&gt;c__DisplayClass1_0.&lt;ReadPushData_WithInvalidOpCode_ShouldThrowException&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 51
   at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
   at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
   at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushData_WithInvalidOpCode_ShouldThrowException() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 54
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="65d527b0-4449-4a3b-bbf3-b2629faa7c7a" testId="6952147b-0649-5a15-153f-168299f6ea42" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.InvalidPrivateKey_ShouldThrowException" computerName="r3e" duration="00:00:00.0005949" startTime="2025-08-22T04:19:09.5245484+00:00" endTime="2025-08-22T04:19:09.5245485+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="65d527b0-4449-4a3b-bbf3-b2629faa7c7a" />
    <UnitTestResult executionId="acb3d4fa-3259-4753-95a1-87a4e43fbd05" testId="78244beb-de60-cebe-d71b-1d69e6c372ee" testName="NeoSharp.Tests.Types.ContractParameterTests.Hash256_ShouldCreateHash256Parameter" computerName="r3e" duration="00:00:00.0012861" startTime="2025-08-22T04:19:09.5030919+00:00" endTime="2025-08-22T04:19:09.5030920+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="acb3d4fa-3259-4753-95a1-87a4e43fbd05" />
    <UnitTestResult executionId="6784c04e-6402-449b-a728-b6104cfc6b0c" testId="d74c1b47-2b45-42f8-b27a-2c9d874ea10b" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.GetScriptHash_ShouldReturnValidHash" computerName="r3e" duration="00:00:00.0049231" startTime="2025-08-22T04:19:09.5908964+00:00" endTime="2025-08-22T04:19:09.5908965+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6784c04e-6402-449b-a728-b6104cfc6b0c" />
    <UnitTestResult executionId="412ce2d2-dd8d-47e3-b6cd-cfbdc8d02d7f" testId="fe050ba5-2379-58fd-0cae-82b0659a2b6d" testName="NeoSharp.Tests.Crypto.SignTests.TestVerifySignature" computerName="r3e" duration="00:00:00.0007625" startTime="2025-08-22T04:19:09.5571451+00:00" endTime="2025-08-22T04:19:09.5571452+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="412ce2d2-dd8d-47e3-b6cd-cfbdc8d02d7f">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestVerifySignature() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 159
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe751a79-b6cc-4c50-be13-9f0c1d79f6a1" testId="6ede71b7-351c-1cf7-5855-c6a6a674af96" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;N\&quot;:7,\&quot;R\&quot;:8,\&quot;P\&quot;:9}&quot;)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4980213+00:00" endTime="2025-08-22T04:19:09.4980214+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe751a79-b6cc-4c50-be13-9f0c1d79f6a1">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66f4cee9-789b-4648-8813-b81c2d48830f" testId="8d7a3cb7-0721-5fbc-8b4a-ca2018c37dfd" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithDefaultScryptParams" computerName="r3e" duration="00:00:03.8184841" startTime="2025-08-22T04:19:56.7779322+00:00" endTime="2025-08-22T04:19:56.7779324+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66f4cee9-789b-4648-8813-b81c2d48830f">
      <Output>
        <ErrorInfo>
          <Message>Expected encrypted to start with "6P", but "QnVwghv7ANAQWynE6qPk4MoqbsU4Ny3gBGJ3SzERCgYH6mjWmFMecHDYNdD" differs near "QnV" (index 0).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.StringStartValidator.ValidateAgainstMismatch()
   at FluentAssertions.Primitives.StringValidator.Validate()
   at FluentAssertions.Primitives.StringAssertions`1.StartWith(String expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithDefaultScryptParams() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 54
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4dee360-a57b-4702-878d-965e151de344" testId="dbf23bcc-10fe-b4f8-bdba-93a8f4169160" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.Position_ShouldTrackCurrentPosition" computerName="r3e" duration="00:00:00.0004050" startTime="2025-08-22T04:19:09.9113303+00:00" endTime="2025-08-22T04:19:09.9113306+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4dee360-a57b-4702-878d-965e151de344" />
    <UnitTestResult executionId="20cc9730-111f-4bdb-9adf-dceaa20157e8" testId="1bbd0f7b-de32-4350-357e-2b738932497b" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;bf4f89001e670274dd&quot;, expectedBase58: &quot;3SEo3LWLoPntC&quot;)" computerName="r3e" duration="00:00:00.0000046" startTime="2025-08-22T04:19:09.5169000+00:00" endTime="2025-08-22T04:19:09.5169000+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="20cc9730-111f-4bdb-9adf-dceaa20157e8" />
    <UnitTestResult executionId="f35627f1-984d-42c6-a6a7-d0c34c94349d" testId="4d62d737-01d7-eab8-ec9c-5b7088340c30" testName="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_ShouldEncodeCorrectly" computerName="r3e" duration="00:00:00.0014120" startTime="2025-08-22T04:19:09.5124526+00:00" endTime="2025-08-22T04:19:09.5124527+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f35627f1-984d-42c6-a6a7-d0c34c94349d" />
    <UnitTestResult executionId="0ef626d9-3609-4009-bf49-2493f2a093b5" testId="e0f51f72-d8b8-59e9-9de3-c6b33c399d4f" testName="NeoSharp.Tests.Wallet.AccountTests.FromVerificationScript_ShouldCreateCorrectAccount" computerName="r3e" duration="00:00:00.0004692" startTime="2025-08-22T04:19:09.5859943+00:00" endTime="2025-08-22T04:19:09.5859943+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0ef626d9-3609-4009-bf49-2493f2a093b5" />
    <UnitTestResult executionId="bd263a79-f09b-483c-b340-f3dc987449e7" testId="2119fef3-55b3-cb02-38e7-b693aad1c328" testName="NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKeys_ShouldCreateCorrectScript" computerName="r3e" duration="00:00:00.0072491" startTime="2025-08-22T04:19:09.5855272+00:00" endTime="2025-08-22T04:19:09.5855273+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd263a79-f09b-483c-b340-f3dc987449e7">
      <Output>
        <ErrorInfo>
          <Message>Expected script[108] to be 0x7F, but found 0x9E.
Expected script[109] to be 0xC7, but found 0xD0.
Expected script[110] to be 0x5C, but found 0xDC.
Expected script[111] to be 0x4F, but found 0x3A.

With configuration:
- Use declared types and members
- Compare enums by value
- Compare tuples by their properties
- Compare anonymous types by their properties
- Compare records by their members
- Include non-browsable members
- Include all non-private properties
- Include all non-private fields
- Match member by name (or throw)
- Be strict about the order of items in byte arrays
- Without automatic conversion.
</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
   at FluentAssertions.Execution.AssertionScope.Dispose()
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
   at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKeys_ShouldCreateCorrectScript() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs:line 216
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc261263-fa0b-4982-99e9-922473c25759" testId="647ae2db-69ed-a458-f9b2-e1ff03e6988f" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarString_ShouldReadVariableString" computerName="r3e" duration="00:00:00.0002587" startTime="2025-08-22T04:19:09.9165231+00:00" endTime="2025-08-22T04:19:09.9165232+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc261263-fa0b-4982-99e9-922473c25759" />
    <UnitTestResult executionId="34707a83-ab5d-44a2-8448-12d27caa7c49" testId="219f2562-40dc-2f4d-2d29-11af09c2f8b7" testName="NeoSharp.Tests.Crypto.WIFTests.NullWifString_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0004606" startTime="2025-08-22T04:19:09.5147447+00:00" endTime="2025-08-22T04:19:09.5147448+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="34707a83-ab5d-44a2-8448-12d27caa7c49" />
    <UnitTestResult executionId="adc466b0-755b-449b-baf6-cbbb452e3bbb" testId="30d6f990-16b2-1890-0b3a-d1dfbe9eedf5" testName="NeoSharp.Tests.Crypto.WIFTests.WronglySizedWifs_ShouldThrowException(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWMLP1&quot;···)" computerName="r3e" duration="00:00:00.0007819" startTime="2025-08-22T04:19:09.5140496+00:00" endTime="2025-08-22T04:19:09.5140496+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="adc466b0-755b-449b-baf6-cbbb452e3bbb" />
    <UnitTestResult executionId="f9af2dbf-17b4-40de-bd63-0dfce38caa6d" testId="3d239bfe-c698-b684-dbea-c3fa7475cac3" testName="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWMLP1&quot;···)" computerName="r3e" duration="00:00:00.0000718" startTime="2025-08-22T04:19:09.5138005+00:00" endTime="2025-08-22T04:19:09.5138005+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9af2dbf-17b4-40de-bd63-0dfce38caa6d" />
    <UnitTestResult executionId="fb994c7e-3e44-4076-8fa7-b54a384d601e" testId="d7cbdf25-1abd-5be0-1705-629b06ed6233" testName="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;invalid&quot;)" computerName="r3e" duration="00:00:00.0002228" startTime="2025-08-22T04:19:09.5133558+00:00" endTime="2025-08-22T04:19:09.5133559+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fb994c7e-3e44-4076-8fa7-b54a384d601e" />
    <UnitTestResult executionId="b6dd5f63-52a0-4869-ac40-8badfc1faf36" testId="d09a547b-4f67-e1d1-0bc4-62a721e6d668" testName="NeoSharp.Tests.Crypto.SecurityTests.TestWIFImportSecurely" computerName="r3e" duration="00:00:00.0023875" startTime="2025-08-22T04:19:18.3868044+00:00" endTime="2025-08-22T04:19:18.3868046+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6dd5f63-52a0-4869-ac40-8badfc1faf36">
      <Output>
        <ErrorInfo>
          <Message>Expected address to be "NM7Aky765FG8NhhwtxjXRx7jEL1cnw7PBP", but "NhkYnJHzsPmb6D1PNgEeptSUNpCXkyN9Py" differs near "hkY" (index 1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstMismatch()
   at FluentAssertions.Primitives.StringValidator.Validate()
   at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestWIFImportSecurely() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 231
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2011be17-f605-4b69-bf45-3197c993b4de" testId="0c0c4f0b-af88-b5f0-9da0-491f9d254775" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;00eb15231dfceb60925886b67d065299925915aeb172c06647&quot;, expectedBase58: &quot;1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L&quot;)" computerName="r3e" duration="00:00:00.0000078" startTime="2025-08-22T04:19:09.5168221+00:00" endTime="2025-08-22T04:19:09.5168221+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2011be17-f605-4b69-bf45-3197c993b4de" />
    <UnitTestResult executionId="f3ba50f1-1167-42a9-bd36-4e1159c74fa8" testId="691753c3-d5e2-251f-e574-c6c2f1be1f0f" testName="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithInvalidThreshold_ShouldThrowException" computerName="r3e" duration="00:00:00.0005368" startTime="2025-08-22T04:19:09.5941541+00:00" endTime="2025-08-22T04:19:09.5941541+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f3ba50f1-1167-42a9-bd36-4e1159c74fa8" />
    <UnitTestResult executionId="ba070735-fbb9-442a-822b-01bad41b0a48" testId="27f2afbd-9f07-3545-d5d6-b28952ebdfd1" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L&quot;, expectedHex: &quot;00eb15231dfceb60925886b67d065299925915aeb172c06647&quot;)" computerName="r3e" duration="00:00:00.0000119" startTime="2025-08-22T04:19:09.5156450+00:00" endTime="2025-08-22T04:19:09.5156451+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba070735-fbb9-442a-822b-01bad41b0a48" />
    <UnitTestResult executionId="8e8acd5c-89b1-4c2d-884d-d305d7721135" testId="7e18d156-c166-d1dc-3710-de7645360064" testName="NeoSharp.Tests.Crypto.SecurityTests.TestNEP2EncryptionDecryption" computerName="r3e" duration="00:00:04.2426729" startTime="2025-08-22T04:19:18.3843987+00:00" endTime="2025-08-22T04:19:18.3843988+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8e8acd5c-89b1-4c2d-884d-d305d7721135">
      <Output>
        <ErrorInfo>
          <Message>Expected encrypted to start with "6P", but "QnW59ZL1gJnec4cYkeEBZJbBP8EKnJNL86dMjRCe3r2XhoczCcBDaHxVTFV" differs near "QnW" (index 0).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.StringStartValidator.ValidateAgainstMismatch()
   at FluentAssertions.Primitives.StringValidator.Validate()
   at FluentAssertions.Primitives.StringAssertions`1.StartWith(String expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Crypto.SecurityTests.TestNEP2EncryptionDecryption() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 129
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="11a281ce-258e-419a-8223-5e1d750fd204" testId="6a5e6311-a3da-999b-519f-c3f8d768df61" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithEmptyString_ShouldThrowException" computerName="r3e" duration="00:00:00.0033834" startTime="2025-08-22T04:19:09.6100520+00:00" endTime="2025-08-22T04:19:09.6100522+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11a281ce-258e-419a-8223-5e1d750fd204" />
    <UnitTestResult executionId="4e9d9f6b-f8c4-42aa-a705-400545571dc0" testId="93afad43-36e1-d731-837d-ad6d5a7f49c1" testName="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithValidWIF_ShouldReturnTrue" computerName="r3e" duration="00:00:00.0002268" startTime="2025-08-22T04:19:09.5117113+00:00" endTime="2025-08-22T04:19:09.5117113+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4e9d9f6b-f8c4-42aa-a705-400545571dc0" />
    <UnitTestResult executionId="03534cb6-83ae-4d84-ba95-1e5141d84ddc" testId="350aed43-d63e-4b3d-f69f-480da0dbfb1c" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 32768, r: 8, p: 8)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4886860+00:00" endTime="2025-08-22T04:19:09.4886860+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03534cb6-83ae-4d84-ba95-1e5141d84ddc">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="baafca7c-c8f4-40a3-9dba-436b5ab369f7" testId="ec4a4449-1424-a7ee-e040-db656a90d838" testName="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;password&quot;)" computerName="r3e" duration="00:00:04.2843998" startTime="2025-08-22T04:19:18.4289194+00:00" endTime="2025-08-22T04:19:18.4289194+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="baafca7c-c8f4-40a3-9dba-436b5ab369f7">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid base58 check string</Message>
          <StackTrace>   at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
   at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
   at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
   at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 147
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1f33c23-d0d0-4383-9562-d6f19b40d30c" testId="fa3a59df-facb-0618-e063-22bae6a6587f" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Signature, expectedJson: &quot;Signature&quot;, expectedByte: 23)" computerName="r3e" duration="00:00:00.0151182" startTime="2025-08-22T04:19:09.5019497+00:00" endTime="2025-08-22T04:19:09.5019498+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1f33c23-d0d0-4383-9562-d6f19b40d30c" />
    <UnitTestResult executionId="6b070237-df74-4dc4-8a92-b166488ee2c1" testId="736e58a5-e61f-d16f-a200-62c2b0320ab8" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBoolean_ShouldReadBooleaneanValues" computerName="r3e" duration="00:00:00.0007056" startTime="2025-08-22T04:19:09.9188876+00:00" endTime="2025-08-22T04:19:09.9188877+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6b070237-df74-4dc4-8a92-b166488ee2c1">
      <Output>
        <ErrorInfo>
          <Message>Expected reader.ReadBoolean() to be true, but found False.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBoolean_ShouldReadBooleaneanValues() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 184
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d229aaf0-b6ee-4a6a-8b67-d9e449af8fb9" testId="a51a3933-dd22-27be-1ca9-2cb4584d6666" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Array, expectedJson: &quot;Array&quot;, expectedByte: 32)" computerName="r3e" duration="00:00:00.0000030" startTime="2025-08-22T04:19:09.5025288+00:00" endTime="2025-08-22T04:19:09.5025288+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d229aaf0-b6ee-4a6a-8b67-d9e449af8fb9" />
    <UnitTestResult executionId="d33ca23b-f960-4d19-894f-3056f51527b7" testId="30cb0310-de3e-88ff-8f97-159661e8875a" testName="NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnTrueForAccountsWithoutPrivateKey" computerName="r3e" duration="00:00:00.0001632" startTime="2025-08-22T04:19:09.5949095+00:00" endTime="2025-08-22T04:19:09.5949095+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d33ca23b-f960-4d19-894f-3056f51527b7" />
    <UnitTestResult executionId="cde2d4ad-586f-4dde-bce6-dfc66cdaf7f3" testId="acd4bcec-3088-d922-c81d-7c878116fd96" testName="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithNullMethod_ShouldThrowArgumentNullException" computerName="r3e" duration="00:00:00.0027759" startTime="2025-08-22T04:19:09.6239552+00:00" endTime="2025-08-22T04:19:09.6239553+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cde2d4ad-586f-4dde-bce6-dfc66cdaf7f3" />
    <UnitTestResult executionId="f76b018e-9bb4-4924-9a38-302d5da87d52" testId="49a4d1dc-d639-43e5-b5bf-49f3c902de94" testName="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithEmptyMethod_ShouldThrowArgumentException" computerName="r3e" duration="00:00:00.0025419" startTime="2025-08-22T04:19:09.6538113+00:00" endTime="2025-08-22T04:19:09.6538115+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f76b018e-9bb4-4924-9a38-302d5da87d52" />
    <UnitTestResult executionId="013b54f0-4d41-4342-a4bd-f6264d308f92" testId="4fd00a53-8db1-d78c-2599-95e001080d8f" testName="NeoSharp.Tests.Types.Hash256Tests.CompareTo_ShouldOrderCorrectly" computerName="r3e" duration="00:00:00.0006054" startTime="2025-08-22T04:19:09.5143501+00:00" endTime="2025-08-22T04:19:09.5143501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="013b54f0-4d41-4342-a4bd-f6264d308f92" />
    <UnitTestResult executionId="3d946b18-4087-4776-9242-fa449a466646" testId="c813b430-2229-8354-72e9-cc990737510e" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: String, expectedJson: &quot;String&quot;, expectedByte: 19)" computerName="r3e" duration="00:00:00.0000025" startTime="2025-08-22T04:19:09.5024538+00:00" endTime="2025-08-22T04:19:09.5024538+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d946b18-4087-4776-9242-fa449a466646" />
    <UnitTestResult executionId="07f1ca60-4c83-4658-9dab-00191fb35bfe" testId="8eb0f6de-e206-b1b3-376e-4fc96993f209" testName="NeoSharp.Tests.Crypto.WIFTests.WrongByte33Wif_ShouldThrowException" computerName="r3e" duration="00:00:00.0006822" startTime="2025-08-22T04:19:09.5153535+00:00" endTime="2025-08-22T04:19:09.5153535+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07f1ca60-4c83-4658-9dab-00191fb35bfe" />
    <UnitTestResult executionId="6714b2ea-9908-4544-9239-77083a5cd325" testId="89f9964d-c6bd-f1e1-c61d-b736a8b08ce9" testName="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBigInteger_ShouldReadCorrectly" computerName="r3e" duration="00:00:00.0717308" startTime="2025-08-22T04:19:09.5747827+00:00" endTime="2025-08-22T04:19:09.5747829+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6714b2ea-9908-4544-9239-77083a5cd325">
      <Output>
        <ErrorInfo>
          <Message>Expected result to be equal to 1, but found 0.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
   at FluentAssertions.Numeric.ComparableTypeAssertions`2.Be(T expected, String because, Object[] becauseArgs)
   at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBigInteger_ShouldReadCorrectly() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 240
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d5b6407b-e18c-4ff8-b29e-c808943698b3" testId="41b47b25-71b8-a5de-187b-e2ea18a5bea5" testName="NeoSharp.Tests.Crypto.SecurityTests.TestRandomNumberGeneration" computerName="r3e" duration="00:00:00.0036087" startTime="2025-08-22T04:19:14.1140603+00:00" endTime="2025-08-22T04:19:14.1140605+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d5b6407b-e18c-4ff8-b29e-c808943698b3" />
    <UnitTestResult executionId="7b9ac804-df52-4bf2-bcdd-cf7ca3ff9b6f" testId="7fd0c204-7b22-7b74-17fd-4cc34182ba94" testName="NeoSharp.Tests.Wallet.AccountTests.Create_ShouldCreateValidGenericAccount" computerName="r3e" duration="00:00:00.0023065" startTime="2025-08-22T04:19:09.5937280+00:00" endTime="2025-08-22T04:19:09.5937280+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b9ac804-df52-4bf2-bcdd-cf7ca3ff9b6f" />
    <UnitTestResult executionId="6e6e400c-0410-41ca-9698-ccfa0d00907c" testId="745556e0-6207-6405-cb05-73e41479d01b" testName="NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromSignedMessage" computerName="r3e" duration="00:00:00.0009725" startTime="2025-08-22T04:19:09.5538844+00:00" endTime="2025-08-22T04:19:09.5538845+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6e6e400c-0410-41ca-9698-ccfa0d00907c">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.</Message>
          <StackTrace>   at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs:line 67
   at NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromSignedMessage() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs:line 121
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="51e69f99-8b01-446e-96e6-f8ea0300e76f" testId="2691c8ac-5de1-fb02-990b-ba468a8e28da" testName="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;n\&quot;: 7, \&quot;r\&quot;: 8, \&quot;p\&quot;: 9}&quot;)" computerName="r3e" duration="00:00:00.0010000" startTime="2025-08-22T04:19:09.4982255+00:00" endTime="2025-08-22T04:19:09.4982256+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51e69f99-8b01-446e-96e6-f8ea0300e76f">
      <Output>
        <ErrorInfo>
          <Message>System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')</Message>
          <StackTrace>   at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 93
   at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs:line 74
   at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs:line 16
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="133d39fb-e5be-40df-a335-dded94fa3bf1" testId="7abf3a3b-a9be-4e0c-533d-4c9cfcb4fe24" testName="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;String&quot;)" computerName="r3e" duration="00:00:00.0001095" startTime="2025-08-22T04:19:09.5043248+00:00" endTime="2025-08-22T04:19:09.5043248+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="133d39fb-e5be-40df-a335-dded94fa3bf1" />
    <UnitTestResult executionId="6f757bdb-699d-430d-beec-8a9d718869cc" testId="d9db7865-5d01-a38d-f8ab-fec80d4cd58f" testName="NeoSharp.Tests.Wallet.AccountTests.Sign_WithLockedAccount_ShouldThrowException" computerName="r3e" duration="00:00:00.0002628" startTime="2025-08-22T04:19:09.5972781+00:00" endTime="2025-08-22T04:19:09.5972782+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f757bdb-699d-430d-beec-8a9d718869cc">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : Invalid WIF compression flag</Message>
          <StackTrace>   at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs:line 169
   at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs:line 140
   at NeoSharp.Wallet.Account.FromWIF(String wif) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs:line 454
   at NeoSharp.Tests.Wallet.AccountTests.Sign_WithLockedAccount_ShouldThrowException() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs:line 243
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fdcf4a7d-badd-4ecb-8926-19747e606880" testId="cebdfbc2-1c44-c355-92fb-f3754bfef121" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;a3gV&quot;, expectedHex: &quot;626262&quot;)" computerName="r3e" duration="00:00:00.0000053" startTime="2025-08-22T04:19:09.5159906+00:00" endTime="2025-08-22T04:19:09.5159907+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fdcf4a7d-badd-4ecb-8926-19747e606880" />
    <UnitTestResult executionId="86ba4815-b3b2-49d3-b445-5f7293d8918f" testId="159b95df-fcac-493e-9d02-021648159908" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;626262&quot;, expectedBase58: &quot;a3gV&quot;)" computerName="r3e" duration="00:00:00.0000047" startTime="2025-08-22T04:19:09.5168616+00:00" endTime="2025-08-22T04:19:09.5168616+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="86ba4815-b3b2-49d3-b445-5f7293d8918f" />
    <UnitTestResult executionId="7c422e4e-55ff-4d4b-83e8-8765e05aefd4" testId="ea284b85-8c42-66b5-15ff-c6e3a5198213" testName="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeSelection" computerName="r3e" duration="00:00:00.0005759" startTime="2025-08-22T04:19:18.3845348+00:00" endTime="2025-08-22T04:19:18.3845348+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7c422e4e-55ff-4d4b-83e8-8765e05aefd4" />
    <UnitTestResult executionId="f6a7158e-c1e3-450c-93a5-af41e4506da6" testId="2949711f-0eb3-2956-3cc9-6eb25ae76d45" testName="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleLargeNumbers" computerName="r3e" duration="00:00:00.0009956" startTime="2025-08-22T04:19:09.5129117+00:00" endTime="2025-08-22T04:19:09.5129117+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6a7158e-c1e3-450c-93a5-af41e4506da6" />
    <UnitTestResult executionId="31536ea7-7b91-47c4-aee6-8c2f018d64bb" testId="46e9ff7c-0efc-b9b8-9dfa-b389ab865583" testName="NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(compressed: False)" computerName="r3e" duration="00:00:00.0004236" startTime="2025-08-22T04:19:09.5116042+00:00" endTime="2025-08-22T04:19:09.5116043+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31536ea7-7b91-47c4-aee6-8c2f018d64bb">
      <Output>
        <ErrorInfo>
          <Message>NeoSharp.Crypto.WIFException : Invalid WIF format: Invalid compressed flag. Expected 0x01, got 0x00</Message>
          <StackTrace>   at NeoSharp.Crypto.WIF.Decode(String wifString) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/WIF.cs:line 108
   at NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(Boolean compressed) in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/WIFTests.cs:line 162
   at InvokeStub_WIFTests.CompressedFlag_ShouldBeHandledCorrectly(Object, Span`1)
   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="29d4ae77-61f6-4502-9326-dc352f7e83e7" testId="e0ff5e87-9149-ce63-9796-3fa300857898" testName="NeoSharp.Tests.Types.Hash160Tests.Serialize_ShouldWriteLittleEndianBytes" computerName="r3e" duration="00:00:00.0005394" startTime="2025-08-22T04:19:09.5110925+00:00" endTime="2025-08-22T04:19:09.5110925+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29d4ae77-61f6-4502-9326-dc352f7e83e7" />
    <UnitTestResult executionId="ee4e5936-9926-498c-9de4-3aad73f5b88a" testId="c0a24241-2665-51f1-0378-db611bcd3dd4" testName="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithWhitespaceMethod_ShouldThrowArgumentException" computerName="r3e" duration="00:00:00.0034677" startTime="2025-08-22T04:19:09.6190067+00:00" endTime="2025-08-22T04:19:09.6190069+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee4e5936-9926-498c-9de4-3aad73f5b88a" />
    <UnitTestResult executionId="2d040a2b-c678-473d-8ebe-74de445d3142" testId="693de814-d436-dc86-2f4b-cd82be387302" testName="NeoSharp.Tests.Types.Hash160Tests.FromLittleEndianBytes_ShouldCreateHashCorrectly" computerName="r3e" duration="00:00:00.0003337" startTime="2025-08-22T04:19:09.5116670+00:00" endTime="2025-08-22T04:19:09.5116671+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2d040a2b-c678-473d-8ebe-74de445d3142" />
    <UnitTestResult executionId="274b28f8-a1ce-4c7e-a530-2203c9a3f7c8" testId="956fca44-5e60-03fc-7509-a833909ab23c" testName="NeoSharp.Tests.Types.ContractParameterTests.String_ShouldCreateStringParameter" computerName="r3e" duration="00:00:00.0001011" startTime="2025-08-22T04:19:09.5095250+00:00" endTime="2025-08-22T04:19:09.5095251+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="274b28f8-a1ce-4c7e-a530-2203c9a3f7c8" />
    <UnitTestResult executionId="71594b60-ae11-442c-8ba0-4ff7b43c70c9" testId="a670f6ba-6b92-ff82-b344-e17a9ee818a8" testName="NeoSharp.Tests.Crypto.WIFTests.ValidWifToPrivateKey_ShouldDecodeCorrectly" computerName="r3e" duration="00:00:00.0002759" startTime="2025-08-22T04:19:09.5121981+00:00" endTime="2025-08-22T04:19:09.5121982+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71594b60-ae11-442c-8ba0-4ff7b43c70c9" />
    <UnitTestResult executionId="08475e08-9db7-4f25-a6ea-ebb33701d95b" testId="09e10194-f968-2de2-e0b9-66d7f6ba2e02" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromPoint_ShouldCreateCorrectKey" computerName="r3e" duration="00:00:00.0001517" startTime="2025-08-22T04:19:09.6059789+00:00" endTime="2025-08-22T04:19:09.6059789+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08475e08-9db7-4f25-a6ea-ebb33701d95b" />
    <UnitTestResult executionId="9a24ddab-089c-44f4-828e-f44a388c8b7c" testId="42da5785-dc68-eb06-6258-986f8c7b7a9d" testName="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingForValidStrings" computerName="r3e" duration="00:00:00.0052760" startTime="2025-08-22T04:19:09.5193397+00:00" endTime="2025-08-22T04:19:09.5193400+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9a24ddab-089c-44f4-828e-f44a388c8b7c" />
    <UnitTestResult executionId="0b89179d-3a87-4a8d-be5e-fb24c1e4620a" testId="c130288d-a9d4-34a1-8371-13344ddcfeae" testName="NeoSharp.Tests.Types.Hash256Tests.Constructor_WithInvalidHex_ShouldThrowException" computerName="r3e" duration="00:00:00.0027180" startTime="2025-08-22T04:19:09.5127219+00:00" endTime="2025-08-22T04:19:09.5127219+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b89179d-3a87-4a8d-be5e-fb24c1e4620a" />
    <UnitTestResult executionId="66148e11-30bd-4ad2-9a91-87ad414c7b05" testId="ba42f61a-4918-db0a-7057-c08cf25ba397" testName="NeoSharp.Tests.Crypto.ECKeyPairTests.GetAddress_ShouldReturnValidNeoAddress" computerName="r3e" duration="00:00:00.0022666" startTime="2025-08-22T04:19:09.5197378+00:00" endTime="2025-08-22T04:19:09.5197380+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66148e11-30bd-4ad2-9a91-87ad414c7b05" />
  </Results>
  <TestDefinitions>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.Clear_ShouldResetBuilder" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="064f0647-333d-d6ac-aef1-1673d5818907">
      <Execution id="96e24c92-1792-4106-85f2-4b9398884dbb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="Clear_ShouldResetBuilder" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Array, expectedJson: &quot;Array&quot;, expectedByte: 32)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a51a3933-dd22-27be-1ca9-2cb4584d6666">
      <Execution id="d229aaf0-b6ee-4a6a-8b67-d9e449af8fb9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.WitnessScope_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e3627c06-71fc-a060-1d4d-260adb9f1210">
      <Execution id="b4857e83-630f-4e68-8d2e-1def5ef69594" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="WitnessScope_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarInt_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="af020ac1-365f-b7eb-a431-ac7da1a55d0e">
      <Execution id="f57ed279-0ab2-49f3-9448-df37d132750c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteVarInt_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_ForBytes_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a4f10603-0b26-0d65-ce5e-e2df30b3d1b6">
      <Execution id="d336427a-ecba-4c14-9115-bb188c1baa68" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Encode_ForBytes_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestKeyFromSignedMessageWithInvalidSignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f86c1082-ed35-a19a-aa0b-8740241d8a93">
      <Execution id="8e5bef4c-5f6e-420d-8718-d2d6f2c724b4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestKeyFromSignedMessageWithInvalidSignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKey_ShouldCreateCorrectScript" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ea24ca3c-4e72-8267-eca6-49c11c381c9b">
      <Execution id="742717e8-8148-46e7-a044-b321dace141e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="VerificationScriptFromPublicKey_ShouldCreateCorrectScript" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;00000000000000000000&quot;, expectedBase58: &quot;1111111111&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ca4fe77c-4e86-9f45-1b70-049fdc1c1239">
      <Execution id="4091a2fd-419d-4b85-b16e-a3cac3b70572" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushMapNested_ShouldCreateCorrectNestedMapStructure" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dff9965e-4957-f7db-013c-ff7112bdb3f5">
      <Execution id="1b983a1e-d794-4652-8232-c3a9ed6420f6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushMapNested_ShouldCreateCorrectNestedMapStructure" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Deserialize_ShouldCreateHashFromLittleEndianBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f10fde39-91da-cdc8-1ac1-947772a818bb">
      <Execution id="0ac767b1-baac-4ead-8d7c-d4c8c11a1c39" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Deserialize_ShouldCreateHashFromLittleEndianBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;N\&quot;:7,\&quot;R\&quot;:8,\&quot;P\&quot;:9}&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6ede71b7-351c-1cf7-5855-c6a6a674af96">
      <Execution id="fe751a79-b6cc-4c50-be13-9f0c1d79f6a1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsJsonVariations" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithDefaultScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8d7a3cb7-0721-5fbc-8b4a-ca2018c37dfd">
      <Execution id="66f4cee9-789b-4648-8813-b81c2d48830f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestEncryptWithDefaultScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.ToString_ShouldReturnScriptHashString" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9a5a5259-43e7-a157-ba6e-2aaadbf51c75">
      <Execution id="11bbb30e-886f-4d1b-9a62-7a09b3e70109" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="ToString_ShouldReturnScriptHashString" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.SerializePublicKey_ShouldReturnCorrectBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6e0886c3-c6d4-9316-913e-67c4a2ab715a">
      <Execution id="9beabb00-1a5f-40b1-b045-9a896ac31dd3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="SerializePublicKey_ShouldReturnCorrectBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;\ud83d\ude80 Unicode message with emojis \ud83d\udd10&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f8cbfdd2-aca9-9e27-c8fd-251f064fdfce">
      <Execution id="b484a48f-cb28-4ae5-8a60-3c89aedc1473" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignVariousMessages" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.CompareTo_ShouldOrderCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4fd00a53-8db1-d78c-2599-95e001080d8f">
      <Execution id="013b54f0-4d41-4342-a4bd-f6264d308f92" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="CompareTo_ShouldOrderCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.ScriptHash_ShouldBeReadOnly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="92594ce4-a29a-2f60-6b95-8de7cbb18821">
      <Execution id="65825c97-4051-48fc-8bfb-58d5215dd893" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="ScriptHash_ShouldBeReadOnly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingForValidStrings" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ed290d48-5b09-a0ef-0064-b242dcf2f952">
      <Execution id="97f0fd0f-7816-4dbc-9ed0-60110779599a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingForValidStrings" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestSecureECKeyPair" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1152df18-e346-ddeb-56d2-4baba47f379b">
      <Execution id="24f81a47-82bb-44a3-b10a-beb67a34d463" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestSecureECKeyPair" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKeys_ShouldCreateCorrectScript" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2119fef3-55b3-cb02-38e7-b693aad1c328">
      <Execution id="bd263a79-f09b-483c-b340-f3dc987449e7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="VerificationScriptFromPublicKeys_ShouldCreateCorrectScript" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromPointWithHexPrefix_ShouldHandlePrefix" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="06f81819-3fd4-bb37-39ac-53fe9c4dccb5">
      <Execution id="0e066bd5-b304-46f0-a6ec-0f795da40ebd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="NewPublicKeyFromPointWithHexPrefix_ShouldHandlePrefix" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_WithWrongPassword_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="90d56c51-2ddc-8245-26c9-08f2adcdbbf1">
      <Execution id="cd159f7d-bda2-40e7-b6c0-19e089685b35" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="DecryptPrivateKey_WithWrongPassword_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.Dispose_ShouldNotThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e39a4c61-b8fe-475f-ae8e-0405980a31e1">
      <Execution id="05cb2fc0-ffe4-47e7-adaa-c17b5a669aa5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="Dispose_ShouldNotThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.ImplicitStringConversion_ShouldReturnHexString" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3c56c2c2-4fb6-11eb-e517-8e04c9da4bfc">
      <Execution id="dcff878f-5584-4614-b80a-7d8538f09d3d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="ImplicitStringConversion_ShouldReturnHexString" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestTimingAttackResistance" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="132ccf43-7ae7-adb9-92a9-df519faee0a1">
      <Execution id="a631ef01-3894-4afb-9845-b0aa44661fbc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestTimingAttackResistance" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.CreateRandomKeyPair_ShouldGenerateValidKeys" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bbd40c50-138a-242f-0a1a-f5146e72bc55">
      <Execution id="ced0221a-8cdc-44b0-956e-39441f879255" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="CreateRandomKeyPair_ShouldGenerateValidKeys" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Hash160_ShouldSerializeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="64826042-8696-d8e4-f559-e9388633cb53">
      <Execution id="324a34f5-5d17-40aa-84ab-8b8dc10b4ab2" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_Hash160_ShouldSerializeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithWhitespaceMethod_ShouldThrowArgumentException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c6ca9350-47d0-de0b-9e29-00de07b6df7a">
      <Execution id="855db99c-4cd6-41e7-bab0-a3e9a11aefed" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_WithWhitespaceMethod_ShouldThrowArgumentException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.InvalidPrivateKeyLength_ShouldThrowWIFException(length: 33)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="77fc752b-8f45-9e78-5b84-e90ebc566278">
      <Execution id="f0fb5e2d-a3fa-45f8-ae09-c663b252b045" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="InvalidPrivateKeyLength_ShouldThrowWIFException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushData_WithInvalidOpCode_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="04920b5f-686b-4d0a-a325-7e2ad0ac452a">
      <Execution id="2acec3be-9685-4fab-b9ce-0f2a7acaf8c6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadPushData_WithInvalidOpCode_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors1" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d0e8e19c-dad1-887d-7e8d-e9f96daabfbb">
      <Execution id="72b4b45b-c9b3-4f7e-916c-69c7f92d49cb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestVectors1" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Hash256, expectedJson: &quot;Hash256&quot;, expectedByte: 21)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5b2a61b5-a877-35e2-ce62-96593f9e2cb3">
      <Execution id="dc51b2c7-38b5-41b2-8f4f-ee66570a7844" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushMap_ShouldCreateCorrectMapStructure" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a04a0f39-a134-c31e-63fa-5c0df3d76221">
      <Execution id="bf5c8946-5a8a-493d-9854-189c3d770097" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushMap_ShouldCreateCorrectMapStructure" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteUInt16_ShouldWriteCorrectBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5e97768f-d530-99d2-989a-4e0f3db77405">
      <Execution id="d7102a23-7a5d-4340-9f5d-223e8fb579a4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteUInt16_ShouldWriteCorrectBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestSecureBytesConstantTimeComparison" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="89cd3ca8-497c-6040-13f0-10f5cb59f90d">
      <Execution id="4445f8bf-09ac-438a-9537-e5013c111a5d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestSecureBytesConstantTimeComparison" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithNonDefaultScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="35966a0e-660b-4e81-3caf-977868899497">
      <Execution id="bbc1e07c-cd51-40b6-867d-ffb3e96fd5de" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestDecryptWithNonDefaultScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestHashCacheThreadSafety" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="520fc664-9814-ee48-7c06-87170716aa83">
      <Execution id="0bff371d-6a11-4322-af12-2bac455dc5cf" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestHashCacheThreadSafety" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_ByteArray_ShouldSerializeAsBase64" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="08f8f522-e527-951e-fd77-3ff317c0ac27">
      <Execution id="5029a5a5-4bc9-4051-a573-7e237a2af36e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_ByteArray_ShouldSerializeAsBase64" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.FromPrivateKey_ShouldCreateCorrectAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ac899e7c-3b9d-efbd-e46c-1925a05dd291">
      <Execution id="68185980-39b1-4453-a4db-7ea784301507" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="FromPrivateKey_ShouldCreateCorrectAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Integer, expectedJson: &quot;Integer&quot;, expectedByte: 17)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7f7ab2b2-597e-eee2-72be-73a112a769f7">
      <Execution id="9ec7853d-a34b-44cd-a15a-72e15c29f4dd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;516b6fcd0f&quot;, expectedBase58: &quot;ABnLTmg&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="137931c0-8691-6fca-7f01-9635ba02a966">
      <Execution id="49823c45-88ba-4a8c-90c8-261e4369e788" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleLargeNumbers" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2949711f-0eb3-2956-3cc9-6eb25ae76d45">
      <Execution id="f6a7158e-c1e3-450c-93a5-af41e4506da6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushInteger_ShouldHandleLargeNumbers" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteBoolean_ShouldWriteBooleaneanAsBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a62b168f-b9b1-d2df-3ac2-1df7f1c9725e">
      <Execution id="e92e9e63-49af-4373-a2f7-7eb995bfda56" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteBoolean_ShouldWriteBooleaneanAsBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.NullWifString_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="219f2562-40dc-2f4d-2d29-11af09c2f8b7">
      <Execution id="34707a83-ab5d-44a2-8448-12d27caa7c49" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="NullWifString_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8bf81e66-377b-fa96-3dfc-8bfd6c40e44c">
      <Execution id="b3ccb2d2-7192-4599-8e3d-c28c1825dcb4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadInt64_ShouldReadCorrectValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f8d47d8d-7ddf-b062-b8b7-9793b946bf9b">
      <Execution id="30794ed2-77dc-4e9e-adad-a6ca16b630e5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadInt64_ShouldReadCorrectValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.Available_ShouldReturnRemainingBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dc7a5ba7-f9d6-fc52-1733-2b6ba5e7f9c8">
      <Execution id="121816b9-35d8-43f0-a265-aa155870a2b5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="Available_ShouldReturnRemainingBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.FromLittleEndianBytes_ShouldCreateHashCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="693de814-d436-dc86-2f4b-cd82be387302">
      <Execution id="2d040a2b-c678-473d-8ebe-74de445d3142" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="FromLittleEndianBytes_ShouldCreateHashCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.GetScriptHash_ShouldReturnValidHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d74c1b47-2b45-42f8-b27a-2c9d874ea10b">
      <Execution id="6784c04e-6402-449b-a728-b6104cfc6b0c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="GetScriptHash_ShouldReturnValidHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.FromVerificationScript_ShouldCreateCorrectAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e0f51f72-d8b8-59e9-9de3-c6b33c399d4f">
      <Execution id="0ef626d9-3609-4009-bf49-2493f2a093b5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="FromVerificationScript_ShouldCreateCorrectAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignatureRecoveryIds" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a0b69eef-402a-b362-a21b-b7c396dde08f">
      <Execution id="ffe05302-77e1-471c-9953-d1e1351b281e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignatureRecoveryIds" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Size_ShouldReturn32" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3f3058b5-29b7-7193-a316-a0a18c9bcf81">
      <Execution id="edc8bccf-9bc6-4c85-9240-f6dae904c497" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Size_ShouldReturn32" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_BinaryData_ShouldBeDetected" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="603a4190-4c31-e235-1dea-4448262c18fc">
      <Execution id="efb923ef-ed02-44ca-833a-89cd6f79185a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_BinaryData_ShouldBeDetected" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Boolean&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="fb9dbead-6581-a40e-326f-bb7f29555d11">
      <Execution id="aca8545f-4346-4f9d-8d41-4ded5216e744" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.String_ShouldCreateStringParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="956fca44-5e60-03fc-7509-a833909ab23c">
      <Execution id="274b28f8-a1ce-4c7e-a530-2203c9a3f7c8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="String_ShouldCreateStringParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8b02887a-436a-84b1-9469-502e894249de">
      <Execution id="80b5ae13-2135-42e2-bba1-9c64cbdfebe6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestVariousPasswords" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBeyondEnd_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c4d11546-b7ff-9147-d8a7-3a820d75d8d6">
      <Execution id="929eed49-ae97-4d1a-b45d-d1a63de6b7d6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadBeyondEnd_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.SmartContract_WithNullNeoSharp_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b2a5cf74-d54b-a40a-2fad-3f7112c31afc">
      <Execution id="1563ea4d-902d-4fb6-a37a-2d9b9650bdfe" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="SmartContract_WithNullNeoSharp_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Boolean_ShouldCreateBooleanParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5d748615-1a32-dcc6-a161-923cde120b47">
      <Execution id="75e6a6ff-fd92-42e3-8973-4ca0edeae862" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Boolean_ShouldCreateBooleanParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.FromPublicKey_WithValidPublicKey_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bccc2445-89a6-1399-42c4-b4fe289cc575">
      <Execution id="46e6f69a-c6ce-4e40-a8fa-27a12d522f1d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="FromPublicKey_WithValidPublicKey_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;a&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="694269c9-e36e-d154-83f2-af845bc2e686">
      <Execution id="021547c2-51d5-4776-8d6c-a215190a1f78" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestVariousPasswords" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBoolean_ShouldReadBooleaneanValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="736e58a5-e61f-d16f-a200-62c2b0320ab8">
      <Execution id="6b070237-df74-4dc4-8a92-b166488ee2c1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadBoolean_ShouldReadBooleaneanValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(compressed: True)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f0c0998a-02c2-d6bb-d7e3-38a411a27bd4">
      <Execution id="15fdab1b-18eb-476c-9300-ce8ac711b9ac" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="CompressedFlag_ShouldBeHandledCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarBytes_ShouldReadVariableBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7d2410b8-3c58-b582-417b-c169fd10082a">
      <Execution id="7b785ece-173a-4df1-8ca5-58339b3a6bf5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadVarBytes_ShouldReadVariableBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.FromData_ShouldCreateHashFromData" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8d64e49c-54b6-a9d2-2909-1d5c6c0bbf6b">
      <Execution id="7de6f2b2-232b-45f7-87d8-2923777626d2" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="FromData_ShouldCreateHashFromData" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.WrongByte33Wif_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8eb0f6de-e206-b1b3-376e-4fc96993f209">
      <Execution id="07f1ca60-4c83-4658-9dab-00191fb35bfe" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="WrongByte33Wif_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2AddressGeneration" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8dc7aaf8-eccc-25c6-3e3b-36a084427ca9">
      <Execution id="dbecef4f-7511-4dde-942b-753dcd7fc64e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestNEP2AddressGeneration" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingForInvalidStrings" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="cabce220-086e-7b08-bb2d-5b89bcbe34c8">
      <Execution id="92653fac-e576-45c2-8d6f-584be39a94af" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingForInvalidStrings" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Zero_ShouldReturnZeroHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="84f4aa5b-2dbf-da24-8c49-9944ee9416f3">
      <Execution id="93e743c1-70b9-4b2c-84f3-1a7cc907b7c4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Zero_ShouldReturnZeroHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteByte_ShouldWriteSingleByte" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="212362f0-6582-d921-5ad6-0f18fb1fccd7">
      <Execution id="a5141bc3-6948-4438-894b-f9cbb87fef83" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteByte_ShouldWriteSingleByte" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;aPEr&quot;, expectedHex: &quot;636363&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b48c632d-b893-92fa-f886-b99be87992cb">
      <Execution id="1fefc696-f7dd-43b2-b3e5-0d4e21e7bb77" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 256, r: 1, p: 1)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="86e2e90a-39da-e6e6-9a93-bb33e054653a">
      <Execution id="755b9361-7ad8-4238-add5-cee0f65bc4b5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsRoundTrip" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestMasterKeyGeneration(seedHex: &quot;fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7&quot;···, path: [])" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3666327d-eeb2-8cf6-199c-a28cfc5678bf">
      <Execution id="c5d6ae29-3c7e-4d8a-b3fb-41c66c925c54" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestMasterKeyGeneration" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58LeadingZeros" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0522e2ba-d5d4-2a3d-66cc-29afc357df8a">
      <Execution id="d60e49c9-dc25-450c-8e1b-3ffd622f1582" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58LeadingZeros" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;1111111111&quot;, expectedHex: &quot;00000000000000000000&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="955eafc5-5014-d0fd-ce5e-e921d4a1d72f">
      <Execution id="73dd55b3-92a6-4d34-ac82-d6e4f9158f84" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;invalid&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d7cbdf25-1abd-5be0-1705-629b06ed6233">
      <Execution id="fb994c7e-3e44-4076-8fa7-b54a384d601e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="IsValidWIF_WithInvalidWIF_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.GetHashCode_ShouldBeConsistent" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7b1adb34-29e1-8e99-6cf5-b6dc68ed1598">
      <Execution id="dbbf5318-d76d-4b8c-bef6-2738814d5a0e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="GetHashCode_ShouldBeConsistent" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.CompareTo_ShouldOrderCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="43a93774-e244-efde-3836-bf3986847e98">
      <Execution id="1dfab0c9-308f-4a66-aef7-035d2a586535" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="CompareTo_ShouldOrderCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Boolean, expectedJson: &quot;Boolean&quot;, expectedByte: 16)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="629e7032-8557-9949-051b-245664692db4">
      <Execution id="314d3e65-3c56-42c4-adf1-afcbc671d653" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestHashCaching" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="26db6d8c-2b9b-41b0-9243-370f8164f8a8">
      <Execution id="0ff42af3-f13b-44b1-a63f-af3fb12dd247" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestHashCaching" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.BuildThrowScript_ShouldCreateThrowScript" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="08b7c809-5c55-e168-d11e-cb58a1056788">
      <Execution id="298ef2ee-5940-47f2-9ebb-962a011d457b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="BuildThrowScript_ShouldCreateThrowScript" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;n\&quot;: 7, \&quot;r\&quot;: 8, \&quot;p\&quot;: 9}&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2691c8ac-5de1-fb02-990b-ba468a8e28da">
      <Execution id="51e69f99-8b01-446e-96e6-f8ea0300e76f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsJsonVariations" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestPrivateKeyNotInMemoryAfterClear" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8e8c20ef-c921-4caa-8e32-3f8b87a136b8">
      <Execution id="ab94b64b-56ed-46b1-b2a2-dfecc4f36d9e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestPrivateKeyNotInMemoryAfterClear" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.UncompressedWif_ShouldDecodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="51f5edf3-4cf1-eb27-23e0-a2855310af0f">
      <Execution id="00771025-e53a-4329-87d9-46f55f8f0284" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="UncompressedWif_ShouldDecodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithNonDefaultScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="47219b03-e477-2ce4-e2b2-e738b7e057c5">
      <Execution id="4aed0f98-cf59-4058-b27b-e803348dbf7a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestEncryptWithNonDefaultScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeySize_ShouldBeCorrect" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2b42cf1e-53f1-51d7-378c-373f8211cdc9">
      <Execution id="63b48d5f-62c0-4846-af87-e1fef2656d78" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="PublicKeySize_ShouldBeCorrect" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithNullMethod_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="acd4bcec-3088-d922-c81d-7c878116fd96">
      <Execution id="cde2d4ad-586f-4dde-bce6-dfc66cdaf7f3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_WithNullMethod_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.ExplicitHashConversion_ShouldCreateFromHexString" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9ac25e8c-f2f8-8f1f-14f5-488a222ed3b0">
      <Execution id="d048702a-e641-46b7-b597-77d06d4d067e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="ExplicitHashConversion_ShouldCreateFromHexString" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.WronglySizedWifs_ShouldThrowException(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWMLP1&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="30d6f990-16b2-1890-0b3a-d1dfbe9eedf5">
      <Execution id="adc466b0-755b-449b-baf6-cbbb452e3bbb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="WronglySizedWifs_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.EmptyWifString_ShouldThrowWIFException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="deb531c7-2015-a88f-674c-68295032b174">
      <Execution id="5cf1afc1-10a7-455b-8dd0-64caf622050c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="EmptyWifString_ShouldThrowWIFException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.InvalidPrivateKey_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6952147b-0649-5a15-153f-168299f6ea42">
      <Execution id="65d527b0-4449-4a3b-bbf3-b2629faa7c7a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="InvalidPrivateKey_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Zero_ShouldReturnZeroHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2d2a9605-3a0d-6e02-270f-fff5f7a24d69">
      <Execution id="87d1b861-f819-4830-87d2-a6ace60626de" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Zero_ShouldReturnZeroHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestDeterministicSigning" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8fc4c271-55a8-1d75-ee9b-ca171542217e">
      <Execution id="ebc57958-c9f9-411c-9d8e-a4383c9b6209" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestDeterministicSigning" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;String&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7abf3a3b-a9be-4e0c-533d-4c9cfcb4fe24">
      <Execution id="133d39fb-e5be-40df-a335-dded94fa3bf1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_WithEmptyInput_ShouldReturnEmptyString" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f0cdfe8d-ed22-e606-4448-12aa4bd1069a">
      <Execution id="74e58aa6-d98b-410d-9c5c-c15759b58f2a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Encode_WithEmptyInput_ShouldReturnEmptyString" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithInvalidThreshold_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="691753c3-d5e2-251f-e574-c6c2f1be1f0f">
      <Execution id="f3ba50f1-1167-42a9-bd36-4e1159c74fa8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="CreateMultiSigAccount_WithInvalidThreshold_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="aed8925a-767a-6626-c9d6-3af8273ee6b3">
      <Execution id="04f7bc96-bb2d-4279-9170-2fc2e181a1d6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.DeserializePublicKey_ShouldCreateCorrectKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ab3c62e7-d184-01a1-5e12-a63742eb3420">
      <Execution id="1218fd51-65c9-421d-a33e-df73fef91267" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="DeserializePublicKey_ShouldCreateCorrectKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestDeterministicSignatures" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="17439590-e91f-3aab-b409-463c285438fd">
      <Execution id="cda7fdca-fef4-4409-b305-1212f00657dd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestDeterministicSignatures" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;3EFU7m&quot;, expectedHex: &quot;572e4794&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3fdd123a-6dd7-43a2-c25a-6a9fb66236db">
      <Execution id="44c61406-72fc-4c2e-9f38-e2e456181b64" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestPathValidation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="693f5a41-e6ea-2fe8-b639-69d705d0deef">
      <Execution id="904df2ee-779e-4ed0-a073-1e6a0aa0eafb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestPathValidation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Equals_WithDifferentHash_ShouldReturnFalse" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5569ace7-c374-a3a5-367c-296344974383">
      <Execution id="65d0cbc8-2d66-44b8-953d-96f55455c08f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Equals_WithDifferentHash_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Serialize_ShouldWriteLittleEndianBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e0ff5e87-9149-ce63-9796-3fa300857898">
      <Execution id="29d4ae77-61f6-4502-9326-dc352f7e83e7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Serialize_ShouldWriteLittleEndianBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.PrivateKeyToWif_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a5f85e1f-a238-e2d3-1bc1-0d79eff381b9">
      <Execution id="52ed5229-73a5-4bd5-b0e3-b2ec2e160100" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="PrivateKeyToWif_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ByteArray_WithBytes_ShouldCreateByteArrayParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1fd2d563-2db0-b811-6dea-5bf5b95f5c6c">
      <Execution id="b9cea254-4e47-4752-a5bf-ab87d2f682b4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ByteArray_WithBytes_ShouldCreateByteArrayParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.FromScript_WithValidScript_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6f06f4f6-7e48-c0da-1fff-f5c44b023382">
      <Execution id="42d07d75-fef1-48cd-bc30-fd8d5ccd0b5b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="FromScript_WithValidScript_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestMultipleEncryptionsProduceDifferentResults" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9ef9cf35-6a67-9598-3685-c5eb1b930644">
      <Execution id="edcfe387-061b-49cc-aad2-44678e821a9f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestMultipleEncryptionsProduceDifferentResults" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.FromPublicKey_ShouldCreateCorrectAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c0fece1f-9b44-eed0-6d57-25d33d60c993">
      <Execution id="c3e04221-fdd3-43dd-b73b-4a873e967041" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="FromPublicKey_ShouldCreateCorrectAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.MapToContractParameter_ShouldHandleVariousTypes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7750cff9-d7c1-7a64-5bf0-bd8412d9d66c">
      <Execution id="8a11b585-f5ef-4877-84cb-721c2ffb0972" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="MapToContractParameter_ShouldHandleVariousTypes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 32768, r: 8, p: 8)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="350aed43-d63e-4b3d-f69f-480da0dbfb1c">
      <Execution id="03534cb6-83ae-4d84-ba95-1e5141d84ddc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsRoundTrip" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.FromLittleEndianBytes_ShouldCreateHashCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a705c5d0-b329-898a-1d9c-c7cf3ccf19ed">
      <Execution id="03cfa3c6-f2bc-4bb1-aea7-c1cea655363d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="FromLittleEndianBytes_ShouldCreateHashCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_Hashes_ShouldBeDetected" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3e6e6c8a-2579-62b2-c566-29b61215c625">
      <Execution id="fcfe8961-06ea-4224-a671-9d7f47cd6fc1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_Hashes_ShouldBeDetected" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.ValidWifToPrivateKey_ShouldDecodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a670f6ba-6b92-ff82-b344-e17a9ee818a8">
      <Execution id="71594b60-ae11-442c-8ba0-4ff7b43c70c9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="ValidWifToPrivateKey_ShouldDecodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors2" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a44c85b8-f35a-b67e-c72e-802a946b2b67">
      <Execution id="3b1cee97-2732-45a9-b29d-a85ddfacbc05" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestVectors2" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.Equals_ShouldCompareByScriptHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="29456248-06fd-18a6-b06f-ad49591a0ced">
      <Execution id="1a5bba21-1b8c-4c6e-98c2-21d3ed55489e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="Equals_ShouldCompareByScriptHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeSelection" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ea284b85-8c42-66b5-15ff-c6e3a5198213">
      <Execution id="7c422e4e-55ff-4d4b-83e8-8765e05aefd4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestConstantTimeSelection" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Label_ShouldBeSettable" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c53f1642-5605-a1e9-4f79-ff719abd0c63">
      <Execution id="3099386a-a895-402e-b82a-a890470dfcd8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Label_ShouldBeSettable" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsMemoryUsageCalculation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7d8319eb-03fb-08d3-0f3a-a74ec239d2fe">
      <Execution id="ab412332-1c0f-4bae-a270-70f514dfd330" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsMemoryUsageCalculation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataString_ShouldReadStringsCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="abbaed55-681d-78da-3d42-03ca0b46a976">
      <Execution id="bb2cf451-4db8-4bbf-8092-dd82b80f05cc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadPushDataString_ShouldReadStringsCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteUInt32_ShouldWriteCorrectBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7215a0c9-7676-8e37-e04e-db7c106aeda3">
      <Execution id="ec2b7042-1140-4556-ba8b-84398b21d067" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteUInt32_ShouldWriteCorrectBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleSpecialValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d7400e8a-7d55-2939-6e26-46d7d776b09b">
      <Execution id="99d0a36d-7037-4149-98a7-1e25ce0526b5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushInteger_ShouldHandleSpecialValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.ToArray_ShouldReturnAllWrittenData" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5c8b8879-3785-ed7e-8517-b4801c6cd5ed">
      <Execution id="fbd663a2-741b-41e7-bac1-8fe69e6fcd86" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="ToArray_ShouldReturnAllWrittenData" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Integer&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="05a04dc9-7731-84e7-b9ed-ede4e5c43f86">
      <Execution id="172c2140-81d3-4e8f-b3cb-f1f825162841" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Parse_WithKnownContractHashes_ShouldSucceed(contractHash: &quot;0xef4073a0f2b305a38ec4050e4d3d28bc40ea63f5&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5a4dae1a-21dc-18ed-ce1c-6af1ac37d58c">
      <Execution id="016163f7-6853-403f-ab1a-9e7d13437545" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Parse_WithKnownContractHashes_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_String_ShouldSerializeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3a8dc186-285e-ba06-37ed-700bdc91daf9">
      <Execution id="f86f3752-cf71-42ea-a781-587c4ca009a8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_String_ShouldSerializeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushString_ShouldHandleDifferentSizes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0c17d28a-6ce5-362a-f711-bf5c79224b99">
      <Execution id="e546193d-b16e-411f-b0ae-87526826336a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushString_ShouldHandleDifferentSizes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Equals_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="89d95cf3-c50b-5860-b057-4a39d76baba8">
      <Execution id="9c3a99f5-f02c-4169-a934-105aa6da7d67" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Equals_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Serialize_ShouldWriteLittleEndianBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="28c1a9bf-5a93-c3ad-eea0-bb20680fffa4">
      <Execution id="76de96b6-45b4-451d-a2cd-84478175f093" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Serialize_ShouldWriteLittleEndianBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.GetAddress_ShouldReturnCorrectAddress" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="45d2fbdd-356c-c68c-8b8d-eb409c7fbdd5">
      <Execution id="9f18b5a5-e25d-4cb4-85bd-d86d04187722" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="GetAddress_ShouldReturnCorrectAddress" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsIncompleteJson" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="58ff235e-a3c2-8d16-8f18-a5f78f51d8db">
      <Execution id="3be463b9-1692-407a-921b-c7a4358f5ea9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsIncompleteJson" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarString_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a4ddc36c-736e-2706-b327-6b53ea1cc6d6">
      <Execution id="245e7fa3-a856-4594-828b-ddc96db79c36" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteVarString_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithNullMethod_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="125ad7c0-573e-815a-337e-6925403e5304">
      <Execution id="f3f4bef7-eda1-4c59-8482-622f354211ae" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="BuildInvokeFunctionScript_WithNullMethod_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushArrayEmpty_ShouldCreateNewArray0" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0ed4a6a8-a7ff-3968-5edc-a11fd69e54d9">
      <Execution id="84ffb0d9-acd3-4423-a4ab-d5b05d4b5ee1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushArrayEmpty_ShouldCreateNewArray0" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EmptyInput" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7c596a1b-f03c-10d5-15f5-4962c4c57d6b">
      <Execution id="eab58b7c-805e-464f-b111-0b96f273fac5" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EmptyInput" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;73696d706c792061206c6f6e6720737472696e67&quot;, expectedBase58: &quot;2cFupjhnEsSn59qHXstmK2ffpLv2&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5e8ea83d-a317-e7a9-7c7b-042795e1eff1">
      <Execution id="925526ef-27f6-4669-b2a0-4e97d1822c7b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Parse_WithKnownContractHashes_ShouldSucceed(contractHash: &quot;0xd2a4cff31913016155e38e474a2c06d08be276cf&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dc4a098b-795d-74bb-d48d-bb930ac51271">
      <Execution id="5c2f2db6-7470-4146-98b8-2f043a3c4e82" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Parse_WithKnownContractHashes_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 4096, r: 4, p: 4)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3531bb1c-4b27-a459-4c43-0cfe3ff11658">
      <Execution id="2e5bf273-93aa-477b-857d-9bab93536a24" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsRoundTrip" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Integer_WithInt_ShouldCreateIntegerParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b4da6257-ddc3-4454-c78a-2162fb472e15">
      <Execution id="05dae50f-c2b0-43f6-8e97-1b7e303beca8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Integer_WithInt_ShouldCreateIntegerParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Parse_WithoutPrefix_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a0bebf88-5e02-e146-8258-22cf0fc669cc">
      <Execution id="51a91fa6-2ed8-4b57-9675-87b12cb9d5c6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Parse_WithoutPrefix_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.SignData_ShouldCreateValidSignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7a5cf7da-061e-50b8-db52-35905e76bf20">
      <Execution id="8653ddb3-8b49-4015-8b4c-62a5540b06db" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="SignData_ShouldCreateValidSignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairFromPrivateKey_ShouldGenerateCorrectPublicKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bf7d9fb7-e62a-8966-f152-a6c666e37bf0">
      <Execution id="37e2a3d1-43b9-423f-b693-09a0cbfcdf6e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="KeyPairFromPrivateKey_ShouldGenerateCorrectPublicKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;a3gV&quot;, expectedHex: &quot;626262&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="cebdfbc2-1c44-c355-92fb-f3754bfef121">
      <Execution id="fdcf4a7d-badd-4ecb-8926-19747e606880" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.OpCode_ShouldAddCorrectOpCode" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6eeceb8d-f303-db47-4bc1-99a3fca42609">
      <Execution id="8c630917-8135-4192-a43e-45b9f265081e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="OpCode_ShouldAddCorrectOpCode" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;2g&quot;, expectedHex: &quot;61&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="969475b1-614e-3792-edcc-ede55f705bde">
      <Execution id="244b22fe-5242-4584-bfe8-7854e91794ea" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestSignatureVerification" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="00a25fdc-9b88-3fce-f0ad-b7913fb21618">
      <Execution id="16d151d5-4e2d-4f95-95aa-cf2db3feb044" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestSignatureVerification" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsWithExtraFields" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a808c36a-caa7-39d4-cdb6-d21910c083e8">
      <Execution id="f23b79a1-cb6c-433a-8525-e1f396e8558a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsWithExtraFields" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushBoolean_ShouldCreateCorrectOpCode" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="242ecbf7-6100-e859-58bb-a5d31355fd7f">
      <Execution id="95393441-e1cf-462e-bbca-2657d419a8dd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushBoolean_ShouldCreateCorrectOpCode" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_ForString_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bd7495bc-9b5e-cec7-dd03-e6762280b2fa">
      <Execution id="5e6efb66-822f-4c8f-bf53-aa040541807d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Encode_ForString_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Equals_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e5bc4cef-c9d7-228d-d607-aa84511db155">
      <Execution id="2cdee33a-42c7-4134-a43e-f244da111a8a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Equals_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.FromAddress_WithValidAddress_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f29ca3ea-8044-4bff-f5a2-13a04fd029e4">
      <Execution id="5b911996-b14e-4ca5-8693-05b5644fb2af" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="FromAddress_WithValidAddress_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58RoundTrip" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="90cdd93f-96cb-b0e4-bdfb-41af2a417f44">
      <Execution id="701b97a9-f418-4d6d-a358-d21839b3e57e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58RoundTrip" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.InvalidChecksum_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="510613cb-21e1-a1c9-bb93-eed81a23f6dd">
      <Execution id="cbb4339b-bb28-41af-b017-69dfe833675a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="InvalidChecksum_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4d62d737-01d7-eab8-ec9c-5b7088340c30">
      <Execution id="f35627f1-984d-42c6-a6a7-d0c34c94349d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteVarBytes_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Signature, expectedJson: &quot;Signature&quot;, expectedByte: 23)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="fa3a59df-facb-0618-e063-22bae6a6587f">
      <Execution id="c1f33c23-d0d0-4383-9562-d6f19b40d30c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithNullParameters_ShouldWork" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="91cbf24d-f0bf-6c41-1756-f4dc69567fe4">
      <Execution id="35266081-c8e4-4ea5-abc6-be929087b398" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_WithNullParameters_ShouldWork" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;61&quot;, expectedBase58: &quot;2g&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3ad41eb3-674c-040c-673f-5eb164d827cb">
      <Execution id="0036091b-f2f8-4c47-ab7c-29e9831d46a3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;ABnLTmg&quot;, expectedHex: &quot;516b6fcd0f&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8037f4df-cf2b-6def-7972-b1473d2ac3fc">
      <Execution id="df30c644-c4fe-4995-be6c-b722a16cd283" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;636363&quot;, expectedBase58: &quot;aPEr&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="400f22d6-d2e2-8408-a698-81e6d43f3f42">
      <Execution id="6a192ba0-31a4-4019-b4c1-84989ebc5515" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithDefaultScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="02b756d5-cbae-c1fe-81a7-b40c49aaf7bf">
      <Execution id="d6424393-21b4-4abf-a788-465528fdec45" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestDecryptWithDefaultScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_ShouldDecodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0d10b196-42d5-b32d-b6e6-0a21b3a72aed">
      <Execution id="5232cb0a-a15e-449e-858e-8dfde02fa174" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Decode_ShouldDecodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteInt64_ShouldWriteCorrectBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="98f39cc9-60d5-cddc-419a-d6fad552effe">
      <Execution id="480d42a0-df97-49d9-ba4f-58a90c97fbcc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteInt64_ShouldWriteCorrectBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushParamEmptyArray_ShouldCreateNewArray0" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="76faaf38-4622-4c88-5501-fed78da072ec">
      <Execution id="98ee5991-02a2-491c-998b-ef324b59275a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushParamEmptyArray_ShouldCreateNewArray0" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.NullPrivateKey_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7567889c-89b1-6883-c5eb-0dc4a697c9a2">
      <Execution id="3f627a0b-8edb-4f44-9ea9-ffd1b8810fc9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="NullPrivateKey_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Sign_ShouldCreateValidSignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4b35573e-3a26-d9e4-572f-1869874e4bc6">
      <Execution id="ad07e665-6306-46b6-bc63-98610241b948" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Sign_ShouldCreateValidSignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Equals_ShouldCompareByScriptHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6ec975b5-1579-df12-f95a-68143de38353">
      <Execution id="ea6dd965-7e01-489e-b770-5a870e2b24ff" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Equals_ShouldCompareByScriptHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithNullParameters_ShouldWork" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="00306738-6d37-3b3f-c2d6-1d2023d106ea">
      <Execution id="b46aa6ac-65d5-46e4-bd33-6c2b16cd03dc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="BuildInvokeFunctionScript_WithNullParameters_ShouldWork" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBytes_ShouldReadSpecifiedNumberOfBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d8c28e8f-0978-66b7-aeff-ee6e5f77d9ad">
      <Execution id="cd24a75a-fd1d-4d5a-a4ca-89104ead03aa" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadBytes_ShouldReadSpecifiedNumberOfBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithEmptyMethod_ShouldThrowArgumentException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="49a4d1dc-d639-43e5-b5bf-49f3c902de94">
      <Execution id="f76b018e-9bb4-4924-9a38-302d5da87d52" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="BuildInvokeFunctionScript_WithEmptyMethod_ShouldThrowArgumentException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestWIFImportSecurely" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d09a547b-4f67-e1d1-0bc4-62a721e6d668">
      <Execution id="b6dd5f63-52a0-4869-ac40-8badfc1faf36" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestWIFImportSecurely" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: &quot;{\&quot;cost\&quot;:7,\&quot;blockSize\&quot;:8,\&quot;p\&quot;:9}&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8e1af9cb-da89-d0ea-4636-a773d5d75701">
      <Execution id="4c504923-7b1b-4921-8064-b27934d1aa6c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsJsonVariations" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_WithWhitespaceMethod_ShouldThrowArgumentException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c0a24241-2665-51f1-0378-db611bcd3dd4">
      <Execution id="ee4e5936-9926-498c-9de4-3aad73f5b88a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="BuildInvokeFunctionScript_WithWhitespaceMethod_ShouldThrowArgumentException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.ToLittleEndianArray_ShouldReverseBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="42f0c1d8-472b-225e-839a-1e8337b6f2c9">
      <Execution id="0d148a32-769f-4906-938e-954e5fb51f65" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="ToLittleEndianArray_ShouldReverseBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsStringRepresentation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="66e16570-c643-e3da-6443-21f93e9732be">
      <Execution id="11c02e17-d9aa-4a8b-8931-5babbf09d5e3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsStringRepresentation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Integer_WithBigInteger_ShouldCreateIntegerParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c2bfde30-e914-458b-e340-ab93132a81d3">
      <Execution id="c1b0c861-4877-4f89-ac7c-cad143fa8ed4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Integer_WithBigInteger_ShouldCreateIntegerParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.WronglySizedWifs_ShouldThrowException(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWML&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5521532a-c03d-ff38-db82-2d0010d35d74">
      <Execution id="706b8bac-8ed1-4379-b3b1-f37d422803f2" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="WronglySizedWifs_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Size_ShouldReturn20" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="cf9fb0fd-61f7-dc81-2870-e2efb0a27e99">
      <Execution id="9db37eab-d933-472f-be7a-bc934d737405" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Size_ShouldReturn20" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;626262&quot;, expectedBase58: &quot;a3gV&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="159b95df-fcac-493e-9d02-021648159908">
      <Execution id="86ba4815-b3b2-49d3-b445-5f7293d8918f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 16384, r: 8, p: 8)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0cd0b68b-dc3d-1e65-70c2-00debc90e057">
      <Execution id="2997f5ce-b393-4592-91c9-ab73f9e07e93" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsRoundTrip" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadUInt16_ShouldReadCorrectValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d88f0724-fb18-bcb6-0e7b-5a1ac4859c7c">
      <Execution id="784fed1c-24c3-46a5-af61-a408846e9e73" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadUInt16_ShouldReadCorrectValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignatureWithWrongKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2343f28d-b6f1-ea40-62f5-69bed78cd97b">
      <Execution id="7b1c273e-5fa2-460e-97aa-2a537bd5afc1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignatureWithWrongKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Boolean_ShouldSerializeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="46dc94f7-ad9d-a3be-24f6-15ca29f318c8">
      <Execution id="887116ff-d989-4551-ae0f-4e5990951073" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_Boolean_ShouldSerializeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.ToAddress_ShouldReturnCorrectAddress" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1289e3dd-43be-584e-b51e-23570abe3f5d">
      <Execution id="45e3155c-ed81-4da9-be61-609e55af64bd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="ToAddress_ShouldReturnCorrectAddress" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9462caff-3bcd-cb3a-1143-b324bad75af7">
      <Execution id="c4d76e20-ad34-4e78-b5fe-21f45b9e3ecf" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignVariousMessages" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Hash160, expectedJson: &quot;Hash160&quot;, expectedByte: 20)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b2140eb5-1158-292e-b391-05603b283241">
      <Execution id="578b84cc-b24b-4f23-8435-74cbaac924eb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.ToArray_ShouldReturnBigEndianBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="eb73977e-8f44-f8b8-ed4a-02bb3f4815ba">
      <Execution id="861fd8d5-bad1-4435-bf25-9a98babb1037" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="ToArray_ShouldReturnBigEndianBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.FromWIF_ShouldCreateCorrectAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1c288487-717c-db15-18cd-7065e8403dd8">
      <Execution id="534f3d6c-faf3-4051-9503-7e883fccabbc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="FromWIF_ShouldCreateCorrectAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignatureByteArrayConversion" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f5fc6183-1464-d7b4-9e54-d9f91a9efcb6">
      <Execution id="b6ee372b-afbb-4cd0-8f9a-a8285c96ecbd" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignatureByteArrayConversion" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Equals_WithSameHash_ShouldReturnTrue" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="55512dc9-1dfa-597d-3130-060b23c90329">
      <Execution id="6bd31c3e-8475-495a-9310-36edf662cd1f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Equals_WithSameHash_ShouldReturnTrue" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_ShouldCreateTransactionBuilder" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="459adc09-7f49-1440-4f10-c70a3ca70d53">
      <Execution id="ef8d1ed7-fefb-403e-84a5-ef69aaf2498e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_ShouldCreateTransactionBuilder" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithValidWIF_ShouldReturnTrue" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="93afad43-36e1-d731-837d-ad6d5a7f49c1">
      <Execution id="4e9d9f6b-f8c4-42aa-a705-400545571dc0" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="IsValidWIF_WithValidWIF_ShouldReturnTrue" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeStringComparison" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1c147b09-1397-43a6-8b37-d96f2d1f3ed4">
      <Execution id="b01bdca7-3810-4bbe-bb77-08884b5aad81" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestConstantTimeStringComparison" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Parse_WithRealHashes_ShouldSucceed(hashString: &quot;0xf782c7fde78c1c2b2021d1c0c8f17236d1c68690b96ad884&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bf17d55d-18b3-99d1-0543-d696a261fdc4">
      <Execution id="f6eb1107-40a2-4a64-8bd3-aac4e1e888b8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Parse_WithRealHashes_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.NullPrivateKey_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0a80ec7c-a614-b66a-c381-75aab29fd732">
      <Execution id="102f51dc-96a4-40b0-ae34-06b16cb7601c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="NullPrivateKey_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;ecac89cad93923c02321&quot;, expectedBase58: &quot;EJDM8drfXA6uyA&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bb02b94f-37a8-19ca-090b-2dc88817d8ad">
      <Execution id="2432c8a3-8b40-4c6e-b194-15924c4eac63" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Parse_WithValidHexString_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="954601e0-f9ec-a2d9-0256-f03b3529ae84">
      <Execution id="e653cdce-6ce1-4c3d-987a-509a2992a2ee" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Parse_WithValidHexString_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_ShouldDecryptPrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c9d78f46-4c53-e244-bafd-0d22014fcd87">
      <Execution id="8156ab60-2ca0-4cb1-a3aa-0c885b15fc9f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="DecryptPrivateKey_ShouldDecryptPrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithNullPublicKeys_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0097a575-f2af-f2ad-c169-d76c203c5e13">
      <Execution id="fbb3ab8a-dc14-4fbf-b649-8898e7c0e8ba" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="CreateMultiSigAccount_WithNullPublicKeys_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteBytes_ShouldWriteByteArray" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4867ef49-9b69-7d61-fb16-c1d4ddc1384b">
      <Execution id="97c746c6-5e0b-4d50-8a8e-4b46369c913b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteBytes_ShouldWriteByteArray" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Constructor_WithNullKeyPair_ShouldThrowArgumentNullException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="61724534-4112-de3a-86e6-9c884b4d524d">
      <Execution id="14a41134-a247-4b50-94a1-99d1b56ba265" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Constructor_WithNullKeyPair_ShouldThrowArgumentNullException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestDeserialize" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b985c272-2592-d0e5-e7ac-1705f30801e5">
      <Execution id="71c7c4cd-fc57-4c39-9dc2-9983eeb82551" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestDeserialize" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Constructor_WithExistingKeyPair_ShouldCreateCorrectAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3ed16a39-f753-1684-2bda-2743af606520">
      <Execution id="b8783766-a0bb-4016-95ef-686a0449cc3a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Constructor_WithExistingKeyPair_ShouldCreateCorrectAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;L25kgAQJXNHnhc7Sx9bomxxwVSMsZdkaNQ3m2VfHrnLzKWMLP1&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3d239bfe-c698-b684-dbea-c3fa7475cac3">
      <Execution id="f9af2dbf-17b4-40de-bd63-0dfce38caa6d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="IsValidWIF_WithInvalidWIF_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestNEP2WrongPassword" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e8045b2b-82d5-c4bc-52d0-a2b14899b624">
      <Execution id="9c7572c3-fe04-43ff-89d3-7bed7b682043" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestNEP2WrongPassword" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecodingWithInvalidChecksum" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3458ea21-a5c4-8720-c598-ec4aa2be7d08">
      <Execution id="1cfe091c-31d8-4ee2-a048-a09eeb9618a0" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58CheckDecodingWithInvalidChecksum" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignatureDataEquality" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dd543aac-b9bf-de04-f5f2-6dbf4dce32d7">
      <Execution id="8d39d1e3-b086-4035-9b73-e66e81aa6ec2" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignatureDataEquality" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;10c8511e&quot;, expectedBase58: &quot;Rt5zm&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f5c4f377-4e3e-b2d1-f112-051ef98aaff6">
      <Execution id="1c75f0d0-dc1a-48ed-b1b7-ae3c914ed7f9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.DeterministicKeyGeneration_ShouldBeConsistent" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="513e7ecc-85ad-0979-62bb-1b73ef202de7">
      <Execution id="d49c32f7-7018-4279-8250-1ce96ec9ebb3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="DeterministicKeyGeneration_ShouldBeConsistent" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsValidation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4c1b1419-5c14-80bd-dd63-0cffef6e6b4c">
      <Execution id="53c7f11b-226c-43cc-95b2-6f0ed8e19333" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsValidation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_WithEmptyInput_ShouldReturnEmptyArray" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3261412c-4855-a412-6651-3353475b70d1">
      <Execution id="a42d0f4e-a91d-4c4a-9167-061dac1d9e6f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Decode_WithEmptyInput_ShouldReturnEmptyArray" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.GetAddress_ShouldReturnValidNeoAddress" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ba42f61a-4918-db0a-7057-c08cf25ba397">
      <Execution id="66148e11-30bd-4ad2-9a91-87ad414c7b05" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="GetAddress_ShouldReturnValidNeoAddress" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.BuildInvokeFunctionScript_ShouldCreateCorrectScript" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2563e2a7-4774-1734-682f-9b5a97cf68dd">
      <Execution id="b9fc0269-3576-46d6-8bdc-46c93439961d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="BuildInvokeFunctionScript_ShouldCreateCorrectScript" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;572e4794&quot;, expectedBase58: &quot;3EFU7m&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ab896882-276a-8776-de00-376c160e386c">
      <Execution id="6513d2d8-68fc-487e-8e57-c588eec6f401" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Map&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b0afab83-521d-3bdc-8472-8661a0acaf09">
      <Execution id="8e2318f7-6ce0-48c0-9fae-9a9c43c1ac03" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Any, expectedJson: &quot;Any&quot;, expectedByte: 0)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="54e39a07-b8b3-ea60-fc2e-939b4e8d3e8a">
      <Execution id="1ac0d849-85d8-41a9-bb9e-a5ad3b5491b9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Constructor_WithValidBytes_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="89572e90-84de-bab5-9f95-9bc70fe162d5">
      <Execution id="dc99bddb-555f-473c-bc30-6e983b8c8971" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Constructor_WithValidBytes_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_ShouldCreateCorrectMultiSigAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c064602b-a199-c25b-89df-ce5815c62b71">
      <Execution id="cf716c78-d434-4c3c-97fc-36e874ff7cc9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="CreateMultiSigAccount_ShouldCreateCorrectMultiSigAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecodingWithInvalidCharacters" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d386e6a8-91ed-763e-b3a1-4b62ffed5cf3">
      <Execution id="edbf44c0-553e-4b62-b474-9cffe5442f68" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58CheckDecodingWithInvalidCharacters" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;2cFupjhnEsSn59qHXstmK2ffpLv2&quot;, expectedHex: &quot;73696d706c792061206c6f6e6720737472696e67&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9a19bf8c-2f75-d177-6e9d-60a96d4a88db">
      <Execution id="1aa4c7f7-f51b-4d33-81aa-2c6c29a10aee" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.EncryptPrivateKey_ShouldEncryptPrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0aff520c-12c7-ea64-ba02-ff6e8d29b49f">
      <Execution id="061fd82f-8562-49a2-bcbe-c60256874bae" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="EncryptPrivateKey_ShouldEncryptPrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: String, expectedJson: &quot;String&quot;, expectedByte: 19)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c813b430-2229-8354-72e9-cc990737510e">
      <Execution id="3d946b18-4087-4776-9242-fa449a466646" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2WithDifferentScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e00d70fb-44f8-7b36-8e1e-0ef0429966ac">
      <Execution id="057ff842-7d9c-4a88-901e-4c15de7a717e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestNEP2WithDifferentScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Hash160_ShouldCreateHash160Parameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7b266048-0978-0a8c-a97a-95543f8ed20d">
      <Execution id="24315a28-45a3-4f19-a32f-2c5d48ce5fa7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Hash160_ShouldCreateHash160Parameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.ContractCall_ShouldCreateCorrectScript" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="78f352c5-3b6e-fb0e-98ff-03ea8c6b439a">
      <Execution id="379dd9db-f836-4c32-88fc-f0233b02514f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="ContractCall_ShouldCreateCorrectScript" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckDecoding" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dc528239-1430-c276-350b-70d67eb64991">
      <Execution id="ad734f12-fb8c-4a30-9282-22dec5454860" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58CheckDecoding" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestInvalidSignatureVerification" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b151b523-5c65-459c-1a05-18b8bbbf66f9">
      <Execution id="7032339b-8821-47a4-b14d-e774085d4621" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestInvalidSignatureVerification" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestConstantTimeByteComparison" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a7973589-6615-ff59-0718-69a2453e4a2e">
      <Execution id="02a7fac9-3238-45f8-9bd4-94595cab6f5d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestConstantTimeByteComparison" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestVerifySignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="fe050ba5-2379-58fd-0cae-82b0659a2b6d">
      <Execution id="412ce2d2-dd8d-47e3-b6cd-cfbdc8d02d7f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestVerifySignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromPoint_ShouldCreateCorrectKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="09e10194-f968-2de2-e0b9-66d7f6ba2e02">
      <Execution id="08475e08-9db7-4f25-a6ea-ebb33701d95b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="NewPublicKeyFromPoint_ShouldCreateCorrectKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarInt_ShouldReadVariableIntegers" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="723e2c01-0ca0-a41a-c68a-e34ac45318ce">
      <Execution id="41acbb7b-33e9-423f-93b2-db4532d800c7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadVarInt_ShouldReadVariableIntegers" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestCryptographicRandomness" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="54257088-ee8c-40f1-c5ba-2f061684eb74">
      <Execution id="42f5d502-8fde-4ea8-bb1e-50a1d80de71a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestCryptographicRandomness" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.InvalidPrivateKeyLength_ShouldThrowWIFException(length: 31)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a725406b-a2e9-2dd0-1f6b-0aa81740b95d">
      <Execution id="ac8d8d6b-91f9-4731-9565-1753e2b0289d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="InvalidPrivateKeyLength_ShouldThrowWIFException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushInteger_ShouldHandleVeryLargeNumbers" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b097dbb8-c1a9-a4fd-8dd1-eb21b696c11d">
      <Execution id="b8d9c716-1a4d-4e2b-b805-cba76c003c85" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushInteger_ShouldHandleVeryLargeNumbers" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Encode_WithUtf8String_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1d0b1407-50e3-9faa-1e3c-031be37d7e48">
      <Execution id="dd61d74a-283f-41ae-b54b-e182076961ae" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Encode_WithUtf8String_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithWrongPassword" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="36429002-8d89-ea56-e975-9c33a5aedcfa">
      <Execution id="03ff9497-ca45-4c49-8503-b472bded7fed" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestDecryptWithWrongPassword" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteNullableBytes_ShouldHandleNullValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3d1072a3-d564-79e2-b111-feb2d4c2120c">
      <Execution id="c874db28-7215-41f3-ac59-91a9e5a75354" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteNullableBytes_ShouldHandleNullValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: ByteArray, expectedJson: &quot;ByteArray&quot;, expectedByte: 18)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ee08edbe-4c15-84de-05db-9a33d9ce21b4">
      <Execution id="f75d99c0-5976-4141-a25f-a2905053fed7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;bf4f89001e670274dd&quot;, expectedBase58: &quot;3SEo3LWLoPntC&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="1bbd0f7b-de32-4350-357e-2b738932497b">
      <Execution id="20cc9730-111f-4bdb-9adf-dceaa20157e8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;\ud83d\udd10\ud83d\udd11\ud83d\udc8e&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8920274a-5d15-dd80-35c4-6ef25156aa22">
      <Execution id="70efdb98-821d-430a-bde7-d261ceb7d009" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestVariousPasswords" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;password&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ec4a4449-1424-a7ee-e040-db656a90d838">
      <Execution id="baafca7c-c8f4-40a3-9dba-436b5ab369f7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestVariousPasswords" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignDifferentMessages" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a8d17546-f6ae-34d4-9e27-95bbfd5e1d33">
      <Execution id="3a2f7d1c-0049-476b-abea-45b316a0659c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignDifferentMessages" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7e022a46-3a6a-f120-12f8-5e2c3f2247c2">
      <Execution id="41dac500-6ccd-40b7-8dcd-4d8985109e3b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestInvalidNEP2Format" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2f9efc0b-2b51-e1f2-b995-c9e4d27be7ef">
      <Execution id="e0e72adf-f5e9-46f3-bb6a-a62455250b97" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestInvalidNEP2Format" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_Collections_ShouldBeDetected" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dcb9e996-abcc-94c1-715a-a881c7c87d00">
      <Execution id="997a845c-eaf6-4d06-bdba-9ebf7e7ee28f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_Collections_ShouldBeDetected" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Script.ScriptBuilderTests.PushByteArray_ShouldHandleDifferentSizes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8c8e5669-cac9-8cd2-8cb1-9da59e2f22d4">
      <Execution id="e36cd89e-835f-4038-98aa-71eea12406e7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Script.ScriptBuilderTests" name="PushByteArray_ShouldHandleDifferentSizes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsEquality" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9c0fb039-5409-8e27-4cbc-4bb910228eab">
      <Execution id="34d44a2d-00a7-46ee-b4bd-7d8b1722d4dc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsEquality" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.Length_ShouldReturnCorrectLength" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="101a5c4c-d35c-9c36-c5db-34a72d861be1">
      <Execution id="602effb9-bee9-4a0a-b544-2772cf56a3ee" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="Length_ShouldReturnCorrectLength" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnTrueForAccountsWithoutPrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="30cb0310-de3e-88ff-8f97-159661e8875a">
      <Execution id="d33ca23b-f960-4d19-894f-3056f51527b7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="IsWatchOnly_ShouldReturnTrueForAccountsWithoutPrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsPerformanceRelativeTime" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7152b94d-2d9b-e310-2aa2-69d02bf45611">
      <Execution id="d7582ae2-6653-4e0a-ab54-28aa5417f37d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestScryptParamsPerformanceRelativeTime" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.ToLittleEndianArray_ShouldReverseBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4cd92221-df49-90c6-39a3-365e787a59a6">
      <Execution id="82d3dd65-1ad7-4f86-98ff-ee052f121384" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="ToLittleEndianArray_ShouldReverseBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;TmVv&quot;, originalText: &quot;Neo&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="2a8abbfe-1496-ae71-1450-b38c0db53bfc">
      <Execution id="3d57fa6e-4b36-4346-984c-438c40134d78" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64RoundTrip_ShouldPreserveData" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;&quot;, expectedBase58: &quot;&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="920e6c5d-9623-aca6-54e1-2a6db20518e7">
      <Execution id="267dfa9b-9ab4-45fa-b5f2-41858240e30b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairSigning_ShouldProduceValidSignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0a93bcd0-fc6a-56a2-32f3-61add043fee9">
      <Execution id="369ece6c-3472-49ca-83c8-2a6c05e22e9e" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="KeyPairSigning_ShouldProduceValidSignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestSecureBytesCreation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="35384949-bc6d-881c-1268-c51617a75afb">
      <Execution id="806ec3a0-6d6a-4e56-b80c-8c29eb0a85d7" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestSecureBytesCreation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: PublicKey, expectedJson: &quot;PublicKey&quot;, expectedByte: 22)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="caf3251d-1749-3055-5c33-0c4dbf193eaf">
      <Execution id="2e401c65-54dc-4ee3-a917-c4db5c5a976f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignMessage" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a3ae36ff-fb49-636b-3f78-195a1ca621d2">
      <Execution id="963db483-c736-4dc4-90ec-8d0217e8c585" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignMessage" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Hash256_ShouldCreateHash256Parameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="78244beb-de60-cebe-d71b-1d69e6c372ee">
      <Execution id="acb3d4fa-3259-4753-95a1-87a4e43fbd05" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Hash256_ShouldCreateHash256Parameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L&quot;, expectedHex: &quot;00eb15231dfceb60925886b67d065299925915aeb172c06647&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="27f2afbd-9f07-3545-d5d6-b28952ebdfd1">
      <Execution id="ba070735-fbb9-442a-822b-01bad41b0a48" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_AllValues_ShouldHaveCorrectProperties(paramType: Map, expectedJson: &quot;Map&quot;, expectedByte: 34)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="39b5d22d-0067-e3ff-d99c-706c8284a251">
      <Execution id="b55b6698-a1ad-4c61-a8c7-e6730aca24f1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_AllValues_ShouldHaveCorrectProperties" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.TransactionAttributeType_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="18b7722c-b2a8-52c1-cddc-92860b3f2b90">
      <Execution id="3f9ed98e-e758-45cc-8e07-0bb2e9572d2c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="TransactionAttributeType_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;QmxvY2tjaGFpbg==&quot;, originalText: &quot;Blockchain&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="76bfe392-7fcd-a802-9e94-5d9cc9e08f66">
      <Execution id="abb8118a-fc65-485b-afdd-04ca16752534" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64RoundTrip_ShouldPreserveData" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.Reset_ShouldClearBuffer" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0631d2fe-14c3-645d-b7f2-ea6ec366fdbe">
      <Execution id="9b701f6c-6066-4b92-833b-ef7746f7405c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="Reset_ShouldClearBuffer" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestRandomNumberGeneration" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="41b47b25-71b8-a5de-187b-e2ea18a5bea5">
      <Execution id="d5b6407b-e18c-4ff8-b29e-c808943698b3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestRandomNumberGeneration" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.Constructor_ShouldSetScriptHashCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="fb9c5acf-a0a4-9474-e2d6-b90acdb6038f">
      <Execution id="00ff6d74-cb9e-4595-8914-0a89959d0ccb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="Constructor_ShouldSetScriptHashCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadVarString_ShouldReadVariableString" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="647ae2db-69ed-a458-f9b2-e1ff03e6988f">
      <Execution id="cc261263-fa0b-4982-99e9-922473c25759" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadVarString_ShouldReadVariableString" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyEquality_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e20dd4bc-1076-9b08-911a-53745c946843">
      <Execution id="4bb6dde2-8df9-40f1-99ec-9b24565ee027" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="PublicKeyEquality_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58CheckEncoding" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a0d97b46-0458-3af4-f41c-5d33a12c3635">
      <Execution id="f33c0155-8b90-4e35-bf8d-6235e94673e1" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58CheckEncoding" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithEmptyMethod_ShouldThrowArgumentException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6a1a42d1-c8ac-745c-9a41-f4fb54483f96">
      <Execution id="d0f27ab6-c16c-453b-bc0b-bfb8ccab5e78" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_WithEmptyMethod_ShouldThrowArgumentException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Integer_ShouldSerializeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5a36d705-aa38-507a-4b32-976bc129677f">
      <Execution id="69bc25f1-d9ba-44ee-a416-8c80e5b8f224" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_Integer_ShouldSerializeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2KeyChecksumValidation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="05f8f41f-2a0a-483a-d80a-d63002f27122">
      <Execution id="e93ef869-6e08-4d53-aad9-d9929254b16f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestNEP2KeyChecksumValidation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="33843bfb-59e0-4d8b-1700-315e81e57341">
      <Execution id="714454cc-9629-4beb-93a5-58b70a8b40f4" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;Rt5zm&quot;, expectedHex: &quot;10c8511e&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="37ed753f-fb31-f836-a9b4-732002d7c58a">
      <Execution id="30e9c147-3a6f-412d-8391-ebeef853c867" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestDefaultScryptParams" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="150e6074-80a7-605c-4217-a3ae543d9419">
      <Execution id="035e3cdd-21ba-430e-81cf-47ae6827e341" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestDefaultScryptParams" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Contract.SmartContractTests.InvokeFunction_WithEmptyString_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6a5e6311-a3da-999b-519f-c3f8d768df61">
      <Execution id="11a281ce-258e-419a-8223-5e1d750fd204" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Contract.SmartContractTests" name="InvokeFunction_WithEmptyString_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Constructor_WithValidBytes_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c945ab89-80df-493f-f507-df688cdfc95f">
      <Execution id="e1855bee-2a19-4699-879a-16f9a5d7a7bc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Constructor_WithValidBytes_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingKnownValues(hexInput: &quot;00eb15231dfceb60925886b67d065299925915aeb172c06647&quot;, expectedBase58: &quot;1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0c0c4f0b-af88-b5f0-9da0-491f9d254775">
      <Execution id="2011be17-f605-4b69-bf45-3197c993b4de" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Parse_WithValidHexString_ShouldCreateHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="66248bda-3701-ca80-1735-652ce46c5d20">
      <Execution id="47b7f270-408c-4fc5-97ad-480b47884120" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Parse_WithValidHexString_ShouldCreateHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairVerification_ShouldVerifyOwnSignature" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="46948e2c-121d-478f-8491-eb42ecb316c0">
      <Execution id="a892b8b5-7b51-4a05-8dd0-310f39c661f6" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="KeyPairVerification_ShouldVerifyOwnSignature" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestRoundTripEncryptionDecryption" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="47faf41c-250f-3921-1a8f-8cb28a6d80ff">
      <Execution id="973c7bae-ccfd-4f37-80b3-b2c8893e7d37" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestRoundTripEncryptionDecryption" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromStringWithInvalidSize_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e29c4f29-7204-f094-f66e-43917242093b">
      <Execution id="6a59b3cd-e070-4a72-a431-a910b8eaa680" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="NewPublicKeyFromStringWithInvalidSize_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Create_ShouldCreateValidGenericAccount" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7fd0c204-7b22-7b74-17fd-4cc34182ba94">
      <Execution id="7b9ac804-df52-4bf2-bcdd-cf7ca3ff9b6f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Create_ShouldCreateValidGenericAccount" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestSecureMemoryZeroing" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="3a16c4e1-d197-ae08-4046-bd7faac128bf">
      <Execution id="0db9580b-522a-4fcd-ba1f-631113ca7916" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestSecureMemoryZeroing" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;EJDM8drfXA6uyA&quot;, expectedHex: &quot;ecac89cad93923c02321&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="763e5af7-a89f-7243-f04b-0e0023b5d5cf">
      <Execution id="74e0de80-b919-469d-ab2d-0a3d11c527ff" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64Decode_WithInvalidInput_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="180b2260-9f10-8804-ff19-b6ea3fa61d5c">
      <Execution id="f1efe92e-35e1-4b3b-8d4e-c8ba87373aff" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64Decode_WithInvalidInput_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignatureDataFromBytes" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5a39d779-7003-bdf3-d546-1b77b3f14d9c">
      <Execution id="96a63b0c-08f7-4d8b-b3d0-cb2c3776ec2c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignatureDataFromBytes" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromSignedMessage" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="745556e0-6207-6405-cb05-73e41479d01b">
      <Execution id="6e6e400c-0410-41ca-9698-ccfa0d00907c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestPublicKeyFromSignedMessage" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58DecodingKnownValues(base58Input: &quot;3SEo3LWLoPntC&quot;, expectedHex: &quot;bf4f89001e670274dd&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="b1072d1f-7873-6c4a-c503-939a854d65f7">
      <Execution id="b87b412d-3798-4a6e-bfc5-2715379815c3" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58DecodingKnownValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.Array_ShouldCreateArrayParameter" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f3e83804-4bfc-b256-1868-00b97a2ebe4b">
      <Execution id="aea5e2b0-eed2-45cc-8d4f-c5cfe70a99eb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="Array_ShouldCreateArrayParameter" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Constructor_WithInvalidHex_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c130288d-a9d4-34a1-8371-13344ddcfeae">
      <Execution id="0b89179d-3a87-4a8d-be5e-fb24c1e4620a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Constructor_WithInvalidHex_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash160Tests.Constructor_WithInvalidLength_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8c07b406-fe7d-69af-02cd-d9ef9d9292a2">
      <Execution id="bd1692bd-9c09-4621-b46c-3ccb3439fb94" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash160Tests" name="Constructor_WithInvalidLength_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.GetScriptHash_ShouldReturnCorrectHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="9a7d42b9-5bb8-9a73-719c-d3d0d3f66968">
      <Execution id="dae3f294-badc-460e-9bb2-1a50e2f0629d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="GetScriptHash_ShouldReturnCorrectHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.Hash256Tests.Parse_WithRealHashes_ShouldSucceed(hashString: &quot;0x668e0c1f9870f61d45b8a91c77585e468c22c1216c5d6f94&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ed490758-ac9d-30c7-6c35-31dda870b5e6">
      <Execution id="d3ef7427-4ec8-472b-ad19-be18896c3d88" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.Hash256Tests" name="Parse_WithRealHashes_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.Sign_WithLockedAccount_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="d9db7865-5d01-a38d-f8ab-fec80d4cd58f">
      <Execution id="6f757bdb-699d-430d-beec-8a9d718869cc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="Sign_WithLockedAccount_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed(jsonValue: &quot;Array&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="498133df-5339-0fec-7f10-6cd5a987c16c">
      <Execution id="ac957922-5244-4826-9623-64178c8eb8df" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="ContractParameterType_FromJsonValue_WithValidValues_ShouldSucceed" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: &quot;VeryLongPasswordWithSpecialCharacters!@#$%^&amp;*()_+-&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="4f32cb3d-de52-e96e-9283-a46161e53f2c">
      <Execution id="b0c87f73-28d9-464e-9bb0-72c6c7d375fb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.NEP2Tests" name="TestVariousPasswords" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(compressed: False)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="46e9ff7c-0efc-b9b8-9dfa-b389ab865583">
      <Execution id="31536ea7-7b91-47c4-aee6-8c2f018d64bb" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="CompressedFlag_ShouldBeHandledCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromPrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ec366ec3-cbab-e25c-b165-80f003a5a779">
      <Execution id="22cd30a5-7b28-42f1-af6a-36973ded86cc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestPublicKeyFromPrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBytes_ShouldReadCorrectlyBasedOnPrefix" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="5275f261-f731-19c7-4b6e-434e6bc2d08d">
      <Execution id="af479630-c34c-4200-bd86-b633851e04d9" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadPushDataBytes_ShouldReadCorrectlyBasedOnPrefix" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;This is a longer message that tests the signing al&quot;···)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="04c472f2-f8b9-2afb-de0f-fb57b66e6f05">
      <Execution id="b921b94d-3ced-40ae-9b4f-098e747fab52" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignVariousMessages" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base58Tests.TestBase58EncodingForValidStrings" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="42da5785-dc68-eb06-6258-986f8c7b7a9d">
      <Execution id="9a24ddab-089c-44f4-828e-f44a388c8b7c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base58Tests" name="TestBase58EncodingForValidStrings" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Wallet.AccountTests.IsDefault_ShouldReflectWalletState" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="76598d68-aeac-8776-2f3e-2dda3a9a5fce">
      <Execution id="d7880191-7f32-4117-8bd9-9c2128a64f61" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Wallet.AccountTests" name="IsDefault_ShouldReflectWalletState" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestVectors3" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="37b43959-e293-89a7-a436-5db3f7c6bca6">
      <Execution id="c57b0d88-a906-42d2-bc25-df3a342d7df8" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestVectors3" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e1772adc-4111-9752-4572-923cbd634c5b">
      <Execution id="4b9a4752-efab-45e5-b5eb-a1484eb7b481" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryWriterTests" name="WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.RoundTrip_ShouldPreservePrivateKey" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="beaeae1a-5663-5159-f554-4cb8ce24af1b">
      <Execution id="c2e0ff23-62a1-4330-9512-25be86a49b47" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="RoundTrip_ShouldPreservePrivateKey" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ScryptParamsTests.TestSerialize" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="c059a965-96a2-5f6a-33b0-65d3371d6856">
      <Execution id="d84bb336-233a-45ba-aa4a-eb60a2aa0bbc" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ScryptParamsTests" name="TestSerialize" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBigInteger_ShouldReadNumbersCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="709b4022-f285-904a-2c89-b604766b2030">
      <Execution id="00f0e3ac-b742-4dc4-9fb4-f6ed5064867d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadPushDataBigInteger_ShouldReadNumbersCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.WrongFirstByteWif_ShouldThrowException" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="26f25596-6bcf-2aa2-0a70-f62cab760fd9">
      <Execution id="6e8fb8f2-2b65-49a1-9cc5-7263e947f21c" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="WrongFirstByteWif_ShouldThrowException" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SecurityTests.TestNEP2EncryptionDecryption" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="7e18d156-c166-d1dc-3710-de7645360064">
      <Execution id="8e8acd5c-89b1-4c2d-884d-d305d7721135" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SecurityTests" name="TestNEP2EncryptionDecryption" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestRecoverSigningScriptHash" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6861b503-9934-6890-ab3d-e56aa077c1aa">
      <Execution id="895f1284-9b12-46d4-a44f-980cb17bd542" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestRecoverSigningScriptHash" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyInequality_ShouldWorkCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="6ab66c03-5ab2-3e1f-187f-860a3bcb8043">
      <Execution id="40e3a52c-7372-45d3-99cf-cd51b264ec38" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.ECKeyPairTests" name="PublicKeyInequality_ShouldWorkCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Base64Tests.Base64RoundTrip_ShouldPreserveData(expectedBase64: &quot;SGVsbG8gV29ybGQ=&quot;, originalText: &quot;Hello World&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="f923296d-aa35-93a8-537c-cce656a0fadd">
      <Execution id="5a64ffba-c5a5-400f-b26f-74fd7763d478" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Base64Tests" name="Base64RoundTrip_ShouldPreserveData" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: &quot;Hello World&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="bf835e73-1c1d-3036-1ae1-abe8be46c4ee">
      <Execution id="1a6e82e3-5b37-4d66-b110-a5734bec9f3b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.SignTests" name="TestSignVariousMessages" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadByte_ShouldReadSingleByte" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="a7471f80-cbf9-8a3c-4135-e8764bf5beac">
      <Execution id="a336b5a9-943a-4596-be81-cd2bb88ada3f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadByte_ShouldReadSingleByte" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadUInt32_ShouldReadCorrectValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="651bb81c-b2c1-0179-60d9-76ea480286e6">
      <Execution id="ee029680-6661-423d-abe9-dbd5ce22d09d" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadUInt32_ShouldReadCorrectValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.WIFTests.IsValidWIF_WithInvalidWIF_ShouldReturnFalse(invalidWif: &quot;&quot;)" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="ebf5a56a-f7f7-6329-0fdd-d1c186256e6a">
      <Execution id="59f914b8-0c53-460d-b6ff-67c89929fc3b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.WIFTests" name="IsValidWIF_WithInvalidWIF_ShouldReturnFalse" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.ContractParameterTests.ToJson_Array_ShouldSerializeCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="e70b8920-102c-2c49-870e-b83b646da4cf">
      <Execution id="a8e62ca1-aa7c-4d9c-a0f9-14ce4d61142b" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.ContractParameterTests" name="ToJson_Array_ShouldSerializeCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Types.EnumTypeTests.OpCode_ShouldHaveCorrectByteValues" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="8f7f6552-5520-b454-97d1-e1ac4c03bd80">
      <Execution id="d7b07132-a977-474c-adb5-1d402c922e3f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Types.EnumTypeTests" name="OpCode_ShouldHaveCorrectByteValues" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.Position_ShouldTrackCurrentPosition" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="dbf23bcc-10fe-b4f8-bdba-93a8f4169160">
      <Execution id="d4dee360-a57b-4702-878d-965e151de344" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="Position_ShouldTrackCurrentPosition" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestHardenedDerivation" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="0f5e07ad-4979-2fa5-f6e0-8e5750b169fc">
      <Execution id="d3e364b7-daa1-4143-bc03-67a8c3ab094a" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestHardenedDerivation" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBigInteger_ShouldReadCorrectly" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="89f9964d-c6bd-f1e1-c61d-b736a8b08ce9">
      <Execution id="6714b2ea-9908-4544-9239-77083a5cd325" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Serialization.BinaryReaderTests" name="ReadBigInteger_ShouldReadCorrectly" />
    </UnitTest>
    <UnitTest name="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests.TestMasterKeyGeneration(seedHex: &quot;000102030405060708090a0b0c0d0e0f&quot;, path: [])" storage="/home/ubuntu/neoswift/neosharp/tests/neosharp.tests/bin/debug/net9.0/neosharp.tests.dll" id="56fd0b33-b60a-b29a-95b2-a281082a22a7">
      <Execution id="bcb56b75-e8d2-4616-91f3-869110820e9f" />
      <TestMethod codeBase="/home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/bin/Debug/net9.0/NeoSharp.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="NeoSharp.Tests.Crypto.Bip32ECKeyPairTests" name="TestMasterKeyGeneration" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="2563e2a7-4774-1734-682f-9b5a97cf68dd" executionId="b9fc0269-3576-46d6-8bdc-46c93439961d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8dc7aaf8-eccc-25c6-3e3b-36a084427ca9" executionId="dbecef4f-7511-4dde-942b-753dcd7fc64e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45d2fbdd-356c-c68c-8b8d-eb409c7fbdd5" executionId="9f18b5a5-e25d-4cb4-85bd-d86d04187722" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8920274a-5d15-dd80-35c4-6ef25156aa22" executionId="70efdb98-821d-430a-bde7-d261ceb7d009" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b097dbb8-c1a9-a4fd-8dd1-eb21b696c11d" executionId="b8d9c716-1a4d-4e2b-b805-cba76c003c85" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7215a0c9-7676-8e37-e04e-db7c106aeda3" executionId="ec2b7042-1140-4556-ba8b-84398b21d067" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0c0998a-02c2-d6bb-d7e3-38a411a27bd4" executionId="15fdab1b-18eb-476c-9300-ce8ac711b9ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="deb531c7-2015-a88f-674c-68295032b174" executionId="5cf1afc1-10a7-455b-8dd0-64caf622050c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a7d42b9-5bb8-9a73-719c-d3d0d3f66968" executionId="dae3f294-badc-460e-9bb2-1a50e2f0629d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d8c28e8f-0978-66b7-aeff-ee6e5f77d9ad" executionId="cd24a75a-fd1d-4d5a-a4ca-89104ead03aa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ab66c03-5ab2-3e1f-187f-860a3bcb8043" executionId="40e3a52c-7372-45d3-99cf-cd51b264ec38" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89cd3ca8-497c-6040-13f0-10f5cb59f90d" executionId="4445f8bf-09ac-438a-9537-e5013c111a5d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35966a0e-660b-4e81-3caf-977868899497" executionId="bbc1e07c-cd51-40b6-867d-ffb3e96fd5de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="125ad7c0-573e-815a-337e-6925403e5304" executionId="f3f4bef7-eda1-4c59-8482-622f354211ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7a5cf7da-061e-50b8-db52-35905e76bf20" executionId="8653ddb3-8b49-4015-8b4c-62a5540b06db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="520fc664-9814-ee48-7c06-87170716aa83" executionId="0bff371d-6a11-4322-af12-2bac455dc5cf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="26db6d8c-2b9b-41b0-9243-370f8164f8a8" executionId="0ff42af3-f13b-44b1-a63f-af3fb12dd247" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b1072d1f-7873-6c4a-c503-939a854d65f7" executionId="b87b412d-3798-4a6e-bfc5-2715379815c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d0b1407-50e3-9faa-1e3c-031be37d7e48" executionId="dd61d74a-283f-41ae-b54b-e182076961ae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7973589-6615-ff59-0718-69a2453e4a2e" executionId="02a7fac9-3238-45f8-9bd4-94595cab6f5d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54e39a07-b8b3-ea60-fc2e-939b4e8d3e8a" executionId="1ac0d849-85d8-41a9-bb9e-a5ad3b5491b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c059a965-96a2-5f6a-33b0-65d3371d6856" executionId="d84bb336-233a-45ba-aa4a-eb60a2aa0bbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="954601e0-f9ec-a2d9-0256-f03b3529ae84" executionId="e653cdce-6ce1-4c3d-987a-509a2992a2ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a808c36a-caa7-39d4-cdb6-d21910c083e8" executionId="f23b79a1-cb6c-433a-8525-e1f396e8558a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e29c4f29-7204-f094-f66e-43917242093b" executionId="6a59b3cd-e070-4a72-a431-a910b8eaa680" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf17d55d-18b3-99d1-0543-d696a261fdc4" executionId="f6eb1107-40a2-4a64-8bd3-aac4e1e888b8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0d97b46-0458-3af4-f41c-5d33a12c3635" executionId="f33c0155-8b90-4e35-bf8d-6235e94673e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0afab83-521d-3bdc-8472-8661a0acaf09" executionId="8e2318f7-6ce0-48c0-9fae-9a9c43c1ac03" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0522e2ba-d5d4-2a3d-66cc-29afc357df8a" executionId="d60e49c9-dc25-450c-8e1b-3ffd622f1582" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca4fe77c-4e86-9f45-1b70-049fdc1c1239" executionId="4091a2fd-419d-4b85-b16e-a3cac3b70572" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66e16570-c643-e3da-6443-21f93e9732be" executionId="11c02e17-d9aa-4a8b-8931-5babbf09d5e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0ed4a6a8-a7ff-3968-5edc-a11fd69e54d9" executionId="84ffb0d9-acd3-4423-a4ab-d5b05d4b5ee1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec366ec3-cbab-e25c-b165-80f003a5a779" executionId="22cd30a5-7b28-42f1-af6a-36973ded86cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="150e6074-80a7-605c-4217-a3ae543d9419" executionId="035e3cdd-21ba-430e-81cf-47ae6827e341" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77fc752b-8f45-9e78-5b84-e90ebc566278" executionId="f0fb5e2d-a3fa-45f8-ae09-c663b252b045" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a04a0f39-a134-c31e-63fa-5c0df3d76221" executionId="bf5c8946-5a8a-493d-9854-189c3d770097" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e20dd4bc-1076-9b08-911a-53745c946843" executionId="4bb6dde2-8df9-40f1-99ec-9b24565ee027" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4867ef49-9b69-7d61-fb16-c1d4ddc1384b" executionId="97c746c6-5e0b-4d50-8a8e-4b46369c913b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ac899e7c-3b9d-efbd-e46c-1925a05dd291" executionId="68185980-39b1-4453-a4db-7ea784301507" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="06f81819-3fd4-bb37-39ac-53fe9c4dccb5" executionId="0e066bd5-b304-46f0-a6ec-0f795da40ebd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6eeceb8d-f303-db47-4bc1-99a3fca42609" executionId="8c630917-8135-4192-a43e-45b9f265081e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="35384949-bc6d-881c-1268-c51617a75afb" executionId="806ec3a0-6d6a-4e56-b80c-8c29eb0a85d7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0bebf88-5e02-e146-8258-22cf0fc669cc" executionId="51a91fa6-2ed8-4b57-9675-87b12cb9d5c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="36429002-8d89-ea56-e975-9c33a5aedcfa" executionId="03ff9497-ca45-4c49-8503-b472bded7fed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="137931c0-8691-6fca-7f01-9635ba02a966" executionId="49823c45-88ba-4a8c-90c8-261e4369e788" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c288487-717c-db15-18cd-7065e8403dd8" executionId="534f3d6c-faf3-4051-9503-7e883fccabbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3ae36ff-fb49-636b-3f78-195a1ca621d2" executionId="963db483-c736-4dc4-90ec-8d0217e8c585" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ad41eb3-674c-040c-673f-5eb164d827cb" executionId="0036091b-f2f8-4c47-ab7c-29e9831d46a3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a36d705-aa38-507a-4b32-976bc129677f" executionId="69bc25f1-d9ba-44ee-a416-8c80e5b8f224" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0631d2fe-14c3-645d-b7f2-ea6ec366fdbe" executionId="9b701f6c-6066-4b92-833b-ef7746f7405c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="513e7ecc-85ad-0979-62bb-1b73ef202de7" executionId="d49c32f7-7018-4279-8250-1ce96ec9ebb3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3e83804-4bfc-b256-1868-00b97a2ebe4b" executionId="aea5e2b0-eed2-45cc-8d4f-c5cfe70a99eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b266048-0978-0a8c-a97a-95543f8ed20d" executionId="24315a28-45a3-4f19-a32f-2c5d48ce5fa7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47219b03-e477-2ce4-e2b2-e738b7e057c5" executionId="4aed0f98-cf59-4058-b27b-e803348dbf7a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="af020ac1-365f-b7eb-a431-ac7da1a55d0e" executionId="f57ed279-0ab2-49f3-9448-df37d132750c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92594ce4-a29a-2f60-6b95-8de7cbb18821" executionId="65825c97-4051-48fc-8bfb-58d5215dd893" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5fc6183-1464-d7b4-9e54-d9f91a9efcb6" executionId="b6ee372b-afbb-4cd0-8f9a-a8285c96ecbd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea24ca3c-4e72-8267-eca6-49c11c381c9b" executionId="742717e8-8148-46e7-a044-b321dace141e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37ed753f-fb31-f836-a9b4-732002d7c58a" executionId="30e9c147-3a6f-412d-8391-ebeef853c867" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bbd40c50-138a-242f-0a1a-f5146e72bc55" executionId="ced0221a-8cdc-44b0-956e-39441f879255" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c064602b-a199-c25b-89df-ce5815c62b71" executionId="cf716c78-d434-4c3c-97fc-36e874ff7cc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb9dbead-6581-a40e-326f-bb7f29555d11" executionId="aca8545f-4346-4f9d-8d41-4ded5216e744" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42f0c1d8-472b-225e-839a-1e8337b6f2c9" executionId="0d148a32-769f-4906-938e-954e5fb51f65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05a04dc9-7731-84e7-b9ed-ede4e5c43f86" executionId="172c2140-81d3-4e8f-b3cb-f1f825162841" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ebf5a56a-f7f7-6329-0fdd-d1c186256e6a" executionId="59f914b8-0c53-460d-b6ff-67c89929fc3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0fece1f-9b44-eed0-6d57-25d33d60c993" executionId="c3e04221-fdd3-43dd-b73b-4a873e967041" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a19bf8c-2f75-d177-6e9d-60a96d4a88db" executionId="1aa4c7f7-f51b-4d33-81aa-2c6c29a10aee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a5f85e1f-a238-e2d3-1bc1-0d79eff381b9" executionId="52ed5229-73a5-4bd5-b0e3-b2ec2e160100" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a8dc186-285e-ba06-37ed-700bdc91daf9" executionId="f86f3752-cf71-42ea-a781-587c4ca009a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05f8f41f-2a0a-483a-d80a-d63002f27122" executionId="e93ef869-6e08-4d53-aad9-d9929254b16f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4b35573e-3a26-d9e4-572f-1869874e4bc6" executionId="ad07e665-6306-46b6-bc63-98610241b948" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9c0fb039-5409-8e27-4cbc-4bb910228eab" executionId="34d44a2d-00a7-46ee-b4bd-7d8b1722d4dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17439590-e91f-3aab-b409-463c285438fd" executionId="cda7fdca-fef4-4409-b305-1212f00657dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a7471f80-cbf9-8a3c-4135-e8764bf5beac" executionId="a336b5a9-943a-4596-be81-cd2bb88ada3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d2410b8-3c58-b582-417b-c169fd10082a" executionId="7b785ece-173a-4df1-8ca5-58339b3a6bf5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="459adc09-7f49-1440-4f10-c70a3ca70d53" executionId="ef8d1ed7-fefb-403e-84a5-ef69aaf2498e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a39d779-7003-bdf3-d546-1b77b3f14d9c" executionId="96a63b0c-08f7-4d8b-b3d0-cb2c3776ec2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a80ec7c-a614-b66a-c381-75aab29fd732" executionId="102f51dc-96a4-40b0-ae34-06b16cb7601c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64826042-8696-d8e4-f559-e9388633cb53" executionId="324a34f5-5d17-40aa-84ab-8b8dc10b4ab2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8045b2b-82d5-c4bc-52d0-a2b14899b624" executionId="9c7572c3-fe04-43ff-89d3-7bed7b682043" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5569ace7-c374-a3a5-367c-296344974383" executionId="65d0cbc8-2d66-44b8-953d-96f55455c08f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c596a1b-f03c-10d5-15f5-4962c4c57d6b" executionId="eab58b7c-805e-464f-b111-0b96f273fac5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="723e2c01-0ca0-a41a-c68a-e34ac45318ce" executionId="41acbb7b-33e9-423f-93b2-db4532d800c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb9c5acf-a0a4-9474-e2d6-b90acdb6038f" executionId="00ff6d74-cb9e-4595-8914-0a89959d0ccb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8fc4c271-55a8-1d75-ee9b-ca171542217e" executionId="ebc57958-c9f9-411c-9d8e-a4383c9b6209" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5c8b8879-3785-ed7e-8517-b4801c6cd5ed" executionId="fbd663a2-741b-41e7-bac1-8fe69e6fcd86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="498133df-5339-0fec-7f10-6cd5a987c16c" executionId="ac957922-5244-4826-9623-64178c8eb8df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8037f4df-cf2b-6def-7972-b1473d2ac3fc" executionId="df30c644-c4fe-4995-be6c-b722a16cd283" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7b1adb34-29e1-8e99-6cf5-b6dc68ed1598" executionId="dbbf5318-d76d-4b8c-bef6-2738814d5a0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89d95cf3-c50b-5860-b057-4a39d76baba8" executionId="9c3a99f5-f02c-4169-a934-105aa6da7d67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6f06f4f6-7e48-c0da-1fff-f5c44b023382" executionId="42d07d75-fef1-48cd-bc30-fd8d5ccd0b5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7f7ab2b2-597e-eee2-72be-73a112a769f7" executionId="9ec7853d-a34b-44cd-a15a-72e15c29f4dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cabce220-086e-7b08-bb2d-5b89bcbe34c8" executionId="92653fac-e576-45c2-8d6f-584be39a94af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9d78f46-4c53-e244-bafd-0d22014fcd87" executionId="8156ab60-2ca0-4cb1-a3aa-0c885b15fc9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1c147b09-1397-43a6-8b37-d96f2d1f3ed4" executionId="b01bdca7-3810-4bbe-bb77-08884b5aad81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c6ca9350-47d0-de0b-9e29-00de07b6df7a" executionId="855db99c-4cd6-41e7-bab0-a3e9a11aefed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="242ecbf7-6100-e859-58bb-a5d31355fd7f" executionId="95393441-e1cf-462e-bbca-2657d419a8dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78f352c5-3b6e-fb0e-98ff-03ea8c6b439a" executionId="379dd9db-f836-4c32-88fc-f0233b02514f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf7d9fb7-e62a-8966-f152-a6c666e37bf0" executionId="37e2a3d1-43b9-423f-b693-09a0cbfcdf6e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8bf81e66-377b-fa96-3dfc-8bfd6c40e44c" executionId="b3ccb2d2-7192-4599-8e3d-c28c1825dcb4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="064f0647-333d-d6ac-aef1-1673d5818907" executionId="96e24c92-1792-4106-85f2-4b9398884dbb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="920e6c5d-9623-aca6-54e1-2a6db20518e7" executionId="267dfa9b-9ab4-45fa-b5f2-41858240e30b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a93bcd0-fc6a-56a2-32f3-61add043fee9" executionId="369ece6c-3472-49ca-83c8-2a6c05e22e9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76faaf38-4622-4c88-5501-fed78da072ec" executionId="98ee5991-02a2-491c-998b-ef324b59275a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b42cf1e-53f1-51d7-378c-373f8211cdc9" executionId="63b48d5f-62c0-4846-af87-e1fef2656d78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c17d28a-6ce5-362a-f711-bf5c79224b99" executionId="e546193d-b16e-411f-b0ae-87526826336a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="969475b1-614e-3792-edcc-ede55f705bde" executionId="244b22fe-5242-4584-bfe8-7854e91794ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5275f261-f731-19c7-4b6e-434e6bc2d08d" executionId="af479630-c34c-4200-bd86-b633851e04d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a1a42d1-c8ac-745c-9a41-f4fb54483f96" executionId="d0f27ab6-c16c-453b-bc0b-bfb8ccab5e78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fdd123a-6dd7-43a2-c25a-6a9fb66236db" executionId="44c61406-72fc-4c2e-9f38-e2e456181b64" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="91cbf24d-f0bf-6c41-1756-f4dc69567fe4" executionId="35266081-c8e4-4ea5-abc6-be929087b398" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e5bc4cef-c9d7-228d-d607-aa84511db155" executionId="2cdee33a-42c7-4134-a43e-f244da111a8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d88f0724-fb18-bcb6-0e7b-5a1ac4859c7c" executionId="784fed1c-24c3-46a5-af61-a408846e9e73" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="43a93774-e244-efde-3836-bf3986847e98" executionId="1dfab0c9-308f-4a66-aef7-035d2a586535" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0f5e07ad-4979-2fa5-f6e0-8e5750b169fc" executionId="d3e364b7-daa1-4143-bc03-67a8c3ab094a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0cd0b68b-dc3d-1e65-70c2-00debc90e057" executionId="2997f5ce-b393-4592-91c9-ab73f9e07e93" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed490758-ac9d-30c7-6c35-31dda870b5e6" executionId="d3ef7427-4ec8-472b-ad19-be18896c3d88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9462caff-3bcd-cb3a-1143-b324bad75af7" executionId="c4d76e20-ad34-4e78-b5fe-21f45b9e3ecf" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3f3058b5-29b7-7193-a316-a0a18c9bcf81" executionId="edc8bccf-9bc6-4c85-9240-f6dae904c497" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3c56c2c2-4fb6-11eb-e517-8e04c9da4bfc" executionId="dcff878f-5584-4614-b80a-7d8538f09d3d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="212362f0-6582-d921-5ad6-0f18fb1fccd7" executionId="a5141bc3-6948-4438-894b-f9cbb87fef83" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab3c62e7-d184-01a1-5e12-a63742eb3420" executionId="1218fd51-65c9-421d-a33e-df73fef91267" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4f10603-0b26-0d65-ce5e-e2df30b3d1b6" executionId="d336427a-ecba-4c14-9115-bb188c1baa68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76bfe392-7fcd-a802-9e94-5d9cc9e08f66" executionId="abb8118a-fc65-485b-afdd-04ca16752534" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0aff520c-12c7-ea64-ba02-ff6e8d29b49f" executionId="061fd82f-8562-49a2-bcbe-c60256874bae" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d1072a3-d564-79e2-b111-feb2d4c2120c" executionId="c874db28-7215-41f3-ac59-91a9e5a75354" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c07b406-fe7d-69af-02cd-d9ef9d9292a2" executionId="bd1692bd-9c09-4621-b46c-3ccb3439fb94" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bccc2445-89a6-1399-42c4-b4fe289cc575" executionId="46e6f69a-c6ce-4e40-a8fa-27a12d522f1d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dff9965e-4957-f7db-013c-ff7112bdb3f5" executionId="1b983a1e-d794-4652-8232-c3a9ed6420f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0d10b196-42d5-b32d-b6e6-0a21b3a72aed" executionId="5232cb0a-a15e-449e-858e-8dfde02fa174" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18b7722c-b2a8-52c1-cddc-92860b3f2b90" executionId="3f9ed98e-e758-45cc-8e07-0bb2e9572d2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="694269c9-e36e-d154-83f2-af845bc2e686" executionId="021547c2-51d5-4776-8d6c-a215190a1f78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee08edbe-4c15-84de-05db-9a33d9ce21b4" executionId="f75d99c0-5976-4141-a25f-a2905053fed7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="37b43959-e293-89a7-a436-5db3f7c6bca6" executionId="c57b0d88-a906-42d2-bc25-df3a342d7df8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c1b1419-5c14-80bd-dd63-0cffef6e6b4c" executionId="53c7f11b-226c-43cc-95b2-6f0ed8e19333" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3ed16a39-f753-1684-2bda-2743af606520" executionId="b8783766-a0bb-4016-95ef-686a0449cc3a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dcb9e996-abcc-94c1-715a-a881c7c87d00" executionId="997a845c-eaf6-4d06-bdba-9ebf7e7ee28f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eb73977e-8f44-f8b8-ed4a-02bb3f4815ba" executionId="861fd8d5-bad1-4435-bf25-9a98babb1037" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e00d70fb-44f8-7b36-8e1e-0ef0429966ac" executionId="057ff842-7d9c-4a88-901e-4c15de7a717e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc7a5ba7-f9d6-fc52-1733-2b6ba5e7f9c8" executionId="121816b9-35d8-43f0-a265-aa155870a2b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b985c272-2592-d0e5-e7ac-1705f30801e5" executionId="71c7c4cd-fc57-4c39-9dc2-9983eeb82551" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c8e5669-cac9-8cd2-8cb1-9da59e2f22d4" executionId="e36cd89e-835f-4038-98aa-71eea12406e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="98f39cc9-60d5-cddc-419a-d6fad552effe" executionId="480d42a0-df97-49d9-ba4f-58a90c97fbcc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3261412c-4855-a412-6651-3353475b70d1" executionId="a42d0f4e-a91d-4c4a-9167-061dac1d9e6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a44c85b8-f35a-b67e-c72e-802a946b2b67" executionId="3b1cee97-2732-45a9-b29d-a85ddfacbc05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="651bb81c-b2c1-0179-60d9-76ea480286e6" executionId="ee029680-6661-423d-abe9-dbd5ce22d09d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a705c5d0-b329-898a-1d9c-c7cf3ccf19ed" executionId="03cfa3c6-f2bc-4bb1-aea7-c1cea655363d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f7f6552-5520-b454-97d1-e1ac4c03bd80" executionId="d7b07132-a977-474c-adb5-1d402c922e3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e1af9cb-da89-d0ea-4636-a773d5d75701" executionId="4c504923-7b1b-4921-8064-b27934d1aa6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76598d68-aeac-8776-2f3e-2dda3a9a5fce" executionId="d7880191-7f32-4117-8bd9-9c2128a64f61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c945ab89-80df-493f-f507-df688cdfc95f" executionId="e1855bee-2a19-4699-879a-16f9a5d7a7bc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4f32cb3d-de52-e96e-9283-a46161e53f2c" executionId="b0c87f73-28d9-464e-9bb0-72c6c7d375fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f86c1082-ed35-a19a-aa0b-8740241d8a93" executionId="8e5bef4c-5f6e-420d-8718-d2d6f2c724b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="955eafc5-5014-d0fd-ce5e-e921d4a1d72f" executionId="73dd55b3-92a6-4d34-ac82-d6e4f9158f84" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b02887a-436a-84b1-9469-502e894249de" executionId="80b5ae13-2135-42e2-bba1-9c64cbdfebe6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f923296d-aa35-93a8-537c-cce656a0fadd" executionId="5a64ffba-c5a5-400f-b26f-74fd7763d478" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d0e8e19c-dad1-887d-7e8d-e9f96daabfbb" executionId="72b4b45b-c9b3-4f7e-916c-69c7f92d49cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="58ff235e-a3c2-8d16-8f18-a5f78f51d8db" executionId="3be463b9-1692-407a-921b-c7a4358f5ea9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f10fde39-91da-cdc8-1ac1-947772a818bb" executionId="0ac767b1-baac-4ead-8d7c-d4c8c11a1c39" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2140eb5-1158-292e-b391-05603b283241" executionId="578b84cc-b24b-4f23-8435-74cbaac924eb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7750cff9-d7c1-7a64-5bf0-bd8412d9d66c" executionId="8a11b585-f5ef-4877-84cb-721c2ffb0972" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7400e8a-7d55-2939-6e26-46d7d776b09b" executionId="99d0a36d-7037-4149-98a7-1e25ce0526b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="51f5edf3-4cf1-eb27-23e0-a2855310af0f" executionId="00771025-e53a-4329-87d9-46f55f8f0284" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2343f28d-b6f1-ea40-62f5-69bed78cd97b" executionId="7b1c273e-5fa2-460e-97aa-2a537bd5afc1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08f8f522-e527-951e-fd77-3ff317c0ac27" executionId="5029a5a5-4bc9-4051-a573-7e237a2af36e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="56fd0b33-b60a-b29a-95b2-a281082a22a7" executionId="bcb56b75-e8d2-4616-91f3-869110820e9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a62b168f-b9b1-d2df-3ac2-1df7f1c9725e" executionId="e92e9e63-49af-4373-a2f7-7eb995bfda56" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="84f4aa5b-2dbf-da24-8c49-9944ee9416f3" executionId="93e743c1-70b9-4b2c-84f3-1a7cc907b7c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc4a098b-795d-74bb-d48d-bb930ac51271" executionId="5c2f2db6-7470-4146-98b8-2f043a3c4e82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3a16c4e1-d197-ae08-4046-bd7faac128bf" executionId="0db9580b-522a-4fcd-ba1f-631113ca7916" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4da6257-ddc3-4454-c78a-2162fb472e15" executionId="05dae50f-c2b0-43f6-8e97-1b7e303beca8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6861b503-9934-6890-ab3d-e56aa077c1aa" executionId="895f1284-9b12-46d4-a44f-980cb17bd542" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aed8925a-767a-6626-c9d6-3af8273ee6b3" executionId="04f7bc96-bb2d-4279-9170-2fc2e181a1d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1289e3dd-43be-584e-b51e-23570abe3f5d" executionId="45e3155c-ed81-4da9-be61-609e55af64bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00306738-6d37-3b3f-c2d6-1d2023d106ea" executionId="b46aa6ac-65d5-46e4-bd33-6c2b16cd03dc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="47faf41c-250f-3921-1a8f-8cb28a6d80ff" executionId="973c7bae-ccfd-4f37-80b3-b2c8893e7d37" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="132ccf43-7ae7-adb9-92a9-df519faee0a1" executionId="a631ef01-3894-4afb-9845-b0aa44661fbc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="55512dc9-1dfa-597d-3130-060b23c90329" executionId="6bd31c3e-8475-495a-9310-36edf662cd1f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d8319eb-03fb-08d3-0f3a-a74ec239d2fe" executionId="ab412332-1c0f-4bae-a270-70f514dfd330" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="39b5d22d-0067-e3ff-d99c-706c8284a251" executionId="b55b6698-a1ad-4c61-a8c7-e6730aca24f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="abbaed55-681d-78da-3d42-03ca0b46a976" executionId="bb2cf451-4db8-4bbf-8092-dd82b80f05cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="33843bfb-59e0-4d8b-1700-315e81e57341" executionId="714454cc-9629-4beb-93a5-58b70a8b40f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="54257088-ee8c-40f1-c5ba-2f061684eb74" executionId="42f5d502-8fde-4ea8-bb1e-50a1d80de71a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="400f22d6-d2e2-8408-a698-81e6d43f3f42" executionId="6a192ba0-31a4-4019-b4c1-84989ebc5515" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5521532a-c03d-ff38-db82-2d0010d35d74" executionId="706b8bac-8ed1-4379-b3b1-f37d422803f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e39a4c61-b8fe-475f-ae8e-0405980a31e1" executionId="05cb2fc0-ffe4-47e7-adaa-c17b5a669aa5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="86e2e90a-39da-e6e6-9a93-bb33e054653a" executionId="755b9361-7ad8-4238-add5-cee0f65bc4b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="61724534-4112-de3a-86e6-9c884b4d524d" executionId="14a41134-a247-4b50-94a1-99d1b56ba265" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="66248bda-3701-ca80-1735-652ce46c5d20" executionId="47b7f270-408c-4fc5-97ad-480b47884120" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c2bfde30-e914-458b-e340-ab93132a81d3" executionId="c1b0c861-4877-4f89-ac7c-cad143fa8ed4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8d47d8d-7ddf-b062-b8b7-9793b946bf9b" executionId="30794ed2-77dc-4e9e-adad-a6ca16b630e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="29456248-06fd-18a6-b06f-ad49591a0ced" executionId="1a5bba21-1b8c-4c6e-98c2-21d3ed55489e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ef9cf35-6a67-9598-3685-c5eb1b930644" executionId="edcfe387-061b-49cc-aad2-44678e821a9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5c4f377-4e3e-b2d1-f112-051ef98aaff6" executionId="1c75f0d0-dc1a-48ed-b1b7-ae3c914ed7f9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="693f5a41-e6ea-2fe8-b639-69d705d0deef" executionId="904df2ee-779e-4ed0-a073-1e6a0aa0eafb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="00a25fdc-9b88-3fce-f0ad-b7913fb21618" executionId="16d151d5-4e2d-4f95-95aa-cf2db3feb044" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e8ea83d-a317-e7a9-7c7b-042795e1eff1" executionId="925526ef-27f6-4669-b2a0-4e97d1822c7b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8e8c20ef-c921-4caa-8e32-3f8b87a136b8" executionId="ab94b64b-56ed-46b1-b2a2-dfecc4f36d9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2d2a9605-3a0d-6e02-270f-fff5f7a24d69" executionId="87d1b861-f819-4830-87d2-a6ace60626de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a8abbfe-1496-ae71-1450-b38c0db53bfc" executionId="3d57fa6e-4b36-4346-984c-438c40134d78" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b2a61b5-a877-35e2-ce62-96593f9e2cb3" executionId="dc51b2c7-38b5-41b2-8f4f-ee66570a7844" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="caf3251d-1749-3055-5c33-0c4dbf193eaf" executionId="2e401c65-54dc-4ee3-a917-c4db5c5a976f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed290d48-5b09-a0ef-0064-b242dcf2f952" executionId="97f0fd0f-7816-4dbc-9ed0-60110779599a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e022a46-3a6a-f120-12f8-5e2c3f2247c2" executionId="41dac500-6ccd-40b7-8dcd-4d8985109e3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e1772adc-4111-9752-4572-923cbd634c5b" executionId="4b9a4752-efab-45e5-b5eb-a1484eb7b481" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02b756d5-cbae-c1fe-81a7-b40c49aaf7bf" executionId="d6424393-21b4-4abf-a788-465528fdec45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46dc94f7-ad9d-a3be-24f6-15ca29f318c8" executionId="887116ff-d989-4551-ae0f-4e5990951073" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7152b94d-2d9b-e310-2aa2-69d02bf45611" executionId="d7582ae2-6653-4e0a-ab54-28aa5417f37d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c53f1642-5605-a1e9-4f79-ff719abd0c63" executionId="3099386a-a895-402e-b82a-a890470dfcd8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="beaeae1a-5663-5159-f554-4cb8ce24af1b" executionId="c2e0ff23-62a1-4330-9512-25be86a49b47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2a5cf74-d54b-a40a-2fad-3f7112c31afc" executionId="1563ea4d-902d-4fb6-a37a-2d9b9650bdfe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0cdfe8d-ed22-e606-4448-12aa4bd1069a" executionId="74e58aa6-d98b-410d-9c5c-c15759b58f2a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1fd2d563-2db0-b811-6dea-5bf5b95f5c6c" executionId="b9cea254-4e47-4752-a5bf-ab87d2f682b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d386e6a8-91ed-763e-b3a1-4b62ffed5cf3" executionId="edbf44c0-553e-4b62-b474-9cffe5442f68" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04c472f2-f8b9-2afb-de0f-fb57b66e6f05" executionId="b921b94d-3ced-40ae-9b4f-098e747fab52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3458ea21-a5c4-8720-c598-ec4aa2be7d08" executionId="1cfe091c-31d8-4ee2-a048-a09eeb9618a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0097a575-f2af-f2ad-c169-d76c203c5e13" executionId="fbb3ab8a-dc14-4fbf-b649-8898e7c0e8ba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e0886c3-c6d4-9316-913e-67c4a2ab715a" executionId="9beabb00-1a5f-40b1-b045-9a896ac31dd3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f29ca3ea-8044-4bff-f5a2-13a04fd029e4" executionId="5b911996-b14e-4ca5-8693-05b5644fb2af" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d64e49c-54b6-a9d2-2909-1d5c6c0bbf6b" executionId="7de6f2b2-232b-45f7-87d8-2923777626d2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1152df18-e346-ddeb-56d2-4baba47f379b" executionId="24f81a47-82bb-44a3-b10a-beb67a34d463" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b151b523-5c65-459c-1a05-18b8bbbf66f9" executionId="7032339b-8821-47a4-b14d-e774085d4621" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="603a4190-4c31-e235-1dea-4448262c18fc" executionId="efb923ef-ed02-44ca-833a-89cd6f79185a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a725406b-a2e9-2dd0-1f6b-0aa81740b95d" executionId="ac8d8d6b-91f9-4731-9565-1753e2b0289d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3666327d-eeb2-8cf6-199c-a28cfc5678bf" executionId="c5d6ae29-3c7e-4d8a-b3fb-41c66c925c54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="08b7c809-5c55-e168-d11e-cb58a1056788" executionId="298ef2ee-5940-47f2-9ebb-962a011d457b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b48c632d-b893-92fa-f886-b99be87992cb" executionId="1fefc696-f7dd-43b2-b3e5-0d4e21e7bb77" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="180b2260-9f10-8804-ff19-b6ea3fa61d5c" executionId="f1efe92e-35e1-4b3b-8d4e-c8ba87373aff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="709b4022-f285-904a-2c89-b604766b2030" executionId="00f0e3ac-b742-4dc4-9fb4-f6ed5064867d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89572e90-84de-bab5-9f95-9bc70fe162d5" executionId="dc99bddb-555f-473c-bc30-6e983b8c8971" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46948e2c-121d-478f-8491-eb42ecb316c0" executionId="a892b8b5-7b51-4a05-8dd0-310f39c661f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf9fb0fd-61f7-dc81-2870-e2efb0a27e99" executionId="9db37eab-d933-472f-be7a-bc934d737405" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab896882-276a-8776-de00-376c160e386c" executionId="6513d2d8-68fc-487e-8e57-c588eec6f401" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ec975b5-1579-df12-f95a-68143de38353" executionId="ea6dd965-7e01-489e-b770-5a870e2b24ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dd543aac-b9bf-de04-f5f2-6dbf4dce32d7" executionId="8d39d1e3-b086-4035-9b73-e66e81aa6ec2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2f9efc0b-2b51-e1f2-b995-c9e4d27be7ef" executionId="e0e72adf-f5e9-46f3-bb6a-a62455250b97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9a5a5259-43e7-a157-ba6e-2aaadbf51c75" executionId="11bbb30e-886f-4d1b-9a62-7a09b3e70109" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7567889c-89b1-6883-c5eb-0dc4a697c9a2" executionId="3f627a0b-8edb-4f44-9ea9-ffd1b8810fc9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a8d17546-f6ae-34d4-9e27-95bbfd5e1d33" executionId="3a2f7d1c-0049-476b-abea-45b316a0659c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="510613cb-21e1-a1c9-bb93-eed81a23f6dd" executionId="cbb4339b-bb28-41af-b017-69dfe833675a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a4ddc36c-736e-2706-b327-6b53ea1cc6d6" executionId="245e7fa3-a856-4594-828b-ddc96db79c36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4cd92221-df49-90c6-39a3-365e787a59a6" executionId="82d3dd65-1ad7-4f86-98ff-ee052f121384" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8cbfdd2-aca9-9e27-c8fd-251f064fdfce" executionId="b484a48f-cb28-4ae5-8a60-3c89aedc1473" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90cdd93f-96cb-b0e4-bdfb-41af2a417f44" executionId="701b97a9-f418-4d6d-a358-d21839b3e57e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e70b8920-102c-2c49-870e-b83b646da4cf" executionId="a8e62ca1-aa7c-4d9c-a0f9-14ce4d61142b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="763e5af7-a89f-7243-f04b-0e0023b5d5cf" executionId="74e0de80-b919-469d-ab2d-0a3d11c527ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e97768f-d530-99d2-989a-4e0f3db77405" executionId="d7102a23-7a5d-4340-9f5d-223e8fb579a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0b69eef-402a-b362-a21b-b7c396dde08f" executionId="ffe05302-77e1-471c-9953-d1e1351b281e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5a4dae1a-21dc-18ed-ce1c-6af1ac37d58c" executionId="016163f7-6853-403f-ab1a-9e7d13437545" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd7495bc-9b5e-cec7-dd03-e6762280b2fa" executionId="5e6efb66-822f-4c8f-bf53-aa040541807d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3531bb1c-4b27-a459-4c43-0cfe3ff11658" executionId="2e5bf273-93aa-477b-857d-9bab93536a24" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5d748615-1a32-dcc6-a161-923cde120b47" executionId="75e6a6ff-fd92-42e3-8973-4ca0edeae862" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90d56c51-2ddc-8245-26c9-08f2adcdbbf1" executionId="cd159f7d-bda2-40e7-b6c0-19e089685b35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bb02b94f-37a8-19ca-090b-2dc88817d8ad" executionId="2432c8a3-8b40-4c6e-b194-15924c4eac63" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c4d11546-b7ff-9147-d8a7-3a820d75d8d6" executionId="929eed49-ae97-4d1a-b45d-d1a63de6b7d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="101a5c4c-d35c-9c36-c5db-34a72d861be1" executionId="602effb9-bee9-4a0a-b544-2772cf56a3ee" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9ac25e8c-f2f8-8f1f-14f5-488a222ed3b0" executionId="d048702a-e641-46b7-b597-77d06d4d067e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="629e7032-8557-9949-051b-245664692db4" executionId="314d3e65-3c56-42c4-adf1-afcbc671d653" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3e6e6c8a-2579-62b2-c566-29b61215c625" executionId="fcfe8961-06ea-4224-a671-9d7f47cd6fc1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dc528239-1430-c276-350b-70d67eb64991" executionId="ad734f12-fb8c-4a30-9282-22dec5454860" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="26f25596-6bcf-2aa2-0a70-f62cab760fd9" executionId="6e8fb8f2-2b65-49a1-9cc5-7263e947f21c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="28c1a9bf-5a93-c3ad-eea0-bb20680fffa4" executionId="76de96b6-45b4-451d-a2cd-84478175f093" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf835e73-1c1d-3036-1ae1-abe8be46c4ee" executionId="1a6e82e3-5b37-4d66-b110-a5734bec9f3b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e3627c06-71fc-a060-1d4d-260adb9f1210" executionId="b4857e83-630f-4e68-8d2e-1def5ef69594" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="04920b5f-686b-4d0a-a325-7e2ad0ac452a" executionId="2acec3be-9685-4fab-b9ce-0f2a7acaf8c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6952147b-0649-5a15-153f-168299f6ea42" executionId="65d527b0-4449-4a3b-bbf3-b2629faa7c7a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78244beb-de60-cebe-d71b-1d69e6c372ee" executionId="acb3d4fa-3259-4753-95a1-87a4e43fbd05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d74c1b47-2b45-42f8-b27a-2c9d874ea10b" executionId="6784c04e-6402-449b-a728-b6104cfc6b0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe050ba5-2379-58fd-0cae-82b0659a2b6d" executionId="412ce2d2-dd8d-47e3-b6cd-cfbdc8d02d7f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ede71b7-351c-1cf7-5855-c6a6a674af96" executionId="fe751a79-b6cc-4c50-be13-9f0c1d79f6a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8d7a3cb7-0721-5fbc-8b4a-ca2018c37dfd" executionId="66f4cee9-789b-4648-8813-b81c2d48830f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dbf23bcc-10fe-b4f8-bdba-93a8f4169160" executionId="d4dee360-a57b-4702-878d-965e151de344" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1bbd0f7b-de32-4350-357e-2b738932497b" executionId="20cc9730-111f-4bdb-9adf-dceaa20157e8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d62d737-01d7-eab8-ec9c-5b7088340c30" executionId="f35627f1-984d-42c6-a6a7-d0c34c94349d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0f51f72-d8b8-59e9-9de3-c6b33c399d4f" executionId="0ef626d9-3609-4009-bf49-2493f2a093b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2119fef3-55b3-cb02-38e7-b693aad1c328" executionId="bd263a79-f09b-483c-b340-f3dc987449e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="647ae2db-69ed-a458-f9b2-e1ff03e6988f" executionId="cc261263-fa0b-4982-99e9-922473c25759" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="219f2562-40dc-2f4d-2d29-11af09c2f8b7" executionId="34707a83-ab5d-44a2-8448-12d27caa7c49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30d6f990-16b2-1890-0b3a-d1dfbe9eedf5" executionId="adc466b0-755b-449b-baf6-cbbb452e3bbb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3d239bfe-c698-b684-dbea-c3fa7475cac3" executionId="f9af2dbf-17b4-40de-bd63-0dfce38caa6d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d7cbdf25-1abd-5be0-1705-629b06ed6233" executionId="fb994c7e-3e44-4076-8fa7-b54a384d601e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d09a547b-4f67-e1d1-0bc4-62a721e6d668" executionId="b6dd5f63-52a0-4869-ac40-8badfc1faf36" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0c0c4f0b-af88-b5f0-9da0-491f9d254775" executionId="2011be17-f605-4b69-bf45-3197c993b4de" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="691753c3-d5e2-251f-e574-c6c2f1be1f0f" executionId="f3ba50f1-1167-42a9-bd36-4e1159c74fa8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27f2afbd-9f07-3545-d5d6-b28952ebdfd1" executionId="ba070735-fbb9-442a-822b-01bad41b0a48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e18d156-c166-d1dc-3710-de7645360064" executionId="8e8acd5c-89b1-4c2d-884d-d305d7721135" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a5e6311-a3da-999b-519f-c3f8d768df61" executionId="11a281ce-258e-419a-8223-5e1d750fd204" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="93afad43-36e1-d731-837d-ad6d5a7f49c1" executionId="4e9d9f6b-f8c4-42aa-a705-400545571dc0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="350aed43-d63e-4b3d-f69f-480da0dbfb1c" executionId="03534cb6-83ae-4d84-ba95-1e5141d84ddc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ec4a4449-1424-a7ee-e040-db656a90d838" executionId="baafca7c-c8f4-40a3-9dba-436b5ab369f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa3a59df-facb-0618-e063-22bae6a6587f" executionId="c1f33c23-d0d0-4383-9562-d6f19b40d30c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="736e58a5-e61f-d16f-a200-62c2b0320ab8" executionId="6b070237-df74-4dc4-8a92-b166488ee2c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a51a3933-dd22-27be-1ca9-2cb4584d6666" executionId="d229aaf0-b6ee-4a6a-8b67-d9e449af8fb9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="30cb0310-de3e-88ff-8f97-159661e8875a" executionId="d33ca23b-f960-4d19-894f-3056f51527b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="acd4bcec-3088-d922-c81d-7c878116fd96" executionId="cde2d4ad-586f-4dde-bce6-dfc66cdaf7f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="49a4d1dc-d639-43e5-b5bf-49f3c902de94" executionId="f76b018e-9bb4-4924-9a38-302d5da87d52" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4fd00a53-8db1-d78c-2599-95e001080d8f" executionId="013b54f0-4d41-4342-a4bd-f6264d308f92" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c813b430-2229-8354-72e9-cc990737510e" executionId="3d946b18-4087-4776-9242-fa449a466646" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8eb0f6de-e206-b1b3-376e-4fc96993f209" executionId="07f1ca60-4c83-4658-9dab-00191fb35bfe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89f9964d-c6bd-f1e1-c61d-b736a8b08ce9" executionId="6714b2ea-9908-4544-9239-77083a5cd325" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41b47b25-71b8-a5de-187b-e2ea18a5bea5" executionId="d5b6407b-e18c-4ff8-b29e-c808943698b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fd0c204-7b22-7b74-17fd-4cc34182ba94" executionId="7b9ac804-df52-4bf2-bcdd-cf7ca3ff9b6f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="745556e0-6207-6405-cb05-73e41479d01b" executionId="6e6e400c-0410-41ca-9698-ccfa0d00907c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2691c8ac-5de1-fb02-990b-ba468a8e28da" executionId="51e69f99-8b01-446e-96e6-f8ea0300e76f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7abf3a3b-a9be-4e0c-533d-4c9cfcb4fe24" executionId="133d39fb-e5be-40df-a335-dded94fa3bf1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9db7865-5d01-a38d-f8ab-fec80d4cd58f" executionId="6f757bdb-699d-430d-beec-8a9d718869cc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cebdfbc2-1c44-c355-92fb-f3754bfef121" executionId="fdcf4a7d-badd-4ecb-8926-19747e606880" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="159b95df-fcac-493e-9d02-021648159908" executionId="86ba4815-b3b2-49d3-b445-5f7293d8918f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ea284b85-8c42-66b5-15ff-c6e3a5198213" executionId="7c422e4e-55ff-4d4b-83e8-8765e05aefd4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2949711f-0eb3-2956-3cc9-6eb25ae76d45" executionId="f6a7158e-c1e3-450c-93a5-af41e4506da6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46e9ff7c-0efc-b9b8-9dfa-b389ab865583" executionId="31536ea7-7b91-47c4-aee6-8c2f018d64bb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e0ff5e87-9149-ce63-9796-3fa300857898" executionId="29d4ae77-61f6-4502-9326-dc352f7e83e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c0a24241-2665-51f1-0378-db611bcd3dd4" executionId="ee4e5936-9926-498c-9de4-3aad73f5b88a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="693de814-d436-dc86-2f4b-cd82be387302" executionId="2d040a2b-c678-473d-8ebe-74de445d3142" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="956fca44-5e60-03fc-7509-a833909ab23c" executionId="274b28f8-a1ce-4c7e-a530-2203c9a3f7c8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a670f6ba-6b92-ff82-b344-e17a9ee818a8" executionId="71594b60-ae11-442c-8ba0-4ff7b43c70c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="09e10194-f968-2de2-e0b9-66d7f6ba2e02" executionId="08475e08-9db7-4f25-a6ea-ebb33701d95b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="42da5785-dc68-eb06-6258-986f8c7b7a9d" executionId="9a24ddab-089c-44f4-828e-f44a388c8b7c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c130288d-a9d4-34a1-8371-13344ddcfeae" executionId="0b89179d-3a87-4a8d-be5e-fb24c1e4620a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ba42f61a-4918-db0a-7057-c08cf25ba397" executionId="66148e11-30bd-4ad2-9a91-87ad414c7b05" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="320" executed="320" passed="241" failed="79" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.8.2+699d445a1a (64-bit .NET 9.0.6)
[xUnit.net 00:00:00.05]   Discovering: NeoSharp.Tests
[xUnit.net 00:00:00.10]   Discovered:  NeoSharp.Tests
[xUnit.net 00:00:00.11]   Starting:    NeoSharp.Tests
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.16]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.16]       Stack Trace:
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.16]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.16]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.17]       System.ArgumentException : N parameter must be a power of 2 (Parameter 'n')
[xUnit.net 00:00:00.17]       Stack Trace:
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(93,0): at NeoSharp.Crypto.ScryptParams.ValidateParameters(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ScryptParams.cs(74,0): at NeoSharp.Crypto.ScryptParams..ctor(Int32 n, Int32 r, Int32 p)
[xUnit.net 00:00:00.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ScryptParamsTests.cs(16,0): at NeoSharp.Tests.Crypto.ScryptParamsTests..ctor()
[xUnit.net 00:00:00.17]            at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean wrapExceptions)
[xUnit.net 00:00:00.18]       NeoSharp.Crypto.WIFException : Invalid WIF format: Invalid compressed flag. Expected 0x01, got 0x00
[xUnit.net 00:00:00.18]       Stack Trace:
[xUnit.net 00:00:00.18]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/WIF.cs(108,0): at NeoSharp.Crypto.WIF.Decode(String wifString)
[xUnit.net 00:00:00.18]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/WIFTests.cs(176,0): at NeoSharp.Tests.Crypto.WIFTests.UncompressedWif_ShouldDecodeCorrectly()
[xUnit.net 00:00:00.18]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.18]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.19]       NeoSharp.Crypto.WIFException : Invalid WIF format: Invalid compressed flag. Expected 0x01, got 0x00
[xUnit.net 00:00:00.19]       Stack Trace:
[xUnit.net 00:00:00.19]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/WIF.cs(108,0): at NeoSharp.Crypto.WIF.Decode(String wifString)
[xUnit.net 00:00:00.19]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/WIFTests.cs(162,0): at NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(Boolean compressed)
[xUnit.net 00:00:00.19]            at InvokeStub_WIFTests.CompressedFlag_ShouldBeHandledCorrectly(Object, Span`1)
[xUnit.net 00:00:00.19]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:00.20]       System.ArgumentException : Public key must be 33 bytes (compressed) (Parameter 'encodedBytes')
[xUnit.net 00:00:00.20]       Stack Trace:
[xUnit.net 00:00:00.20]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPublicKey.cs(27,0): at NeoSharp.Crypto.ECPublicKey..ctor(Byte[] encodedBytes)
[xUnit.net 00:00:00.20]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs(38,0): at NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly()
[xUnit.net 00:00:00.20]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.20]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.22]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.22]       Stack Trace:
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(255,0): at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message)
[xUnit.net 00:00:00.22]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.22]            at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)
[xUnit.net 00:00:00.22]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.22]       Stack Trace:
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(255,0): at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message)
[xUnit.net 00:00:00.22]            at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
[xUnit.net 00:00:00.22]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:00.22]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.22]       Stack Trace:
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(255,0): at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message)
[xUnit.net 00:00:00.22]            at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
[xUnit.net 00:00:00.22]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:00.22]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.22]       Stack Trace:
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(255,0): at NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(String message)
[xUnit.net 00:00:00.22]            at InvokeStub_SignTests.TestSignVariousMessages(Object, Span`1)
[xUnit.net 00:00:00.22]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:00.22]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.22]       Stack Trace:
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.22]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(292,0): at NeoSharp.Tests.Crypto.SignTests.TestSignatureWithWrongKey()
[xUnit.net 00:00:00.22]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.22]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(200,0): at NeoSharp.Tests.Crypto.SignTests.TestSignDifferentMessages()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(121,0): at NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromSignedMessage()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Crypto.SignException : Failed to recover public key from signature
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(201,0): at NeoSharp.Crypto.Sign.SignedMessageToKey(Byte[] message, SignatureData signatureData)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(246,0): at NeoSharp.Crypto.Sign.RecoverSigningScriptHash(Byte[] message, SignatureData signatureData)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(90,0): at NeoSharp.Tests.Crypto.SignTests.TestRecoverSigningScriptHash()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(73,0): at NeoSharp.Tests.Crypto.SignTests.TestSignMessage()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(187,0): at NeoSharp.Tests.Crypto.SignTests.TestDeterministicSigning()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.23]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.23]       Stack Trace:
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.23]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(159,0): at NeoSharp.Tests.Crypto.SignTests.TestVerifySignature()
[xUnit.net 00:00:00.23]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.23]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.25]       Expected address to be "NLnyLtep7jwyq1qhNPkwXbJpurC4jUT8ke", but "NLLev3iNfYUUCgeC4eCmQLyr1obKGwvZSy" differs near "Lev" (index 2).
[xUnit.net 00:00:00.25]       Stack Trace:
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.25]            at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstMismatch()
[xUnit.net 00:00:00.25]            at FluentAssertions.Primitives.StringValidator.Validate()
[xUnit.net 00:00:00.25]            at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(156,0): at NeoSharp.Tests.Wallet.AccountTests.GetAddress_ShouldReturnCorrectAddress()
[xUnit.net 00:00:00.25]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.25]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.25]       Expected result to be equal to 1, but found 0.
[xUnit.net 00:00:00.25]       Stack Trace:
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.25]            at FluentAssertions.Numeric.ComparableTypeAssertions`2.Be(T expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs(240,0): at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBigInteger_ShouldReadCorrectly()
[xUnit.net 00:00:00.25]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.25]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.25]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.25]       Stack Trace:
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(199,0): at NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_ShouldDecryptPrivateKey()
[xUnit.net 00:00:00.25]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.25]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.25]       Expected actual to be a collection with 1 item(s), but {0xFF, 0x00}
[xUnit.net 00:00:00.25]       contains 1 item(s) more than
[xUnit.net 00:00:00.25]       {0xFF}.
[xUnit.net 00:00:00.25]       
[xUnit.net 00:00:00.25]       With configuration:
[xUnit.net 00:00:00.25]       - Use declared types and members
[xUnit.net 00:00:00.25]       - Compare enums by value
[xUnit.net 00:00:00.25]       - Compare tuples by their properties
[xUnit.net 00:00:00.25]       - Compare anonymous types by their properties
[xUnit.net 00:00:00.25]       - Compare records by their members
[xUnit.net 00:00:00.25]       - Include non-browsable members
[xUnit.net 00:00:00.25]       - Include all non-private properties
[xUnit.net 00:00:00.25]       - Include all non-private fields
[xUnit.net 00:00:00.25]       - Match member by name (or throw)
[xUnit.net 00:00:00.25]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:00.25]       - Without automatic conversion.
[xUnit.net 00:00:00.25]       
[xUnit.net 00:00:00.25]       Stack Trace:
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.25]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs(266,0): at NeoSharp.Tests.Serialization.BinaryWriterTests.TestAndReset(Byte[] expected)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs(252,0): at NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly()
[xUnit.net 00:00:00.25]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.25]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.25]       Expected bytes to be a collection with 2 item(s), but {0x10}
[xUnit.net 00:00:00.25]       contains 1 item(s) less than
[xUnit.net 00:00:00.25]       {0x0C, 0x00}.
[xUnit.net 00:00:00.25]       
[xUnit.net 00:00:00.25]       With configuration:
[xUnit.net 00:00:00.25]       - Use declared types and members
[xUnit.net 00:00:00.25]       - Compare enums by value
[xUnit.net 00:00:00.25]       - Compare tuples by their properties
[xUnit.net 00:00:00.25]       - Compare anonymous types by their properties
[xUnit.net 00:00:00.25]       - Compare records by their members
[xUnit.net 00:00:00.25]       - Include non-browsable members
[xUnit.net 00:00:00.25]       - Include all non-private properties
[xUnit.net 00:00:00.25]       - Include all non-private fields
[xUnit.net 00:00:00.25]       - Match member by name (or throw)
[xUnit.net 00:00:00.25]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:00.25]       - Without automatic conversion.
[xUnit.net 00:00:00.25]       
[xUnit.net 00:00:00.25]       Stack Trace:
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.25]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.25]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs(419,0): at NeoSharp.Tests.Script.ScriptBuilderTests.AssertBuilder(Byte[] expected, Nullable`1 firstN, Nullable`1 lastN, Nullable`1 length)
[xUnit.net 00:00:00.25]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs(87,0): at NeoSharp.Tests.Script.ScriptBuilderTests.PushString_ShouldHandleDifferentSizes()
[xUnit.net 00:00:00.25]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.25]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.26]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.26]       Stack Trace:
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(215,0): at NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_WithWrongPassword_ShouldThrowException()
[xUnit.net 00:00:00.26]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.26]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.26]       Expected script[108] to be 0x7F, but found 0x9E.
[xUnit.net 00:00:00.26]       Expected script[109] to be 0xC7, but found 0xD0.
[xUnit.net 00:00:00.26]       Expected script[110] to be 0x5C, but found 0xDC.
[xUnit.net 00:00:00.26]       Expected script[111] to be 0x4F, but found 0x3A.
[xUnit.net 00:00:00.26]       
[xUnit.net 00:00:00.26]       With configuration:
[xUnit.net 00:00:00.26]       - Use declared types and members
[xUnit.net 00:00:00.26]       - Compare enums by value
[xUnit.net 00:00:00.26]       - Compare tuples by their properties
[xUnit.net 00:00:00.26]       - Compare anonymous types by their properties
[xUnit.net 00:00:00.26]       - Compare records by their members
[xUnit.net 00:00:00.26]       - Include non-browsable members
[xUnit.net 00:00:00.26]       - Include all non-private properties
[xUnit.net 00:00:00.26]       - Include all non-private fields
[xUnit.net 00:00:00.26]       - Match member by name (or throw)
[xUnit.net 00:00:00.26]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:00.26]       - Without automatic conversion.
[xUnit.net 00:00:00.26]       
[xUnit.net 00:00:00.26]       Stack Trace:
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.26]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.26]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs(216,0): at NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKeys_ShouldCreateCorrectScript()
[xUnit.net 00:00:00.26]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.26]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.26]       Expected _writer.ToArray() to be empty, but found {0x42}.
[xUnit.net 00:00:00.26]       Stack Trace:
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.GivenSelector`1.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.26]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEmpty(String because, Object[] becauseArgs)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryWriterTests.cs(213,0): at NeoSharp.Tests.Serialization.BinaryWriterTests.Reset_ShouldClearBuffer()
[xUnit.net 00:00:00.26]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.26]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.26]       Expected derivedPublicKey to be NeoSharp.Crypto.ECPublicKey
[xUnit.net 00:00:00.26]       {
[xUnit.net 00:00:00.26]           EncodedBytes = {0xD6, 0xE5, 0xD5, 0xA4, 0x25, 0x40, 0x2E, 0xCA, 0xC5, 0xB7, 0x7F, 0x09, 0x9B, 0xE1, 0xFB, 0xBC, 0x91, 0x79, 0xA8, 0x55, 0x2E, 0x83, 0x77, 0xF7, 0xF3, 0xFB, 0x85, 0xF3, 0x6B, 0x90, 0xBF, 0x65, …1 more…}
[xUnit.net 00:00:00.26]       }, but found NeoSharp.Crypto.ECPublicKey
[xUnit.net 00:00:00.26]       {
[xUnit.net 00:00:00.26]           EncodedBytes = {0x02, 0x9F, 0x3C, 0xB8, 0x80, 0x10, 0xC2, 0x32, 0x26, 0x5D, 0x3A, 0x73, 0x5D, 0xCE, 0x50, 0x25, 0xE3, 0xA8, 0x6F, 0x68, 0x46, 0xA7, 0x4F, 0xE2, 0x7E, 0x7E, 0x33, 0xC3, 0x41, 0xDD, 0xC1, 0x63, …1 more…}
[xUnit.net 00:00:00.26]       }.
[xUnit.net 00:00:00.26]       
[xUnit.net 00:00:00.26]       With configuration:
[xUnit.net 00:00:00.26]       - Use declared types and members
[xUnit.net 00:00:00.26]       - Compare enums by value
[xUnit.net 00:00:00.26]       - Compare tuples by their properties
[xUnit.net 00:00:00.26]       - Compare anonymous types by their properties
[xUnit.net 00:00:00.26]       - Compare records by their members
[xUnit.net 00:00:00.26]       - Include non-browsable members
[xUnit.net 00:00:00.26]       - Match member by name (or throw)
[xUnit.net 00:00:00.26]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:00.26]       - Without automatic conversion.
[xUnit.net 00:00:00.26]       
[xUnit.net 00:00:00.26]       Stack Trace:
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.26]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.26]            at FluentAssertions.Primitives.ObjectAssertions`2.BeEquivalentTo[TExpectation](TExpectation expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.26]            at FluentAssertions.Primitives.ObjectAssertions`2.BeEquivalentTo[TExpectation](TExpectation expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.26]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(131,0): at NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromPrivateKey()
[xUnit.net 00:00:00.26]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.26]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.26]       Expected script[36] to be 0x5C, but found 0x56.
[xUnit.net 00:00:00.26]       Expected script[37] to be 0x1F, but found 0xE7.
[xUnit.net 00:00:00.26]       Expected script[38] to be 0x5F, but found 0xB3.
[xUnit.net 00:00:00.26]       Expected script[39] to be 0xC1, but found 0x27.
[xUnit.net 00:00:00.26]       
[xUnit.net 00:00:00.26]       With configuration:
[xUnit.net 00:00:00.26]       - Use declared types and members
[xUnit.net 00:00:00.26]       - Compare enums by value
[xUnit.net 00:00:00.26]       - Compare tuples by their properties
[xUnit.net 00:00:00.26]       - Compare anonymous types by their properties
[xUnit.net 00:00:00.26]       - Compare records by their members
[xUnit.net 00:00:00.26]       - Include non-browsable members
[xUnit.net 00:00:00.26]       - Include all non-private properties
[xUnit.net 00:00:00.26]       - Include all non-private fields
[xUnit.net 00:00:00.26]       - Match member by name (or throw)
[xUnit.net 00:00:00.26]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:00.27]       - Without automatic conversion.
[xUnit.net 00:00:00.27]       
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.27]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.27]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.27]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.27]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.27]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:00.27]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.27]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Script/ScriptBuilderTests.cs(234,0): at NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKey_ShouldCreateCorrectScript()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       NeoSharp.Core.NeoSharpException : Could not construct a recoverable key. This should never happen.
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/Sign.cs(67,0): at NeoSharp.Crypto.Sign.SignMessage(Byte[] message, ECKeyPair keyPair)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(274,0): at NeoSharp.Tests.Crypto.SignTests.TestInvalidSignatureVerification()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.ArgumentException : R component must be exactly 32 bytes (Parameter 'r')
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/SignatureData.cs(50,0): at NeoSharp.Crypto.SignatureData..ctor(Byte v, Byte[] r, Byte[] s)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SignTests.cs(138,0): at NeoSharp.Tests.Crypto.SignTests.TestKeyFromSignedMessageWithInvalidSignature()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(341,0): at NeoSharp.Tests.Wallet.AccountTests.Equals_ShouldCompareByScriptHash()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(106,0): at NeoSharp.Tests.Wallet.AccountTests.FromWIF_ShouldCreateCorrectAccount()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(184,0): at NeoSharp.Tests.Wallet.AccountTests.EncryptPrivateKey_ShouldEncryptPrivateKey()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(258,0): at NeoSharp.Tests.Wallet.AccountTests.SignData_ShouldCreateValidSignature()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(227,0): at NeoSharp.Tests.Wallet.AccountTests.Sign_ShouldCreateValidSignature()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.27]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.27]       Stack Trace:
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.27]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(243,0): at NeoSharp.Tests.Wallet.AccountTests.Sign_WithLockedAccount_ShouldThrowException()
[xUnit.net 00:00:00.27]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.27]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.28]       Expected exception message to match the equivalent of "*empty*", but "At least one public key is required (Parameter 'publicKeys')" does not.
[xUnit.net 00:00:00.28]       
[xUnit.net 00:00:00.28]       Stack Trace:
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.Dispose()
[xUnit.net 00:00:00.28]            at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.28]            at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.28]            at FluentAssertions.Specialized.ExceptionAssertions`1.WithMessage(String expectedWildcardPattern, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(299,0): at NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException()
[xUnit.net 00:00:00.28]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.28]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.28]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.28]       Stack Trace:
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(174,0): at NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey()
[xUnit.net 00:00:00.28]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.28]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.28]       System.FormatException : Invalid WIF compression flag
[xUnit.net 00:00:00.28]       Stack Trace:
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECPrivateKey.cs(169,0): at NeoSharp.Crypto.ECPrivateKey.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Crypto/ECKeyPair.cs(140,0): at NeoSharp.Crypto.ECKeyPair.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/Account.cs(454,0): at NeoSharp.Wallet.Account.FromWIF(String wif)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Wallet/AccountTests.cs(134,0): at NeoSharp.Tests.Wallet.AccountTests.GetScriptHash_ShouldReturnCorrectHash()
[xUnit.net 00:00:00.28]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.28]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.28]       Expected isValid to be true, but found False.
[xUnit.net 00:00:00.28]       Stack Trace:
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.28]            at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs(168,0): at NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairVerification_ShouldVerifyOwnSignature()
[xUnit.net 00:00:00.28]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.28]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.28]       Expected publicKey1.GetHashCode() to be 12790583, but found 64660344 (difference of 51869761).
[xUnit.net 00:00:00.28]       Stack Trace:
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.28]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)
[xUnit.net 00:00:00.28]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.28]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/ECKeyPairTests.cs(199,0): at NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyEquality_ShouldWorkCorrectly()
[xUnit.net 00:00:00.28]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.28]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.58]       Expected a &lt;System.InvalidOperationException&gt; to be thrown, but found &lt;System.FormatException&gt;:
[xUnit.net 00:00:00.58]       System.FormatException: Current position does not contain a PUSHDATA opcode
[xUnit.net 00:00:00.59]          at NeoSharp.Serialization.BinaryReader.ReadPushData() in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Serialization/BinaryReader.cs:line 306
[xUnit.net 00:00:00.59]          at NeoSharp.Tests.Serialization.BinaryReaderTests.&lt;&gt;c__DisplayClass1_0.&lt;ReadPushData_WithInvalidOpCode_ShouldThrowException&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs:line 51
[xUnit.net 00:00:00.59]          at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
[xUnit.net 00:00:00.59]          at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().
[xUnit.net 00:00:00.59]       Stack Trace:
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.59]            at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.59]            at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
[xUnit.net 00:00:00.59]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs(54,0): at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushData_WithInvalidOpCode_ShouldThrowException()
[xUnit.net 00:00:00.59]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.59]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.59]       Expected result to be equal to 1, but found 0.
[xUnit.net 00:00:00.59]       Stack Trace:
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.59]            at FluentAssertions.Numeric.ComparableTypeAssertions`2.Be(T expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:00.59]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs(282,0): at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataIntegerAndAssert(Byte[] input, BigInteger expected)
[xUnit.net 00:00:00.59]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs(81,0): at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBigInteger_ShouldReadNumbersCorrectly()
[xUnit.net 00:00:00.59]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.59]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:00.59]       Expected reader.ReadBoolean() to be true, but found False.
[xUnit.net 00:00:00.59]       Stack Trace:
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:00.59]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:00.59]            at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
[xUnit.net 00:00:00.59]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Serialization/BinaryReaderTests.cs(184,0): at NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBoolean_ShouldReadBooleaneanValues()
[xUnit.net 00:00:00.59]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:00.59]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:04.78]       Expected a &lt;NeoSharp.Crypto.NEP2Exception&gt; to be thrown, but found &lt;System.FormatException&gt;:
[xUnit.net 00:00:04.78]       System.FormatException: Invalid base58 check string
[xUnit.net 00:00:04.78]          at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
[xUnit.net 00:00:04.78]          at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
[xUnit.net 00:00:04.78]          at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
[xUnit.net 00:00:04.78]          at NeoSharp.Tests.Crypto.SecurityTests.&lt;&gt;c__DisplayClass7_0.&lt;TestNEP2WrongPassword&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs:line 150
[xUnit.net 00:00:04.78]          at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
[xUnit.net 00:00:04.78]          at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().
[xUnit.net 00:00:04.78]       Stack Trace:
[xUnit.net 00:00:04.78]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:04.78]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:04.78]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:04.78]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:04.78]            at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.78]            at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
[xUnit.net 00:00:04.78]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(151,0): at NeoSharp.Tests.Crypto.SecurityTests.TestNEP2WrongPassword()
[xUnit.net 00:00:04.78]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:04.78]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:04.79]       Expected isValid to be true, but found False.
[xUnit.net 00:00:04.79]       Stack Trace:
[xUnit.net 00:00:04.79]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:04.79]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:04.79]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:04.79]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:04.79]            at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)
[xUnit.net 00:00:04.79]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(265,0): at NeoSharp.Tests.Crypto.SecurityTests.TestSignatureVerification()
[xUnit.net 00:00:04.79]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:04.79]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:04.80]       Expected Math.Abs(wrongTime1 - avgTime) to be less than 0.2944833333333333, but found 0.3913333333333333 (difference of 0.09684999999999999).
[xUnit.net 00:00:04.80]       Stack Trace:
[xUnit.net 00:00:04.80]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:04.80]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:04.80]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:04.80]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:04.80]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThan(T expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.80]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(319,0): at NeoSharp.Tests.Crypto.SecurityTests.TestTimingAttackResistance()
[xUnit.net 00:00:04.80]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:04.80]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:04.82]       Expected sig1[0] to be 0xF8, but found 0xA8.
[xUnit.net 00:00:04.82]       Expected sig1[1] to be 0xF7, but found 0x3C.
[xUnit.net 00:00:04.82]       Expected sig1[2] to be 0x1C, but found 0xA6.
[xUnit.net 00:00:04.82]       Expected sig1[3] to be 0xD5, but found 0x29.
[xUnit.net 00:00:04.82]       Expected sig1[4] to be 0xEF, but found 0x9A.
[xUnit.net 00:00:04.82]       Expected sig1[5] to be 0x4A, but found 0xC1.
[xUnit.net 00:00:04.82]       Expected sig1[6] to be 0x0D, but found 0x63.
[xUnit.net 00:00:04.82]       Expected sig1[7] to be 0xEC, but found 0x2B.
[xUnit.net 00:00:04.82]       Expected sig1[8] to be 0x08, but found 0x49.
[xUnit.net 00:00:04.82]       Expected sig1[9] to be 0x8C, but found 0xA1.
[xUnit.net 00:00:04.82]       
[xUnit.net 00:00:04.82]       With configuration:
[xUnit.net 00:00:04.82]       - Use declared types and members
[xUnit.net 00:00:04.82]       - Compare enums by value
[xUnit.net 00:00:04.82]       - Compare tuples by their properties
[xUnit.net 00:00:04.82]       - Compare anonymous types by their properties
[xUnit.net 00:00:04.82]       - Compare records by their members
[xUnit.net 00:00:04.82]       - Include non-browsable members
[xUnit.net 00:00:04.82]       - Include all non-private properties
[xUnit.net 00:00:04.82]       - Include all non-private fields
[xUnit.net 00:00:04.82]       - Match member by name (or throw)
[xUnit.net 00:00:04.82]       - Be strict about the order of items in byte arrays
[xUnit.net 00:00:04.82]       - Without automatic conversion.
[xUnit.net 00:00:04.82]       
[xUnit.net 00:00:04.82]       Stack Trace:
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:04.82]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:04.82]            at FluentAssertions.Equivalency.EquivalencyValidator.AssertEquality(Comparands comparands, EquivalencyValidationContext context)
[xUnit.net 00:00:04.82]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, Func`2 config, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.82]            at FluentAssertions.Collections.GenericCollectionAssertions`3.BeEquivalentTo[TExpectation](IEnumerable`1 expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.82]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(247,0): at NeoSharp.Tests.Crypto.SecurityTests.TestDeterministicSignatures()
[xUnit.net 00:00:04.82]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:04.82]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:04.82]       Expected exception message to match the equivalent of "*checksum*", but "Invalid base58 check string" does not.
[xUnit.net 00:00:04.82]       
[xUnit.net 00:00:04.82]       Stack Trace:
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:04.82]            at FluentAssertions.Execution.CollectingAssertionStrategy.ThrowIfAny(IDictionary`2 context)
[xUnit.net 00:00:04.82]            at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.82]            at FluentAssertions.Specialized.ExceptionAssertions`1.ExceptionMessageAssertion.Execute(IEnumerable`1 messages, String expectation, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.82]            at FluentAssertions.Specialized.ExceptionAssertions`1.WithMessage(String expectedWildcardPattern, String because, Object[] becauseArgs)
[xUnit.net 00:00:04.82]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(193,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2KeyChecksumValidation()
[xUnit.net 00:00:04.82]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:04.82]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:09.06]       Expected encrypted to start with "6P", but "QnW59ZL1gJnec4cYkeEBZJbBP8EKnJNL86dMjRCe3r2XhoczCcBDaHxVTFV" differs near "QnW" (index 0).
[xUnit.net 00:00:09.06]       Stack Trace:
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringStartValidator.ValidateAgainstMismatch()
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringValidator.Validate()
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringAssertions`1.StartWith(String expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:09.06]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(129,0): at NeoSharp.Tests.Crypto.SecurityTests.TestNEP2EncryptionDecryption()
[xUnit.net 00:00:09.06]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:09.06]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:09.06]       Expected address to be "NM7Aky765FG8NhhwtxjXRx7jEL1cnw7PBP", but "NhkYnJHzsPmb6D1PNgEeptSUNpCXkyN9Py" differs near "hkY" (index 1).
[xUnit.net 00:00:09.06]       Stack Trace:
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:09.06]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstMismatch()
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringValidator.Validate()
[xUnit.net 00:00:09.06]            at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:09.06]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/SecurityTests.cs(231,0): at NeoSharp.Tests.Crypto.SecurityTests.TestWIFImportSecurely()
[xUnit.net 00:00:09.06]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:09.06]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:09.10]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:09.10]       Stack Trace:
[xUnit.net 00:00:09.10]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:09.10]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:09.10]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:09.10]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(147,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password)
[xUnit.net 00:00:09.10]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:09.10]            at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)
[xUnit.net 00:00:13.17]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:13.17]       Stack Trace:
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(147,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password)
[xUnit.net 00:00:13.17]            at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
[xUnit.net 00:00:13.17]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:13.17]       System.ArgumentException : Password cannot be empty (Parameter 'password')
[xUnit.net 00:00:13.17]       Stack Trace:
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(52,0): at NeoSharp.Wallet.NEP2.Encrypt(Byte[] privateKey, String password, ScryptParams scryptParams, String address)
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(35,0): at NeoSharp.Wallet.NEP2.Encrypt(ECKeyPair keyPair, String password, ScryptParams scryptParams)
[xUnit.net 00:00:13.17]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(146,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password)
[xUnit.net 00:00:13.17]            at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
[xUnit.net 00:00:13.17]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:16.97]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:16.97]       Stack Trace:
[xUnit.net 00:00:16.97]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:16.97]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:16.97]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:16.97]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(147,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password)
[xUnit.net 00:00:16.97]            at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
[xUnit.net 00:00:16.97]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:20.84]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:20.84]       Stack Trace:
[xUnit.net 00:00:20.84]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:20.84]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:20.84]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:20.84]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(147,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(String password)
[xUnit.net 00:00:20.84]            at InvokeStub_NEP2Tests.TestVariousPasswords(Object, Span`1)
[xUnit.net 00:00:20.84]            at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
[xUnit.net 00:00:24.75]       Expected a &lt;NeoSharp.Crypto.NEP2Exception&gt; to be thrown, but found &lt;System.FormatException&gt;:
[xUnit.net 00:00:24.75]       System.FormatException: Invalid base58 check string
[xUnit.net 00:00:24.75]          at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 280
[xUnit.net 00:00:24.75]          at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 123
[xUnit.net 00:00:24.75]          at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
[xUnit.net 00:00:24.75]          at NeoSharp.Tests.Crypto.NEP2Tests.&lt;&gt;c__DisplayClass5_0.&lt;TestDecryptWithWrongPassword&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 108
[xUnit.net 00:00:24.75]          at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
[xUnit.net 00:00:24.75]          at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().
[xUnit.net 00:00:24.75]       Stack Trace:
[xUnit.net 00:00:24.75]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:24.75]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:24.75]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:24.75]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:24.75]            at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
[xUnit.net 00:00:24.75]            at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
[xUnit.net 00:00:24.75]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(109,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithWrongPassword()
[xUnit.net 00:00:24.75]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:24.75]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:29.34]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:29.34]       Stack Trace:
[xUnit.net 00:00:29.34]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:29.34]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.34]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.34]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(171,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2WithDifferentScryptParams()
[xUnit.net 00:00:29.34]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:29.34]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:29.35]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:29.35]       Stack Trace:
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(273,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(22,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithDefaultScryptParams()
[xUnit.net 00:00:29.35]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:29.35]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:29.35]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:29.35]       Stack Trace:
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(273,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:29.35]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(37,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithNonDefaultScryptParams()
[xUnit.net 00:00:29.35]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:29.35]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:35.93]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:35.93]       Stack Trace:
[xUnit.net 00:00:35.93]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:35.93]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:35.93]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:35.93]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(89,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestRoundTripEncryptionDecryption()
[xUnit.net 00:00:35.93]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:35.93]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:35.93]       Expected encrypted to be "6PYM7jHL3uwhP8uuHP9fMGMfJxfyQbanUZPQEh1772iyb7vRnUkbkZmdRT" with a length of 58, but "QnVwghv7C7vBxoJCewcvJSY3Eeoa6DT3BMUhjUeCbwokzCHpoP9mrgMTM27" has a length of 59, differs near "QnV" (index 0).
[xUnit.net 00:00:35.93]       Stack Trace:
[xUnit.net 00:00:35.93]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:35.93]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:35.93]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:35.93]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:35.93]            at FluentAssertions.Primitives.StringEqualityValidator.ValidateAgainstLengthDifferences()
[xUnit.net 00:00:35.93]            at FluentAssertions.Primitives.StringValidator.Validate()
[xUnit.net 00:00:35.93]            at FluentAssertions.Primitives.StringAssertions`1.Be(String expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:35.93]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(74,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithNonDefaultScryptParams()
[xUnit.net 00:00:35.93]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:35.93]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:43.63]       Expected encrypted1 not to be "QnVwghv7A5r1UrnrEfimzGdeWjpMeQEubkwJkW5rqaaAhKU2r1gR2LLi6t7".
[xUnit.net 00:00:43.63]       Stack Trace:
[xUnit.net 00:00:43.63]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:43.63]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:43.63]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:43.63]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:43.63]            at FluentAssertions.Primitives.StringAssertions`1.NotBe(String unexpected, String because, Object[] becauseArgs)
[xUnit.net 00:00:43.63]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(223,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestMultipleEncryptionsProduceDifferentResults()
[xUnit.net 00:00:43.63]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:43.63]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:47.45]       Expected encrypted to start with "6P", but "QnVwghv7ANAQWynE6qPk4MoqbsU4Ny3gBGJ3SzERCgYH6mjWmFMecHDYNdD" differs near "QnV" (index 0).
[xUnit.net 00:00:47.45]       Stack Trace:
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:47.45]            at FluentAssertions.Primitives.StringStartValidator.ValidateAgainstMismatch()
[xUnit.net 00:00:47.45]            at FluentAssertions.Primitives.StringValidator.Validate()
[xUnit.net 00:00:47.45]            at FluentAssertions.Primitives.StringAssertions`1.StartWith(String expected, String because, Object[] becauseArgs)
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(54,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithDefaultScryptParams()
[xUnit.net 00:00:47.45]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:47.45]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:47.45]       System.FormatException : Invalid base58 check string
[xUnit.net 00:00:47.45]       Stack Trace:
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(280,0): at NeoSharp.Wallet.NEP2.Base58CheckDecode(String encoded)
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(123,0): at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs(103,0): at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams)
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(204,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2AddressGeneration()
[xUnit.net 00:00:47.45]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:47.45]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:47.45]       Expected a &lt;System.FormatException&gt; to be thrown, but found &lt;System.ArgumentException&gt;:
[xUnit.net 00:00:47.45]       System.ArgumentException: NEP-2 key cannot be empty (Parameter 'nep2Key')
[xUnit.net 00:00:47.45]          at NeoSharp.Wallet.NEP2.DecryptToBytes(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 117
[xUnit.net 00:00:47.45]          at NeoSharp.Wallet.NEP2.Decrypt(String nep2Key, String password, ScryptParams scryptParams) in /home/ubuntu/NeoSwift/NeoSharp/src/NeoSharp/Wallet/NEP2.cs:line 103
[xUnit.net 00:00:47.45]          at NeoSharp.Tests.Crypto.NEP2Tests.&lt;&gt;c__DisplayClass6_0.&lt;TestInvalidNEP2Format&gt;b__0() in /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs:line 128
[xUnit.net 00:00:47.45]          at FluentAssertions.Specialized.ActionAssertions.InvokeSubject()
[xUnit.net 00:00:47.45]          at FluentAssertions.Specialized.DelegateAssertions`2.InvokeSubjectWithInterception().
[xUnit.net 00:00:47.45]       Stack Trace:
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)
[xUnit.net 00:00:47.45]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)
[xUnit.net 00:00:47.45]            at FluentAssertions.Specialized.DelegateAssertionsBase`2.ThrowInternal[TException](Exception exception, String because, Object[] becauseArgs)
[xUnit.net 00:00:47.45]            at FluentAssertions.Specialized.DelegateAssertions`2.Throw[TException](String because, Object[] becauseArgs)
[xUnit.net 00:00:47.45]         /home/ubuntu/NeoSwift/NeoSharp/tests/NeoSharp.Tests/Crypto/NEP2Tests.cs(129,0): at NeoSharp.Tests.Crypto.NEP2Tests.TestInvalidNEP2Format()
[xUnit.net 00:00:47.45]            at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)
[xUnit.net 00:00:47.45]            at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)
[xUnit.net 00:00:47.46]   Finished:    NeoSharp.Tests
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4921830+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsStringRepresentation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4924704+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsPerformanceRelativeTime [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4925064+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 256, r: 1, p: 1) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4926473+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 32768, r: 8, p: 8) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4929309+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 16384, r: 8, p: 8) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4931659+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsRoundTrip(n: 4096, r: 4, p: 4) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4933490+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestDefaultScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.4935532+00:00">
        <Text>[xUnit.net 00:00:00.16]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestSerialize [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5194704+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsIncompleteJson [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5195262+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: "{\"cost\":7,\"blockSize\":8,\"p\":9}") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5195502+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: "{\"N\":7,\"R\":8,\"P\":9}") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5195731+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsJsonVariations(json: "{\"n\": 7, \"r\": 8, \"p\": 9}") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5195957+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsEquality [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5196204+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsMemoryUsageCalculation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5196474+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestDeserialize [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5196864+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsValidation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5197108+00:00">
        <Text>[xUnit.net 00:00:00.17]     NeoSharp.Tests.Crypto.ScryptParamsTests.TestScryptParamsWithExtraFields [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5206786+00:00">
        <Text>[xUnit.net 00:00:00.18]     NeoSharp.Tests.Crypto.WIFTests.UncompressedWif_ShouldDecodeCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5232334+00:00">
        <Text>[xUnit.net 00:00:00.19]     NeoSharp.Tests.Crypto.WIFTests.CompressedFlag_ShouldBeHandledCorrectly(compressed: False) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5252874+00:00">
        <Text>[xUnit.net 00:00:00.20]     NeoSharp.Tests.Crypto.ECKeyPairTests.NewPublicKeyFromUncompressedPoint_ShouldCompressCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5416590+00:00">
        <Text>[xUnit.net 00:00:00.22]     NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: "Hello World") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5426185+00:00">
        <Text>[xUnit.net 00:00:00.22]     NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: "\ud83d\ude80 Unicode message with emojis \ud83d\udd10") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5433791+00:00">
        <Text>[xUnit.net 00:00:00.22]     NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: "") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5441312+00:00">
        <Text>[xUnit.net 00:00:00.22]     NeoSharp.Tests.Crypto.SignTests.TestSignVariousMessages(message: "This is a longer message that tests the signing al"···) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5493428+00:00">
        <Text>[xUnit.net 00:00:00.22]     NeoSharp.Tests.Crypto.SignTests.TestSignatureWithWrongKey [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5529727+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestSignDifferentMessages [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5538756+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromSignedMessage [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5544802+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestRecoverSigningScriptHash [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5554352+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestSignMessage [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5562576+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestDeterministicSigning [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5570889+00:00">
        <Text>[xUnit.net 00:00:00.23]     NeoSharp.Tests.Crypto.SignTests.TestVerifySignature [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5737716+00:00">
        <Text>[xUnit.net 00:00:00.25]     NeoSharp.Tests.Wallet.AccountTests.GetAddress_ShouldReturnCorrectAddress [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5744531+00:00">
        <Text>[xUnit.net 00:00:00.25]     NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBigInteger_ShouldReadCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5759927+00:00">
        <Text>[xUnit.net 00:00:00.25]     NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_ShouldDecryptPrivateKey [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5776629+00:00">
        <Text>[xUnit.net 00:00:00.25]     NeoSharp.Tests.Serialization.BinaryWriterTests.WriteVarBytes_WithBigIntegerData_ShouldEncodeCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5787086+00:00">
        <Text>[xUnit.net 00:00:00.25]     NeoSharp.Tests.Script.ScriptBuilderTests.PushString_ShouldHandleDifferentSizes [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5826844+00:00">
        <Text>[xUnit.net 00:00:00.26]     NeoSharp.Tests.Wallet.AccountTests.DecryptPrivateKey_WithWrongPassword_ShouldThrowException [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5838483+00:00">
        <Text>[xUnit.net 00:00:00.26]     NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKeys_ShouldCreateCorrectScript [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5857821+00:00">
        <Text>[xUnit.net 00:00:00.26]     NeoSharp.Tests.Serialization.BinaryWriterTests.Reset_ShouldClearBuffer [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5871810+00:00">
        <Text>[xUnit.net 00:00:00.26]     NeoSharp.Tests.Crypto.SignTests.TestPublicKeyFromPrivateKey [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5895535+00:00">
        <Text>[xUnit.net 00:00:00.26]     NeoSharp.Tests.Script.ScriptBuilderTests.VerificationScriptFromPublicKey_ShouldCreateCorrectScript [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5913998+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Crypto.SignTests.TestInvalidSignatureVerification [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5914473+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Crypto.SignTests.TestKeyFromSignedMessageWithInvalidSignature [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5919345+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.Equals_ShouldCompareByScriptHash [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5929548+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.FromWIF_ShouldCreateCorrectAccount [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5932343+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.EncryptPrivateKey_ShouldEncryptPrivateKey [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5946030+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.SignData_ShouldCreateValidSignature [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.5964500+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.Sign_ShouldCreateValidSignature [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6018489+00:00">
        <Text>[xUnit.net 00:00:00.27]     NeoSharp.Tests.Wallet.AccountTests.Sign_WithLockedAccount_ShouldThrowException [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6047223+00:00">
        <Text>[xUnit.net 00:00:00.28]     NeoSharp.Tests.Wallet.AccountTests.CreateMultiSigAccount_WithEmptyPublicKeys_ShouldThrowArgumentException [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6051422+00:00">
        <Text>[xUnit.net 00:00:00.28]     NeoSharp.Tests.Wallet.AccountTests.IsWatchOnly_ShouldReturnFalseForAccountsWithPrivateKey [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6054468+00:00">
        <Text>[xUnit.net 00:00:00.28]     NeoSharp.Tests.Wallet.AccountTests.GetScriptHash_ShouldReturnCorrectHash [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6057223+00:00">
        <Text>[xUnit.net 00:00:00.28]     NeoSharp.Tests.Crypto.ECKeyPairTests.KeyPairVerification_ShouldVerifyOwnSignature [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.6064917+00:00">
        <Text>[xUnit.net 00:00:00.28]     NeoSharp.Tests.Crypto.ECKeyPairTests.PublicKeyEquality_ShouldWorkCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.9102256+00:00">
        <Text>[xUnit.net 00:00:00.58]     NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushData_WithInvalidOpCode_ShouldThrowException [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.9142303+00:00">
        <Text>[xUnit.net 00:00:00.59]     NeoSharp.Tests.Serialization.BinaryReaderTests.ReadPushDataBigInteger_ShouldReadNumbersCorrectly [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:09.9185865+00:00">
        <Text>[xUnit.net 00:00:00.59]     NeoSharp.Tests.Serialization.BinaryReaderTests.ReadBoolean_ShouldReadBooleaneanValues [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:14.1070623+00:00">
        <Text>[xUnit.net 00:00:04.78]     NeoSharp.Tests.Crypto.SecurityTests.TestNEP2WrongPassword [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:14.1172403+00:00">
        <Text>[xUnit.net 00:00:04.79]     NeoSharp.Tests.Crypto.SecurityTests.TestSignatureVerification [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:14.1265164+00:00">
        <Text>[xUnit.net 00:00:04.80]     NeoSharp.Tests.Crypto.SecurityTests.TestTimingAttackResistance [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:14.1402375+00:00">
        <Text>[xUnit.net 00:00:04.82]     NeoSharp.Tests.Crypto.SecurityTests.TestDeterministicSignatures [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:14.1442361+00:00">
        <Text>[xUnit.net 00:00:04.82]     NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2KeyChecksumValidation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:18.3838035+00:00">
        <Text>[xUnit.net 00:00:09.06]     NeoSharp.Tests.Crypto.SecurityTests.TestNEP2EncryptionDecryption [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:18.3867376+00:00">
        <Text>[xUnit.net 00:00:09.06]     NeoSharp.Tests.Crypto.SecurityTests.TestWIFImportSecurely [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:18.4287421+00:00">
        <Text>[xUnit.net 00:00:09.10]     NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: "password") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:22.4939175+00:00">
        <Text>[xUnit.net 00:00:13.17]     NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: "a") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:22.4945130+00:00">
        <Text>[xUnit.net 00:00:13.17]     NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: "") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:26.2961641+00:00">
        <Text>[xUnit.net 00:00:16.97]     NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: "VeryLongPasswordWithSpecialCharacters!@#$%^&amp;*()_+-"···) [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:30.1676914+00:00">
        <Text>[xUnit.net 00:00:20.84]     NeoSharp.Tests.Crypto.NEP2Tests.TestVariousPasswords(password: "\ud83d\udd10\ud83d\udd11\ud83d\udc8e") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:34.0721279+00:00">
        <Text>[xUnit.net 00:00:24.75]     NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithWrongPassword [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:38.6689626+00:00">
        <Text>[xUnit.net 00:00:29.34]     NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2WithDifferentScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:38.6702374+00:00">
        <Text>[xUnit.net 00:00:29.35]     NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithDefaultScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:38.6703133+00:00">
        <Text>[xUnit.net 00:00:29.35]     NeoSharp.Tests.Crypto.NEP2Tests.TestDecryptWithNonDefaultScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:45.2513268+00:00">
        <Text>[xUnit.net 00:00:35.93]     NeoSharp.Tests.Crypto.NEP2Tests.TestRoundTripEncryptionDecryption [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:45.2547570+00:00">
        <Text>[xUnit.net 00:00:35.93]     NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithNonDefaultScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:52.9588822+00:00">
        <Text>[xUnit.net 00:00:43.63]     NeoSharp.Tests.Crypto.NEP2Tests.TestMultipleEncryptionsProduceDifferentResults [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:56.7775558+00:00">
        <Text>[xUnit.net 00:00:47.45]     NeoSharp.Tests.Crypto.NEP2Tests.TestEncryptWithDefaultScryptParams [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:56.7782170+00:00">
        <Text>[xUnit.net 00:00:47.45]     NeoSharp.Tests.Crypto.NEP2Tests.TestNEP2AddressGeneration [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="r3e" outcome="Error" timestamp="2025-08-22T04:19:56.7790997+00:00">
        <Text>[xUnit.net 00:00:47.45]     NeoSharp.Tests.Crypto.NEP2Tests.TestInvalidNEP2Format [FAIL]</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>