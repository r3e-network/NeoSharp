<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoSharp</name>
    </assembly>
    <members>
        <member name="T:NeoSharp.Contract.ContractException">
            <summary>
            Exception thrown when contract operations fail
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.#ctor">
            <summary>
            Initializes a new instance of the ContractException class
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ContractException class with a specified error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ContractException class with a specified error message and inner exception
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.InvalidNeoName(System.String)">
            <summary>
            Creates a ContractException for invalid NNS names
            </summary>
            <param name="name">The invalid NNS name</param>
            <returns>A new ContractException</returns>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.InvalidNeoNameServiceRoot(System.String)">
            <summary>
            Creates a ContractException for invalid NNS roots
            </summary>
            <param name="root">The invalid NNS root</param>
            <returns>A new ContractException</returns>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.UnexpectedReturnType(System.String,System.String[])">
            <summary>
            Creates a ContractException for unexpected return types
            </summary>
            <param name="actualType">The actual return type</param>
            <param name="expectedTypes">The expected return types</param>
            <returns>A new ContractException</returns>
        </member>
        <member name="M:NeoSharp.Contract.ContractException.UnresolvableDomainName(System.String)">
            <summary>
            Creates a ContractException for unresolvable domain names
            </summary>
            <param name="domainName">The unresolvable domain name</param>
            <returns>A new ContractException</returns>
        </member>
        <member name="T:NeoSharp.Contract.FungibleToken">
            <summary>
            Represents a fungible token contract that is compliant with the NEP-17 standard
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.#ctor(NeoSharp.Types.Hash160,NeoSharp.Protocol.INeoSharp)">
            <summary>
            Initializes a new FungibleToken instance
            </summary>
            <param name="scriptHash">The token contract's script hash</param>
            <param name="neoSharp">The NeoSharp instance for invocations</param>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.GetBalanceOfAsync(NeoSharp.Wallet.Account)">
            <summary>
            Gets the token balance for the given account
            The token amount is returned in token fractions. E.g., an amount of 1 GAS is returned as 1*10^8 GAS fractions.
            The balance is not cached locally. Every time this method is called requests are sent to the Neo node.
            </summary>
            <param name="account">The account to fetch the balance for</param>
            <returns>The token balance in fractions</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.GetBalanceOfAsync(NeoSharp.Types.Hash160)">
            <summary>
            Gets the token balance for the given account script hash
            The token amount is returned in token fractions. E.g., an amount of 1 GAS is returned as 1*10^8 GAS fractions.
            The balance is not cached locally. Every time this method is called requests are sent to the Neo node.
            </summary>
            <param name="scriptHash">The script hash to fetch the balance for</param>
            <returns>The token balance in fractions</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.GetBalanceOfAsync(NeoSharp.Wallet.Wallet)">
            <summary>
            Gets the token balance for all accounts in the given wallet
            The token amount is returned in token fractions. E.g., an amount of 1 GAS is returned as 1*10^8 GAS fractions.
            The balance is not cached locally. Every time this method is called requests are sent to the Neo node.
            </summary>
            <param name="wallet">The wallet to fetch the balance for</param>
            <returns>The total token balance across all accounts</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.Transfer(NeoSharp.Wallet.Account,NeoSharp.Types.Hash160,System.Int64,NeoSharp.Types.ContractParameter)">
            <summary>
            Creates a transfer transaction with the sender account set as a signer
            Only use this method when the recipient is a deployed smart contract to avoid unnecessary additional fees.
            Otherwise, use the method without a contract parameter for data.
            </summary>
            <param name="from">The sender account</param>
            <param name="to">The script hash of the recipient</param>
            <param name="amount">The amount to transfer in token fractions</param>
            <param name="data">Optional data passed to the onPayment method if recipient is a contract</param>
            <returns>A transaction builder ready for signing</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.Transfer(NeoSharp.Types.Hash160,NeoSharp.Types.Hash160,System.Int64,NeoSharp.Types.ContractParameter)">
            <summary>
            Creates a transfer transaction without setting signers
            No signers are set on the returned transaction builder. It is up to you to set the correct ones,
            e.g., a ContractSigner in case the 'from' address is a contract.
            </summary>
            <param name="from">The script hash of the sender</param>
            <param name="to">The script hash of the recipient</param>
            <param name="amount">The amount to transfer in token fractions</param>
            <param name="data">Optional data passed to the onPayment method if recipient is a contract</param>
            <returns>A transaction builder ready for signing</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.BuildTransferScript(NeoSharp.Types.Hash160,NeoSharp.Types.Hash160,System.Int64,NeoSharp.Types.ContractParameter)">
            <summary>
            Builds a script that invokes the transfer method on the fungible token
            </summary>
            <param name="from">The sender script hash</param>
            <param name="to">The recipient script hash</param>
            <param name="amount">The transfer amount in token fractions</param>
            <param name="data">Optional data passed to the onPayment method if recipient is a contract</param>
            <returns>The transfer script</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.TransferAsync(NeoSharp.Wallet.Account,NeoSharp.Types.NnsName,System.Int64,NeoSharp.Types.ContractParameter)">
            <summary>
            Creates a transfer transaction using NNS domain name resolution
            Resolves the text record of the recipient's NNS domain name. The resolved value is expected to be a valid Neo address.
            The sender account is set as a signer of the transaction.
            </summary>
            <param name="from">The sender account</param>
            <param name="to">The NNS domain name to resolve</param>
            <param name="amount">The amount to transfer in token fractions</param>
            <param name="data">Optional data passed to the onPayment method if recipient is a contract</param>
            <returns>A transaction builder ready for signing</returns>
        </member>
        <member name="M:NeoSharp.Contract.FungibleToken.TransferAsync(NeoSharp.Types.Hash160,NeoSharp.Types.NnsName,System.Int64,NeoSharp.Types.ContractParameter)">
            <summary>
            Creates a transfer transaction using NNS domain name resolution without setting signers
            No signers are set on the returned transaction builder. It is up to you to set the correct ones,
            e.g., a ContractSigner in case the 'from' address is a contract.
            </summary>
            <param name="from">The sender script hash</param>
            <param name="to">The NNS domain name to resolve</param>
            <param name="amount">The amount to transfer in token fractions</param>
            <param name="data">Optional data passed to the onPayment method if recipient is a contract</param>
            <returns>A transaction builder ready for signing</returns>
        </member>
        <member name="T:NeoSharp.Contract.NeoToken">
            <summary>
            Represents the NeoToken native contract and provides methods to invoke its functions
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.NeoToken.Name">
            <summary>
            The contract name
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.NeoToken.ScriptHash">
            <summary>
            The contract script hash
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.NeoToken.Decimals">
            <summary>
            The number of decimal places
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.NeoToken.Symbol">
            <summary>
            The token symbol
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.NeoToken.TotalSupply">
            <summary>
            The total supply
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.#ctor(NeoSharp.Protocol.INeoSharp)">
            <summary>
            Initializes a new NeoToken instance
            </summary>
            <param name="neoSharp">The NeoSharp instance for invocations</param>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetNameAsync">
            <summary>
            Returns the name of the NEO token
            Doesn't require a call to the Neo node
            </summary>
            <returns>The token name</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetSymbolAsync">
            <summary>
            Returns the symbol of the NEO token
            Doesn't require a call to the Neo node
            </summary>
            <returns>The token symbol</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetTotalSupplyAsync">
            <summary>
            Returns the total supply of the NEO token
            Doesn't require a call to the Neo node
            </summary>
            <returns>The total supply</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetDecimalsAsync">
            <summary>
            Returns the number of decimals of the NEO token
            Doesn't require a call to the Neo node
            </summary>
            <returns>The number of decimals</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetUnclaimedGasAsync(NeoSharp.Wallet.Account,System.Int32)">
            <summary>
            Gets the amount of unclaimed GAS at the given height for the given account
            </summary>
            <param name="account">The account</param>
            <param name="blockHeight">The block height</param>
            <returns>The amount of unclaimed GAS</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetUnclaimedGasAsync(NeoSharp.Types.Hash160,System.Int32)">
            <summary>
            Gets the amount of unclaimed GAS at the given height for the given script hash
            </summary>
            <param name="scriptHash">The account's script hash</param>
            <param name="blockHeight">The block height</param>
            <returns>The amount of unclaimed GAS</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.RegisterCandidate(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates a transaction script for registering a candidate with the given public key
            Note that the transaction has to be signed with the account corresponding to the public key
            </summary>
            <param name="candidateKey">The public key to register as a candidate</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.UnregisterCandidate(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates a transaction script for unregistering a candidate with the given public key
            </summary>
            <param name="candidateKey">The public key to unregister as a candidate</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetCommitteeAsync">
            <summary>
            Gets the public keys of the current committee members
            </summary>
            <returns>The committee members' public keys</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetCandidatesAsync">
            <summary>
            Gets the public keys of the registered candidates and their corresponding vote count
            Note that this method returns at max 256 candidates. Use GetAllCandidatesIteratorAsync to traverse all candidates if there are more than 256.
            </summary>
            <returns>The candidates</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.IsCandidateAsync(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Checks if there is a candidate with the provided public key
            Note that this only checks the first 256 candidates. Use GetAllCandidatesIteratorAsync to traverse all candidates if there are more than 256.
            </summary>
            <param name="publicKey">The candidate's public key</param>
            <returns>True if the public key belongs to a candidate, otherwise false</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetAllCandidatesIteratorAsync">
            <summary>
            Gets an iterator of all registered candidates
            Use the method Iterator.TraverseAsync to traverse the iterator and retrieve all candidates
            </summary>
            <returns>An iterator of all registered candidates</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.CandidateMapper(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Maps a stack item to a Candidate object
            </summary>
            <param name="stackItem">The stack item to map</param>
            <returns>The mapped candidate</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetCandidateVotesAsync(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Gets the votes for a specific candidate
            </summary>
            <param name="publicKey">The candidate's public key</param>
            <returns>The candidate's votes, or -1 if not found</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetNextBlockValidatorsAsync">
            <summary>
            Gets the public keys of the next block's validators
            </summary>
            <returns>The validators' public keys</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.CallFunctionReturningListOfPublicKeysAsync(System.String)">
            <summary>
            Calls a function that returns a list of public keys
            </summary>
            <param name="function">The function name</param>
            <returns>The list of public keys</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.ExtractPublicKey(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Extracts a public key from a stack item
            </summary>
            <param name="keyItem">The stack item containing the public key</param>
            <returns>The extracted public key</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.VoteAsync(NeoSharp.Wallet.Account,NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates a transaction script to vote for the given candidate
            </summary>
            <param name="voter">The account that casts the vote</param>
            <param name="candidate">The candidate to vote for. If null, then the current vote of the voter is withdrawn</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.VoteAsync(NeoSharp.Types.Hash160,NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates a transaction script to vote for the given candidate
            </summary>
            <param name="voter">The account script hash that casts the vote</param>
            <param name="candidate">The candidate to vote for. If null, then the current vote of the voter is withdrawn</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.CancelVoteAsync(NeoSharp.Wallet.Account)">
            <summary>
            Creates a transaction script to cancel the vote of the voter
            </summary>
            <param name="voter">The account for which to cancel the vote</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.CancelVoteAsync(NeoSharp.Types.Hash160)">
            <summary>
            Creates a transaction script to cancel the vote of the voter
            </summary>
            <param name="voter">The account script hash for which to cancel the vote</param>
            <returns>A transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.BuildVoteScript(NeoSharp.Types.Hash160,NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Builds a script to vote for a candidate
            </summary>
            <param name="voter">The account that casts the vote</param>
            <param name="candidate">The candidate to vote for. If null, then the current vote is withdrawn</param>
            <returns>The voting script</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetGasPerBlockAsync">
            <summary>
            Gets the number of GAS generated in each block
            </summary>
            <returns>The max GAS amount per block</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.SetGasPerBlock(System.Int32)">
            <summary>
            Creates a transaction script to set the number of GAS generated in each block
            This contract invocation can only be successful if it is signed by the network committee
            </summary>
            <param name="gasPerBlock">The maximum amount of GAS in one block</param>
            <returns>The transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetRegisterPriceAsync">
            <summary>
            Gets the price to register as a candidate
            </summary>
            <returns>The price to register as a candidate</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.SetRegisterPrice(System.Int32)">
            <summary>
            Creates a transaction script to set the price for candidate registration
            This contract invocation can only be successful if it is signed by the network committee
            </summary>
            <param name="registerPrice">The price to register as a candidate</param>
            <returns>The transaction builder</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.GetAccountStateAsync(NeoSharp.Types.Hash160)">
            <summary>
            Gets the state of an account
            </summary>
            <param name="accountHash">The account script hash to get the state from</param>
            <returns>The account state</returns>
        </member>
        <member name="T:NeoSharp.Contract.NeoToken.Candidate">
            <summary>
            Represents the state of a candidate
            </summary>
        </member>
        <member name="P:NeoSharp.Contract.NeoToken.Candidate.PublicKey">
            <summary>
            The candidate's public key
            </summary>
        </member>
        <member name="P:NeoSharp.Contract.NeoToken.Candidate.Votes">
            <summary>
            The candidate's votes based on the summed up NEO balances of voters
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.Candidate.#ctor(NeoSharp.Crypto.ECPublicKey,System.Int32)">
            <summary>
            Initializes a new Candidate instance
            </summary>
            <param name="publicKey">The candidate's public key</param>
            <param name="votes">The candidate's vote count</param>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.Candidate.Equals(NeoSharp.Contract.NeoToken.Candidate)">
            <summary>
            Determines whether this candidate equals another
            </summary>
            <param name="other">The other candidate to compare</param>
            <returns>True if the candidates are equal</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.Candidate.Equals(System.Object)">
            <summary>
            Determines whether this candidate equals another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.Candidate.GetHashCode">
            <summary>
            Gets the hash code for this candidate
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NeoSharp.Contract.NeoToken.Candidate.ToString">
            <summary>
            Returns a string representation of this candidate
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:NeoSharp.Contract.SmartContract">
            <summary>
            Represents a smart contract on the Neo blockchain and provides methods to invoke and deploy it
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.SmartContract.DefaultIteratorCount">
            <summary>
            Default number of items to retrieve when iterating
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.SmartContract.ScriptHash">
            <summary>
            The script hash of this smart contract
            </summary>
        </member>
        <member name="F:NeoSharp.Contract.SmartContract.NeoSharp">
            <summary>
            The NeoSharp instance used for contract invocations
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.#ctor(NeoSharp.Types.Hash160,NeoSharp.Protocol.INeoSharp)">
            <summary>
            Initializes a new SmartContract instance
            </summary>
            <param name="scriptHash">The smart contract's script hash</param>
            <param name="neoSharp">The NeoSharp instance for invocations</param>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.InvokeFunction(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Initializes a TransactionBuilder for invoking this contract with the specified function and parameters
            </summary>
            <param name="function">The function to invoke</param>
            <param name="parameters">The parameters to pass with the invocation</param>
            <returns>A transaction builder for setting further details</returns>
            <exception cref="T:System.ArgumentException">Thrown when function name is empty</exception>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.BuildInvokeFunctionScript(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Builds a script to invoke a function on this smart contract
            </summary>
            <param name="function">The function to invoke</param>
            <param name="parameters">The parameters to pass with the invocation</param>
            <returns>The invocation script</returns>
            <exception cref="T:System.ArgumentException">Thrown when function name is empty</exception>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionReturningStringAsync(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Sends an invokefunction RPC call expecting a string return type
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <returns>The string returned by the contract</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionReturningIntAsync(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Sends an invokefunction RPC call expecting an integer return type
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <returns>The integer returned by the contract</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionReturningBoolAsync(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Sends an invokefunction RPC call expecting a boolean return type
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <returns>The boolean returned by the contract</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionReturningScriptHashAsync(System.String,NeoSharp.Types.ContractParameter[])">
            <summary>
            Sends an invokefunction RPC call expecting a script hash return type
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <returns>The script hash returned by the contract</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.ExtractScriptHash(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Extracts a script hash from a stack item
            </summary>
            <param name="item">The stack item</param>
            <returns>The extracted script hash</returns>
            <exception cref="T:NeoSharp.Contract.ContractException">Thrown when the item format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionReturningIteratorAsync``1(System.String,NeoSharp.Types.ContractParameter[],System.Func{NeoSharp.Protocol.Core.Response.StackItem,``0})">
            <summary>
            Sends an invokefunction RPC call expecting an iterator return type
            </summary>
            <typeparam name="T">The type to map iterator items to</typeparam>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <param name="mapper">The function to map stack items</param>
            <returns>The iterator</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionAndTraverseIteratorAsync``1(System.String,NeoSharp.Types.ContractParameter[],System.Int32,System.Func{NeoSharp.Protocol.Core.Response.StackItem,``0})">
            <summary>
            Sends an invokefunction RPC call and traverses the returned iterator
            </summary>
            <typeparam name="T">The type to map iterator items to</typeparam>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <param name="maxItems">The maximum number of items to return</param>
            <param name="mapper">The function to map stack items</param>
            <returns>The mapped iterator items</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionAndUnwrapIteratorAsync(System.String,NeoSharp.Types.ContractParameter[],System.Int32,NeoSharp.Types.Signer[])">
            <summary>
            Calls a function and unwraps the returned iterator on the NeoVM
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <param name="maxItems">The maximum number of items to return</param>
            <param name="signers">The signers for this request</param>
            <returns>The unwrapped stack items</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallInvokeFunctionAsync(System.String,NeoSharp.Types.ContractParameter[],NeoSharp.Types.Signer[])">
            <summary>
            Sends an invokefunction RPC call to the contract
            </summary>
            <param name="function">The function to call</param>
            <param name="parameters">The contract parameters</param>
            <param name="signers">The signers for this request</param>
            <returns>The call response</returns>
            <exception cref="T:System.ArgumentException">Thrown when function name is empty</exception>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CallFunctionAsync(System.String,System.Object[],NeoSharp.Types.Signer[])">
            <summary>
            Invokes a function on this smart contract (alias for CallInvokeFunctionAsync)
            </summary>
            <param name="function">The function to invoke</param>
            <param name="parameters">The parameters to pass with the invocation</param>
            <param name="signers">The signers to use</param>
            <returns>The invocation result</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.ThrowIfFaultState(NeoSharp.Protocol.Core.Response.InvocationResult)">
            <summary>
            Throws an exception if the invocation result has a fault state
            </summary>
            <param name="invocationResult">The invocation result to check</param>
            <exception cref="T:NeoSharp.Protocol.ProtocolException">Thrown when the result has a fault state</exception>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.GetManifestAsync">
            <summary>
            Gets the manifest of this smart contract
            </summary>
            <returns>The contract manifest</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.GetNameAsync">
            <summary>
            Gets the name of this smart contract
            </summary>
            <returns>The contract name</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CalculateNativeContractHash(System.String)">
            <summary>
            Calculates the hash of a native contract
            </summary>
            <param name="contractName">The contract name</param>
            <returns>The contract hash</returns>
        </member>
        <member name="M:NeoSharp.Contract.SmartContract.CalculateContractHash(NeoSharp.Types.Hash160,System.Int32,System.String)">
            <summary>
            Calculates the hash of a contract deployed by the specified sender
            </summary>
            <param name="sender">The sender of the deployment transaction</param>
            <param name="nefChecksum">The checksum of the contract's NEF file</param>
            <param name="contractName">The contract's name</param>
            <returns>The contract hash</returns>
        </member>
        <member name="T:NeoSharp.Contract.Token">
            <summary>
            Represents a token wrapper class that contains shared methods for fungible NEP-17 and non-fungible NEP-11 token standards
            </summary>
        </member>
        <member name="M:NeoSharp.Contract.Token.#ctor(NeoSharp.Types.Hash160,NeoSharp.Protocol.INeoSharp)">
            <summary>
            Initializes a new Token instance
            </summary>
            <param name="scriptHash">The token contract's script hash</param>
            <param name="neoSharp">The NeoSharp instance for invocations</param>
        </member>
        <member name="M:NeoSharp.Contract.Token.GetTotalSupplyAsync">
            <summary>
            Gets the total supply of this token in fractions
            The return value is retrieved from the neo-node only once and then cached
            </summary>
            <returns>The total supply</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.GetDecimalsAsync">
            <summary>
            Gets the number of fractions that one unit of this token can be divided into
            The return value is retrieved from the neo-node only once and then cached
            </summary>
            <returns>The number of decimals</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.GetSymbolAsync">
            <summary>
            Gets the symbol of this token
            The return value is retrieved from the neo-node only once and then cached
            </summary>
            <returns>The token symbol</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.ToFractionsAsync(System.Decimal)">
            <summary>
            Converts the token amount from a decimal number to token fractions according to this token's decimals
            Use this method to convert e.g. 1.5 GAS to its fraction value 150,000,000
            </summary>
            <param name="amount">The token amount in decimals</param>
            <returns>The token amount in fractions</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.ToFractions(System.Decimal,System.Int32)">
            <summary>
            Converts the token amount from a decimal number to token fractions according to the specified decimals
            Use this method to convert e.g. a token amount of 25.5 for a token with 4 decimals to 255,000
            </summary>
            <param name="amount">The token amount in decimals</param>
            <param name="decimals">The number of decimals</param>
            <returns>The token amount in fractions</returns>
            <exception cref="T:System.ArgumentException">Thrown when amount has more decimal places than supported</exception>
        </member>
        <member name="M:NeoSharp.Contract.Token.ToDecimalsAsync(System.Int64)">
            <summary>
            Converts the token amount from token fractions to its decimal value according to this token's decimals
            Use this method to convert e.g. 600,000 GAS to its decimal value 0.006
            </summary>
            <param name="amount">The token amount in fractions</param>
            <returns>The token amount in decimals</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.ToDecimals(System.Int64,System.Int32)">
            <summary>
            Converts the token amount from token fractions to its decimal value according to the specified decimals
            Use this method to convert e.g. 600,000 token fractions to its decimal value
            </summary>
            <param name="amount">The token amount in fractions</param>
            <param name="decimals">The number of decimals</param>
            <returns>The token amount in decimals</returns>
        </member>
        <member name="M:NeoSharp.Contract.Token.ResolveNnsTextRecordAsync(NeoSharp.Types.NnsName)">
            <summary>
            Resolves an NNS domain name to a Hash160 address
            </summary>
            <param name="name">The NNS domain name</param>
            <returns>The resolved Hash160 address</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when name is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when resolution fails</exception>
        </member>
        <member name="T:NeoSharp.Core.CallFlags">
            <summary>
            Flags for contract calls
            </summary>
        </member>
        <member name="T:NeoSharp.Core.NeoConstants">
            <summary>
            Constants used throughout the Neo system.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.Secp256r1">
            <summary>
            The secp256r1 curve parameters.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.Secp256r1Domain">
            <summary>
            The secp256r1 domain parameters.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.Secp256r1HalfCurveOrder">
            <summary>
            Half of the secp256r1 curve order (used for signature verification)
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.PublicKeySizeCompressed">
            <summary>
            Size of a compressed public key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.PublicKeySizeUncompressed">
            <summary>
            Size of an uncompressed public key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.PrivateKeySize">
            <summary>
            Size of a private key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.SignatureSize">
            <summary>
            Size of a signature in bytes (r + s).
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxTransactionSize">
            <summary>
            Maximum size of a transaction in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxTransactionAttributes">
            <summary>
            Maximum number of attributes in a transaction.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxCosigners">
            <summary>
            Maximum number of cosigners in a transaction.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxInvocationScriptSize">
            <summary>
            Maximum size of an invocation script.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxVerificationScriptSize">
            <summary>
            Maximum size of a verification script.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.NeoToken">
            <summary>
            NEO native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.GasToken">
            <summary>
            GAS native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.PolicyContract">
            <summary>
            Policy native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.RoleManagement">
            <summary>
            RoleManagement native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.OracleContract">
            <summary>
            Oracle native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.NameService">
            <summary>
            NameService native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.ManagementContract">
            <summary>
            Management native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.LedgerContract">
            <summary>
            Ledger native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.CryptoLib">
            <summary>
            CryptoLib native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.StdLib">
            <summary>
            StdLib native contract hash.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.AddressVersion">
            <summary>
            Address version byte for Neo N3.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.MaxMultisigPublicKeys">
            <summary>
            Maximum number of public keys in a multi-signature contract.
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.OneGas">
            <summary>
            One GAS in fractions (10^8).
            </summary>
        </member>
        <member name="F:NeoSharp.Core.NeoConstants.OneNeo">
            <summary>
            One NEO (always 1 since NEO is indivisible).
            </summary>
        </member>
        <member name="T:NeoSharp.Core.NeoSharpException">
            <summary>
            Base exception class for NeoSharp-related errors
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.Base58">
            <summary>
            Base58 and Base58Check encoding/decoding utilities.
            Base58 is a binary-to-text encoding scheme used in cryptocurrencies
            to create human-readable addresses and keys.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.Base58.ChecksumLength">
            <summary>
            Length of checksum appended to Base58Check encoded strings.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.Base58.Alphabet">
            <summary>
            Base58 alphabet excluding 0, O, I, and l to avoid visual ambiguity.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.Base58.AlphabetMap">
            <summary>
            Lookup table for fast Base58 character to index conversion.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.Base58.Base">
            <summary>
            Base of the Base58 encoding (58).
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.#cctor">
            <summary>
            Static constructor to initialize the alphabet mapping.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.Encode(System.Byte[])">
            <summary>
            Encode bytes to Base58 string.
            </summary>
            <param name="data">The bytes to encode</param>
            <returns>Base58 encoded string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.Decode(System.String)">
            <summary>
            Decode Base58 string to bytes.
            </summary>
            <param name="encoded">The Base58 encoded string</param>
            <returns>Decoded bytes, or null if decoding failed</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.EncodeCheck(System.Byte[])">
            <summary>
            Encode bytes to Base58Check string with checksum validation.
            </summary>
            <param name="data">The bytes to encode</param>
            <returns>Base58Check encoded string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.DecodeCheck(System.String)">
            <summary>
            Decode Base58Check string and validate checksum.
            </summary>
            <param name="encoded">The Base58Check encoded string</param>
            <returns>Decoded bytes without checksum, or null if decoding or validation failed</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.CalculateChecksum(System.Byte[])">
            <summary>
            Calculate checksum for Base58Check encoding.
            Uses double SHA-256 and takes the first 4 bytes.
            </summary>
            <param name="data">The data to calculate checksum for</param>
            <returns>4-byte checksum</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.IsValid(System.String)">
            <summary>
            Validates if a string is a valid Base58 encoded string.
            </summary>
            <param name="input">The string to validate</param>
            <returns>True if valid Base58; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58.IsValidCheck(System.String)">
            <summary>
            Validates if a string is a valid Base58Check encoded string.
            </summary>
            <param name="input">The string to validate</param>
            <returns>True if valid Base58Check; otherwise, false</returns>
        </member>
        <member name="T:NeoSharp.Crypto.Base58Extensions">
            <summary>
            Extension methods for Base58 encoding/decoding.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.Base58Extensions.ToBase58(System.Byte[])">
            <summary>
            Encode byte array to Base58 string.
            </summary>
            <param name="data">The bytes to encode</param>
            <returns>Base58 encoded string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58Extensions.ToBase58Check(System.Byte[])">
            <summary>
            Encode byte array to Base58Check string.
            </summary>
            <param name="data">The bytes to encode</param>
            <returns>Base58Check encoded string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58Extensions.FromBase58(System.String)">
            <summary>
            Decode Base58 string to byte array.
            </summary>
            <param name="encoded">The Base58 encoded string</param>
            <returns>Decoded bytes, or null if decoding failed</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Base58Extensions.FromBase58Check(System.String)">
            <summary>
            Decode Base58Check string to byte array.
            </summary>
            <param name="encoded">The Base58Check encoded string</param>
            <returns>Decoded bytes without checksum, or null if decoding or validation failed</returns>
        </member>
        <member name="T:NeoSharp.Crypto.CryptoSecurityException">
            <summary>
            Exception thrown when cryptographic security operations fail.
            This includes secure memory operations, key generation, and other security-critical functions.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.CryptoSecurityException.ErrorCode">
            <summary>
            Gets the error code associated with this security operation.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.CryptoSecurityException.Level">
            <summary>
            Gets the security level of this exception.
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.CryptoSecurityException.SecurityLevel">
            <summary>
            Defines the security levels for cryptographic exceptions.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.CryptoSecurityException.SecurityLevel.Low">
            <summary>
            Low security impact - informational or recoverable error.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.CryptoSecurityException.SecurityLevel.Medium">
            <summary>
            Medium security impact - potential security weakness.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.CryptoSecurityException.SecurityLevel.High">
            <summary>
            High security impact - critical security failure.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.CryptoSecurityException.SecurityLevel.Critical">
            <summary>
            Critical security impact - system compromise possible.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor">
            <summary>
            Initializes a new instance of the CryptoSecurityException class.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CryptoSecurityException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor(System.String,System.String,NeoSharp.Crypto.CryptoSecurityException.SecurityLevel)">
            <summary>
            Initializes a new instance of the CryptoSecurityException class with specified parameters.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">A specific error code for this security operation.</param>
            <param name="level">The security level of this exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CryptoSecurityException class with a specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor(System.String,System.String,NeoSharp.Crypto.CryptoSecurityException.SecurityLevel,System.Exception)">
            <summary>
            Initializes a new instance of the CryptoSecurityException class with all parameters.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">A specific error code for this security operation.</param>
            <param name="level">The security level of this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CryptoSecurityException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.SecureMemoryError(System.String,System.Exception)">
            <summary>
            Creates a CryptoSecurityException for secure memory operation errors.
            </summary>
            <param name="message">The specific memory error message.</param>
            <param name="innerException">The underlying system exception.</param>
            <returns>A new CryptoSecurityException with appropriate error code and high security level.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.KeyGenerationError(System.String,System.Exception)">
            <summary>
            Creates a CryptoSecurityException for key generation errors.
            </summary>
            <param name="message">The specific key generation error message.</param>
            <param name="innerException">The underlying cryptographic exception.</param>
            <returns>A new CryptoSecurityException with appropriate error code and critical security level.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.ValidationError(System.String)">
            <summary>
            Creates a CryptoSecurityException for cryptographic validation errors.
            </summary>
            <param name="message">The specific validation error message.</param>
            <returns>A new CryptoSecurityException with appropriate error code and high security level.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.AccessViolation(System.String)">
            <summary>
            Creates a CryptoSecurityException for access control violations.
            </summary>
            <param name="message">The specific access control error message.</param>
            <returns>A new CryptoSecurityException with appropriate error code and critical security level.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.CryptoSecurityException.TamperingDetected(System.String)">
            <summary>
            Creates a CryptoSecurityException for data tampering detection.
            </summary>
            <param name="message">The specific tampering detection message.</param>
            <returns>A new CryptoSecurityException with appropriate error code and critical security level.</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECDSASignature">
            <summary>
            Represents an ECDSA signature with R and S components
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECDSASignature.R">
            <summary>
            The R component of the signature
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECDSASignature.S">
            <summary>
            The S component of the signature  
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECDSASignature.IsCanonical">
            <summary>
            Returns true if the S component is "low", meaning it is below the half curve order
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Initializes a new ECDSA signature with the specified R and S values
            </summary>
            <param name="r">The R component</param>
            <param name="s">The S component</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.FromBytes(System.Byte[])">
            <summary>
            Creates an ECDSA signature from a 64-byte signature array
            </summary>
            <param name="signature">The 64-byte signature (32 bytes R + 32 bytes S)</param>
            <returns>The ECDSA signature</returns>
            <exception cref="T:System.ArgumentException">Thrown when signature length is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.ToBytes">
            <summary>
            Converts this signature to a 64-byte array
            </summary>
            <returns>The signature as byte array (32 bytes R + 32 bytes S)</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.Equals(NeoSharp.Crypto.ECDSASignature)">
            <summary>
            Determines whether this signature equals another signature
            </summary>
            <param name="other">The other signature to compare</param>
            <returns>True if the signatures are equal</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.Equals(System.Object)">
            <summary>
            Determines whether this signature equals another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.GetHashCode">
            <summary>
            Gets the hash code for this signature
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECDSASignature.ToString">
            <summary>
            Returns a string representation of this signature
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECKeyPair">
            <summary>
            Represents an elliptic curve key pair for Neo blockchain operations
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECKeyPair.PublicKey">
            <summary>
            Gets the public key
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECKeyPair.PrivateKeyBytes">
            <summary>
            Gets the private key bytes
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECKeyPair.PrivateKey">
            <summary>
            Gets the private key
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.#ctor(System.Byte[])">
            <summary>
            Initializes a new ECKeyPair from private key bytes
            </summary>
            <param name="privateKeyBytes">The private key bytes</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.#ctor(NeoSharp.Crypto.ECPrivateKey)">
            <summary>
            Initializes a new ECKeyPair from private key
            </summary>
            <param name="privateKey">The private key</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.GetAddress">
            <summary>
            Gets the address for this key pair
            </summary>
            <returns>The Neo address</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.GetScriptHash">
            <summary>
            Gets the script hash for this key pair
            </summary>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.Sign(System.Byte[])">
            <summary>
            Signs data with this key pair's private key
            </summary>
            <param name="data">The data to sign</param>
            <returns>The signature</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.ToWIF">
            <summary>
            Exports this key pair as a WIF string
            </summary>
            <returns>The WIF string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.CreateEcKeyPair">
            <summary>
            Creates a new random EC key pair
            </summary>
            <returns>A new random key pair</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.Create(System.Numerics.BigInteger)">
            <summary>
            Creates a key pair from a private key as BigInteger
            </summary>
            <param name="privateKey">The private key as BigInteger</param>
            <returns>The key pair</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.FromWIF(System.String)">
            <summary>
            Creates a key pair from WIF (Wallet Import Format)
            </summary>
            <param name="wif">The WIF string</param>
            <returns>The key pair</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.FromHex(System.String)">
            <summary>
            Creates a key pair from a hex string private key
            </summary>
            <param name="privateKeyHex">The private key as hex string</param>
            <returns>The key pair</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.Dispose">
            <summary>
            Disposes the key pair and clears sensitive data
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECKeyPair.ToString">
            <summary>
            Returns a string representation of this key pair
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECPoint">
            <summary>
            Represents an elliptic curve point on the secp256r1 curve
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPoint.EncodedBytes">
            <summary>
            Gets the encoded bytes of this point (33 bytes compressed format)
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPoint.IsInfinity">
            <summary>
            Gets whether this point is the point at infinity (zero point)
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.#ctor(System.Byte[])">
            <summary>
            Creates an ECPoint from encoded bytes
            </summary>
            <param name="encodedBytes">The encoded point bytes (33 bytes compressed format)</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.#ctor(System.String)">
            <summary>
            Creates an ECPoint from a hex string
            </summary>
            <param name="hex">The hex string (66 characters)</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.GetEncoded">
            <summary>
            Gets the encoded bytes (alias for EncodedBytes)
            </summary>
            <returns>The encoded bytes</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.GetEncoded(System.Boolean)">
            <summary>
            Gets the encoded bytes with optional compression
            </summary>
            <param name="compressed">Whether to use compressed format (always true for this implementation)</param>
            <returns>The encoded bytes</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.ToHex">
            <summary>
            Converts this point to a hex string
            </summary>
            <returns>The hex string representation</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.CreateRandom">
            <summary>
            Creates a random ECPoint (for testing purposes)
            </summary>
            <returns>A random ECPoint</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.IsValid">
            <summary>
            Checks if this is a valid point on the secp256r1 curve
            </summary>
            <returns>True if valid</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPoint.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies a signature
            </summary>
            <param name="message">The message</param>
            <param name="signature">The signature</param>
            <returns>True if the signature is valid, false otherwise</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECPointExtensions">
            <summary>
            Extension methods for ECPoint operations using secp256r1 curve
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECPointExtensions.Multiply(NeoSharp.Crypto.ECPoint,System.Numerics.BigInteger)">
            <summary>
            Multiplies this point by a scalar
            </summary>
            <param name="point">The point</param>
            <param name="scalar">The scalar</param>
            <returns>The resulting point</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPointExtensions.Add(NeoSharp.Crypto.ECPoint,NeoSharp.Crypto.ECPoint)">
            <summary>
            Adds two points
            </summary>
            <param name="point1">The first point</param>
            <param name="point2">The second point</param>
            <returns>The resulting point</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECPrivateKey">
            <summary>
            Represents an elliptic curve private key
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPrivateKey.PrivateKeyBytes">
            <summary>
            Gets the private key bytes
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPrivateKey.D">
            <summary>
            Gets the private key bytes (alias for compatibility)
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPrivateKey.PublicKey">
            <summary>
            Gets the corresponding public key
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of ECPrivateKey
            </summary>
            <param name="privateKeyBytes">The private key bytes (32 bytes)</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.#ctor">
            <summary>
            Initializes a new instance of ECPrivateKey with a random key
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.GenerateRandom">
            <summary>
            Generates a random private key
            </summary>
            <returns>A new random ECPrivateKey</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.GetScriptHash">
            <summary>
            Gets the script hash for this private key
            </summary>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.Sign(System.Byte[])">
            <summary>
            Signs data with this private key
            </summary>
            <param name="data">The data to sign</param>
            <returns>The signature</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.GetPublicKey">
            <summary>
            Gets the public key as an ECPublicKey
            </summary>
            <returns>The public key as ECPublicKey</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.FromWIF(System.String)">
            <summary>
            Creates a private key from a WIF (Wallet Import Format) string
            </summary>
            <param name="wif">The WIF string</param>
            <returns>The private key</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPrivateKey.ToWIF">
            <summary>
            Converts this private key to WIF (Wallet Import Format)
            </summary>
            <returns>The WIF string</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ECPublicKey">
            <summary>
            Represents an elliptic curve public key
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ECPublicKey.EncodedBytes">
            <summary>
            Gets the encoded bytes of the public key
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of ECPublicKey
            </summary>
            <param name="encodedBytes">The encoded public key bytes</param>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.FromECPoint(NeoSharp.Crypto.ECPoint)">
            <summary>
            Creates an ECPublicKey from an ECPoint
            </summary>
            <param name="point">The ECPoint</param>
            <returns>The ECPublicKey</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.ToECPoint">
            <summary>
            Converts this public key to an ECPoint
            </summary>
            <returns>The ECPoint representation</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.GetEncoded(System.Boolean)">
            <summary>
            Gets the encoded bytes of this public key
            </summary>
            <param name="compressed">Whether to return compressed format (always true for Neo)</param>
            <returns>The encoded public key bytes</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.GetScriptHash">
            <summary>
            Gets the script hash for this public key
            </summary>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ECPublicKey.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies a signature against a message hash
            </summary>
            <param name="messageHash">The message hash that was signed</param>
            <param name="signature">The signature to verify</param>
            <returns>True if the signature is valid</returns>
        </member>
        <member name="T:NeoSharp.Crypto.Hash">
            <summary>
            Provides cryptographic hash functions used in Neo.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.SHA256(System.Byte[])">
            <summary>
            Computes SHA256 hash.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The SHA256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.SHA256(System.String)">
            <summary>
            Computes SHA256 hash of a string.
            </summary>
            <param name="data">The string to hash.</param>
            <returns>The SHA256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.DoubleSHA256(System.Byte[])">
            <summary>
            Computes double SHA256 hash (SHA256(SHA256(data))).
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The double SHA256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.RIPEMD160(System.Byte[])">
            <summary>
            Computes RIPEMD160 hash.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The RIPEMD160 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.Hash160(System.Byte[])">
            <summary>
            Computes Hash160 (RIPEMD160(SHA256(data))).
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Hash160 result.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.Hash256(System.Byte[])">
            <summary>
            Computes Hash256 (double SHA256).
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Hash256 result.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.Murmur3(System.Byte[],System.UInt32)">
            <summary>
            Computes Murmur3 hash.
            </summary>
            <param name="data">The data to hash.</param>
            <param name="seed">The seed value.</param>
            <returns>The Murmur3 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.HMACSHA256(System.Byte[],System.Byte[])">
            <summary>
            Computes HMAC-SHA256.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data to authenticate.</param>
            <returns>The HMAC-SHA256.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.HMACSHA512(System.Byte[],System.Byte[])">
            <summary>
            Computes HMAC-SHA512.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data to authenticate.</param>
            <returns>The HMAC-SHA512.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.SHA3_256(System.Byte[])">
            <summary>
            Computes SHA3-256 hash.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The SHA3-256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.Keccak256(System.Byte[])">
            <summary>
            Computes Keccak256 hash.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Keccak256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Hash.Murmur32(System.String,System.UInt32)">
            <summary>
            Computes Murmur32 hash for a string (alias for Murmur3 with UTF8 encoding)
            </summary>
            <param name="text">The text to hash</param>
            <param name="seed">The seed value (default 0)</param>
            <returns>The Murmur32 hash</returns>
        </member>
        <member name="T:NeoSharp.Crypto.HashCache">
            <summary>
            Thread-safe hash cache for repeated cryptographic operations.
            Provides performance optimization by caching frequently computed hashes
            while maintaining security and memory efficiency.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.HashCache.Shared">
            <summary>
            Shared instance for global hash caching.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.HashCache.MaxCacheSize">
            <summary>
            Maximum number of cached hashes (default: 1000).
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.HashCache.CacheTtlMs">
            <summary>
            Cache entry time-to-live in milliseconds (default: 1 hour).
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.HashCache.MaxMemoryUsage">
            <summary>
            Maximum memory usage in bytes (default: 50MB).
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.HashCache.Count">
            <summary>
            Gets the current number of cached entries.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.HashCache.Statistics">
            <summary>
            Gets cache hit statistics.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.#ctor">
            <summary>
            Initializes a new HashCache instance.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Sha256(System.Byte[])">
            <summary>
            Gets or computes SHA256 hash with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The SHA256 hash</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Sha256Async(System.Byte[])">
            <summary>
            Gets or computes SHA256 hash asynchronously with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The SHA256 hash</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Hash256(System.Byte[])">
            <summary>
            Gets or computes double SHA256 (Hash256) with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The double SHA256 hash</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Hash256Async(System.Byte[])">
            <summary>
            Gets or computes double SHA256 (Hash256) asynchronously with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The double SHA256 hash</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Hash160(System.Byte[])">
            <summary>
            Gets or computes RIPEMD160(SHA256) (Hash160) with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The Hash160 result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Hash160Async(System.Byte[])">
            <summary>
            Gets or computes RIPEMD160(SHA256) (Hash160) asynchronously with caching.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The Hash160 result</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.ClearCache">
            <summary>
            Clears all cached hashes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.RemoveCached(System.Byte[],System.String)">
            <summary>
            Removes cached hash for specific data and algorithm.
            </summary>
            <param name="data">The data to remove from cache</param>
            <param name="algorithm">The algorithm identifier</param>
            <exception cref="T:System.ArgumentNullException">Thrown when data or algorithm is null</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.GetOrCompute(System.Byte[],System.String,System.Func{System.Byte[],System.Byte[]})">
            <summary>
            Gets or computes a hash with caching.
            </summary>
            <param name="data">The data to hash</param>
            <param name="algorithm">The algorithm identifier</param>
            <param name="computeFunc">The function to compute the hash if not cached</param>
            <returns>The hash result</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.GenerateCacheKey(System.Byte[],System.String)">
            <summary>
            Generates a cache key for the given data and algorithm.
            Uses a combination of data length, algorithm, and hash of the data for uniqueness.
            </summary>
            <param name="data">The data</param>
            <param name="algorithm">The algorithm identifier</param>
            <returns>A unique cache key</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.PerformCleanup(System.Object)">
            <summary>
            Performs periodic cleanup of expired cache entries.
            </summary>
            <param name="state">Timer state (unused)</param>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.ThrowIfDisposed">
            <summary>
            Throws ObjectDisposedException if this instance has been disposed.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.HashCache.Dispose">
            <summary>
            Releases all resources used by the HashCache.
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.HashCache.CachedHashEntry">
            <summary>
            Cached hash entry with metadata.
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.HashCacheExtensions">
            <summary>
            Extension methods for cached hash operations.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedSha256(System.Byte[])">
            <summary>
            Compute SHA256 with caching using the shared cache instance.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The SHA256 hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedHash256(System.Byte[])">
            <summary>
            Compute Hash256 (double SHA256) with caching using the shared cache instance.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The Hash256 result</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedHash160(System.Byte[])">
            <summary>
            Compute Hash160 (RIPEMD160(SHA256)) with caching using the shared cache instance.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The Hash160 result</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedSha256(System.String)">
            <summary>
            Compute SHA256 of UTF8 bytes with caching using the shared cache instance.
            </summary>
            <param name="str">The string to hash</param>
            <returns>The SHA256 hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedHash256(System.String)">
            <summary>
            Compute Hash256 of UTF8 bytes with caching using the shared cache instance.
            </summary>
            <param name="str">The string to hash</param>
            <returns>The Hash256 result</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashCacheExtensions.CachedHash160(System.String)">
            <summary>
            Compute Hash160 of UTF8 bytes with caching using the shared cache instance.
            </summary>
            <param name="str">The string to hash</param>
            <returns>The Hash160 result</returns>
        </member>
        <member name="T:NeoSharp.Crypto.HashExtensions">
            <summary>
            Cryptographic hash function extensions for byte arrays and strings
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Sha256(System.Byte[])">
            <summary>
            Applies SHA-256 to the input and returns the result.
            </summary>
            <param name="bytes">The input byte array</param>
            <returns>The SHA256 hash value as byte array</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Hash256(System.Byte[])">
            <summary>
            Applies SHA-256 twice to the input and returns the result.
            Neo uses the name 'hash256' for hashes created in this way.
            </summary>
            <param name="bytes">The input byte array</param>
            <returns>The hash value as byte array</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Ripemd160(System.Byte[])">
            <summary>
            RipeMD-160 hash function
            </summary>
            <param name="bytes">The input byte array</param>
            <returns>The hash value as byte array</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Sha256ThenRipemd160(System.Byte[])">
            <summary>
            Performs a SHA256 followed by a RIPEMD160
            </summary>
            <param name="bytes">The input byte array</param>
            <returns>The hash value as byte array</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.HmacSha512(System.Byte[],System.Byte[])">
            <summary>
            Generates the HMAC SHA-512 digest for the bytes with the given key
            </summary>
            <param name="bytes">The input byte array</param>
            <param name="key">The key</param>
            <returns>The hash value for the given input</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Hash256(System.String)">
            <summary>
            Applies SHA-256 twice to the input and returns the result.
            Neo uses the name 'hash256' for hashes created in this way.
            </summary>
            <param name="str">The input string</param>
            <returns>The hash value as hexadecimal string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Ripemd160(System.String)">
            <summary>
            RipeMD-160 hash function
            </summary>
            <param name="str">The input string</param>
            <returns>The hash value as hexadecimal string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.Sha256ThenRipemd160(System.String)">
            <summary>
            Performs a SHA256 followed by a RIPEMD160
            </summary>
            <param name="str">The input string</param>
            <returns>The hash value as hexadecimal string</returns>
        </member>
        <member name="M:NeoSharp.Crypto.HashExtensions.HmacSha512(System.String,System.String)">
            <summary>
            Generates the HMAC SHA-512 digest for the string with the given key
            </summary>
            <param name="str">The input string</param>
            <param name="key">The key as string</param>
            <returns>The hash value as hexadecimal string</returns>
        </member>
        <member name="T:NeoSharp.Crypto.NEP2Exception">
            <summary>
            Exception thrown when NEP-2 password encryption/decryption operations fail.
            NEP-2 is a standard for passphrase-protected private keys.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.NEP2Exception.ErrorCode">
            <summary>
            Gets the error code associated with this NEP-2 operation.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor">
            <summary>
            Initializes a new instance of the NEP2Exception class.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NEP2Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NEP2Exception class with a specified error message and error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">A specific error code for this NEP-2 operation.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NEP2Exception class with a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the NEP2Exception class with a specified error message, error code, and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">A specific error code for this NEP-2 operation.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the NEP2Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.InvalidFormat(System.String)">
            <summary>
            Creates a NEP2Exception for invalid format errors.
            </summary>
            <param name="message">The specific format error message.</param>
            <returns>A new NEP2Exception with appropriate error code.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.InvalidPassphrase(System.String)">
            <summary>
            Creates a NEP2Exception for invalid passphrase errors.
            </summary>
            <param name="message">The specific passphrase error message.</param>
            <returns>A new NEP2Exception with appropriate error code.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.NEP2Exception.EncryptionError(System.String,System.Exception)">
            <summary>
            Creates a NEP2Exception for encryption/decryption errors.
            </summary>
            <param name="message">The specific encryption error message.</param>
            <param name="innerException">The underlying cryptographic exception.</param>
            <returns>A new NEP2Exception with appropriate error code.</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ScryptEncoder">
            <summary>
            Scrypt key derivation function implementation
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptEncoder.CryptoScrypt(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scrypt key derivation function - RFC 7914 compliant implementation
            </summary>
            <param name="password">The password bytes</param>
            <param name="salt">The salt bytes</param>
            <param name="n">The CPU/memory cost parameter (must be power of 2)</param>
            <param name="r">The block size parameter</param>
            <param name="p">The parallelization parameter</param>
            <param name="dkLen">The desired key length</param>
            <returns>The derived key</returns>
        </member>
        <member name="T:NeoSharp.Crypto.ScryptParams">
            <summary>
            Parameters for the Scrypt password-based key derivation function.
            Scrypt is designed to be memory-hard and computationally expensive to resist brute-force attacks.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.N_STANDARD">
            <summary>
            Standard N parameter (CPU/memory cost parameter) - 2^14 = 16384
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.R_STANDARD">
            <summary>
            Standard r parameter (block size parameter)
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.P_STANDARD">
            <summary>
            Standard p parameter (parallelization parameter)
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.Default">
            <summary>
            Default Scrypt parameters using standard values
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.Fast">
            <summary>
            Fast Scrypt parameters for testing (reduced security)
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.ScryptParams.HighSecurity">
            <summary>
            High security Scrypt parameters (increased computational cost)
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ScryptParams.N">
            <summary>
            CPU/memory cost parameter. Must be a power of 2 greater than 1.
            Higher values increase memory usage and computation time exponentially.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ScryptParams.R">
            <summary>
            Block size parameter. Affects memory usage linearly.
            Typically set to 8 for optimal performance.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.ScryptParams.P">
            <summary>
            Parallelization parameter. Can be used to tune for available CPU cores.
            Higher values increase memory usage linearly but allow parallel processing.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new Scrypt parameters with the specified values.
            </summary>
            <param name="n">CPU/memory cost parameter (must be power of 2 > 1)</param>
            <param name="r">Block size parameter (must be > 0)</param>
            <param name="p">Parallelization parameter (must be > 0)</param>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.ValidateParameters(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates Scrypt parameters for correctness and security.
            </summary>
            <param name="n">CPU/memory cost parameter</param>
            <param name="r">Block size parameter</param>
            <param name="p">Parallelization parameter</param>
            <exception cref="T:System.ArgumentException">Thrown when parameters are invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.EstimateMemoryUsage">
            <summary>
            Estimates the memory usage in bytes for these Scrypt parameters.
            </summary>
            <returns>Estimated memory usage in bytes</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.EstimateComplexity">
            <summary>
            Estimates the computational complexity relative to default parameters.
            </summary>
            <returns>Relative computational complexity factor</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.CreateOptimized(System.Int32)">
            <summary>
            Creates Scrypt parameters optimized for the current system.
            </summary>
            <param name="targetTimeMs">Target computation time in milliseconds</param>
            <returns>Optimized Scrypt parameters</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current ScryptParams.
            </summary>
            <param name="obj">The object to compare with the current ScryptParams</param>
            <returns>True if the specified object is equal to the current ScryptParams; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.Equals(NeoSharp.Crypto.ScryptParams)">
            <summary>
            Determines whether the specified ScryptParams is equal to the current ScryptParams.
            </summary>
            <param name="other">The ScryptParams to compare with the current ScryptParams</param>
            <returns>True if the specified ScryptParams is equal to the current ScryptParams; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.GetHashCode">
            <summary>
            Returns the hash code for this ScryptParams.
            </summary>
            <returns>A hash code for the current ScryptParams</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.ToString">
            <summary>
            Returns a string representation of the ScryptParams.
            </summary>
            <returns>A string that represents the current ScryptParams</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.ToJson">
            <summary>
            Serializes the ScryptParams to JSON.
            </summary>
            <returns>JSON representation of the ScryptParams</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.FromJson(System.String)">
            <summary>
            Deserializes ScryptParams from JSON.
            </summary>
            <param name="json">JSON string containing ScryptParams</param>
            <returns>Deserialized ScryptParams</returns>
            <exception cref="T:System.ArgumentException">Thrown when JSON is invalid or contains invalid parameters</exception>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.op_Equality(NeoSharp.Crypto.ScryptParams,NeoSharp.Crypto.ScryptParams)">
            <summary>
            Determines whether two ScryptParams instances are equal.
            </summary>
            <param name="left">The first ScryptParams to compare</param>
            <param name="right">The second ScryptParams to compare</param>
            <returns>True if the ScryptParams instances are equal; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.ScryptParams.op_Inequality(NeoSharp.Crypto.ScryptParams,NeoSharp.Crypto.ScryptParams)">
            <summary>
            Determines whether two ScryptParams instances are not equal.
            </summary>
            <param name="left">The first ScryptParams to compare</param>
            <param name="right">The second ScryptParams to compare</param>
            <returns>True if the ScryptParams instances are not equal; otherwise, false</returns>
        </member>
        <member name="T:NeoSharp.Crypto.SecureBytes">
            <summary>
            A secure container for sensitive byte data that ensures proper memory cleanup
            and protection against memory dumps. Implements IDisposable for deterministic cleanup.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SecureBytes.Length">
            <summary>
            Gets the length of the secure byte array.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SecureBytes.IsDisposed">
            <summary>
            Gets whether this SecureBytes instance has been disposed.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.#ctor(System.Byte[])">
            <summary>
            Initialize with byte array, copying data to secure memory.
            </summary>
            <param name="data">The sensitive data to store securely</param>
            <exception cref="T:System.ArgumentNullException">Thrown when data is null</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when secure memory allocation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initialize with byte span, copying data to secure memory.
            </summary>
            <param name="data">The sensitive data to store securely</param>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when secure memory allocation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.#ctor(System.Int32)">
            <summary>
            Initialize with specified size, filled with zeros.
            </summary>
            <param name="length">The size of the secure byte array</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when length is negative</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when secure memory allocation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.FromPassword(System.String)">
            <summary>
            Create SecureBytes from a password string with secure UTF-8 encoding.
            The original string should be cleared by the caller if possible.
            </summary>
            <param name="password">The password string to convert</param>
            <returns>SecureBytes containing UTF-8 encoded password</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when password is null</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when encoding fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.WithSecureAccess``1(System.Func{System.Byte[],``0})">
            <summary>
            Access bytes with a delegate, ensuring secure handling.
            The bytes are copied to an array for the delegate execution.
            </summary>
            <typeparam name="T">The return type of the delegate</typeparam>
            <param name="action">The delegate to execute with access to the secure bytes</param>
            <returns>The result from the delegate</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.WithSecureAccess(System.Action{System.Byte[]})">
            <summary>
            Access bytes with an action delegate, ensuring secure handling.
            The bytes are copied to an array for the delegate execution.
            </summary>
            <param name="action">The action to execute with access to the secure bytes</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ToArray">
            <summary>
            Get a copy of the bytes (use sparingly, as this creates non-secure copies).
            The returned array should be cleared by the caller when no longer needed.
            </summary>
            <returns>A copy of the secure bytes</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ToHexString">
            <summary>
            Convert to hexadecimal string (use sparingly).
            The returned string cannot be securely cleared.
            </summary>
            <returns>Hexadecimal representation of the secure bytes</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ConstantTimeEquals(NeoSharp.Crypto.SecureBytes)">
            <summary>
            Compare with another SecureBytes in constant time to prevent timing attacks.
            </summary>
            <param name="other">The other SecureBytes to compare with</param>
            <returns>True if the contents are equal; otherwise, false</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ConstantTimeEquals(System.Byte[])">
            <summary>
            Compare with byte array in constant time to prevent timing attacks.
            </summary>
            <param name="other">The byte array to compare with</param>
            <returns>True if the contents are equal; otherwise, false</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current SecureBytes.
            Uses constant-time comparison for security.
            </summary>
            <param name="obj">The object to compare with</param>
            <returns>True if equal; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.Equals(NeoSharp.Crypto.SecureBytes)">
            <summary>
            Determines whether the specified SecureBytes is equal to the current SecureBytes.
            Uses constant-time comparison for security.
            </summary>
            <param name="other">The SecureBytes to compare with</param>
            <returns>True if equal; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.GetHashCode">
            <summary>
            Returns a hash code for this SecureBytes.
            Note: This uses only the length to avoid exposing data through timing attacks.
            </summary>
            <returns>A hash code for the current SecureBytes</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ToString">
            <summary>
            Returns a string representation that doesn't expose the actual data.
            </summary>
            <returns>A safe string representation</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.TryLockMemory">
            <summary>
            Attempts to lock memory pages to prevent swapping (platform dependent).
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.ThrowIfDisposed">
            <summary>
            Throws ObjectDisposedException if this instance has been disposed.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.Finalize">
            <summary>
            Finalizer to ensure cleanup if Dispose() wasn't called.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.op_Equality(NeoSharp.Crypto.SecureBytes,NeoSharp.Crypto.SecureBytes)">
            <summary>
            Determines whether two SecureBytes instances are equal.
            </summary>
            <param name="left">The first SecureBytes to compare</param>
            <param name="right">The second SecureBytes to compare</param>
            <returns>True if equal; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SecureBytes.op_Inequality(NeoSharp.Crypto.SecureBytes,NeoSharp.Crypto.SecureBytes)">
            <summary>
            Determines whether two SecureBytes instances are not equal.
            </summary>
            <param name="left">The first SecureBytes to compare</param>
            <param name="right">The second SecureBytes to compare</param>
            <returns>True if not equal; otherwise, false</returns>
        </member>
        <member name="T:NeoSharp.Crypto.SecureECKeyPair">
            <summary>
            A secure version of ECKeyPair that uses SecureBytes for private key storage.
            Provides enhanced security for cryptographic operations by ensuring proper
            memory management and secure cleanup of sensitive key material.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SecureECKeyPair.PublicKey">
            <summary>
            The public key component of this EC key pair.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SecureECKeyPair.IsDisposed">
            <summary>
            Gets whether this SecureECKeyPair has been disposed.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.#ctor(NeoSharp.Crypto.SecureBytes,NeoSharp.Crypto.ECPoint)">
            <summary>
            Initializes a new SecureECKeyPair with the provided secure private key and public key.
            </summary>
            <param name="securePrivateKey">The secure private key storage</param>
            <param name="publicKey">The corresponding public key</param>
            <exception cref="T:System.ArgumentNullException">Thrown when securePrivateKey or publicKey is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Create(System.Byte[])">
            <summary>
            Creates a SecureECKeyPair from a private key byte array.
            </summary>
            <param name="privateKey">The private key bytes</param>
            <returns>A new SecureECKeyPair instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when privateKey is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when privateKey has invalid length</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when key pair generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Create(NeoSharp.Crypto.SecureBytes)">
            <summary>
            Creates a SecureECKeyPair from a SecureBytes private key.
            </summary>
            <param name="securePrivateKey">The secure private key storage</param>
            <returns>A new SecureECKeyPair instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when securePrivateKey is null</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when key pair generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Generate">
            <summary>
            Generates a fresh SecureECKeyPair using cryptographically secure random number generation.
            </summary>
            <returns>A new SecureECKeyPair with randomly generated keys</returns>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when key generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.FromWIF(System.String)">
            <summary>
            Creates a SecureECKeyPair from a WIF (Wallet Import Format) string.
            </summary>
            <param name="wifString">The WIF encoded private key</param>
            <returns>A new SecureECKeyPair instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when wifString is null</exception>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when WIF format is invalid</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when key pair generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.FromNEP2(System.String,System.String)">
            <summary>
            Creates a SecureECKeyPair from an encrypted NEP-2 private key.
            </summary>
            <param name="nep2String">The NEP-2 encrypted private key</param>
            <param name="password">The passphrase for decryption</param>
            <returns>A new SecureECKeyPair instance</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when nep2String or password is null</exception>
            <exception cref="T:NeoSharp.Crypto.NEP2Exception">Thrown when NEP-2 decryption fails</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when key pair generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.WithPrivateKey``1(System.Func{System.Byte[],``0})">
            <summary>
            Performs a cryptographic operation with temporary access to the private key.
            The private key is only accessible during the operation and is securely cleared afterward.
            </summary>
            <typeparam name="T">The return type of the operation</typeparam>
            <param name="operation">The operation to perform with the private key</param>
            <returns>The result of the operation</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when operation is null</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Sign(System.Byte[])">
            <summary>
            Signs a message hash using this key pair's private key.
            </summary>
            <param name="messageHash">The hash to sign</param>
            <returns>The ECDSA signature</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when messageHash is null</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when signing fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.ExportWIF(System.Boolean)">
            <summary>
            Exports the private key in WIF (Wallet Import Format).
            </summary>
            <param name="compressed">Whether to use compressed format (default: true)</param>
            <returns>The WIF encoded private key</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when WIF export fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.ExportNEP2(System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Exports the private key encrypted using NEP-2 format.
            </summary>
            <param name="password">The passphrase for encryption</param>
            <param name="scryptParams">Optional Scrypt parameters (uses default if not provided)</param>
            <returns>The NEP-2 encrypted private key</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when this instance has been disposed</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when password is null</exception>
            <exception cref="T:NeoSharp.Crypto.NEP2Exception">Thrown when NEP-2 encryption fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.GeneratePublicKeyFromPrivateKey(System.Byte[])">
            <summary>
            Generates a public key from a private key using secp256r1 curve.
            </summary>
            <param name="privateKey">The private key bytes</param>
            <returns>The corresponding public key</returns>
            <exception cref="T:NeoSharp.Crypto.CryptoSecurityException">Thrown when public key generation fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.ThrowIfDisposed">
            <summary>
            Throws ObjectDisposedException if this instance has been disposed.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Dispose">
            <summary>
            Releases all resources used by the SecureECKeyPair.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SecureECKeyPair.Finalize">
            <summary>
            Finalizer to ensure cleanup if Dispose() wasn't called.
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.Sign">
            <summary>
            Provides cryptographic signing and signature verification functionality for Neo
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.SignHexMessage(System.String,NeoSharp.Crypto.ECKeyPair)">
            <summary>
            Signs the SHA256 hash of a hexadecimal message with the private key
            </summary>
            <param name="message">The message to sign in hexadecimal format</param>
            <param name="keyPair">The key pair containing the private key</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.SignMessage(System.String,NeoSharp.Crypto.ECKeyPair)">
            <summary>
            Signs the SHA256 hash of a UTF-8 string message with the private key
            </summary>
            <param name="message">The message to sign</param>
            <param name="keyPair">The key pair containing the private key</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.SignMessage(System.Byte[],NeoSharp.Crypto.ECKeyPair)">
            <summary>
            Signs the SHA256 hash of a byte array message with the private key
            </summary>
            <param name="message">The message to sign</param>
            <param name="keyPair">The key pair containing the private key</param>
            <returns>The signature data</returns>
            <exception cref="T:NeoSharp.Core.NeoSharpException">Thrown when signature recovery fails</exception>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.RecoverFromSignature(System.Int32,NeoSharp.Crypto.ECDSASignature,System.Byte[])">
            <summary>
            Recovers the public key from a signature and message hash
            </summary>
            <param name="recId">The recovery ID (0-3)</param>
            <param name="signature">The ECDSA signature</param>
            <param name="messageHash">The hash of the original message</param>
            <returns>The recovered public key, or null if recovery failed</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.DecompressKey(Org.BouncyCastle.Math.BigInteger,System.Boolean)">
            <summary>
            Decompresses a public key from its x-coordinate and y-bit
            </summary>
            <param name="x">The x-coordinate</param>
            <param name="yBit">The y-coordinate bit</param>
            <returns>The decompressed ECPoint</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.SignedMessageToKey(System.Byte[],NeoSharp.Crypto.SignatureData)">
            <summary>
            Recovers the public key from a message and signature data
            </summary>
            <param name="message">The original message</param>
            <param name="signatureData">The signature data</param>
            <returns>The recovered public key</returns>
            <exception cref="T:System.ArgumentException">Thrown when signature format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.PublicKeyFromPrivateKey(NeoSharp.Crypto.ECPrivateKey)">
            <summary>
            Derives a public key from a private key
            </summary>
            <param name="privateKey">The private key</param>
            <returns>The corresponding public key</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.PublicPointFromPrivateKey(NeoSharp.Crypto.ECPrivateKey)">
            <summary>
            Derives a public key point from a private key
            </summary>
            <param name="privateKey">The private key</param>
            <returns>The corresponding public key point</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.RecoverSigningScriptHash(System.Byte[],NeoSharp.Crypto.SignatureData)">
            <summary>
            Recovers the signer's script hash from a message and signature
            </summary>
            <param name="message">The signed message</param>
            <param name="signatureData">The signature data</param>
            <returns>The signer's script hash</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.GetRealV(System.Byte)">
            <summary>
            Gets the real V value from the signature V component
            </summary>
            <param name="v">The V component</param>
            <returns>The real V value</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.VerifySignature(System.Byte[],NeoSharp.Crypto.SignatureData,NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Verifies that a signature is appropriate for the given message and public key
            </summary>
            <param name="message">The message</param>
            <param name="signatureData">The signature data</param>
            <param name="publicKey">The public key</param>
            <returns>True if verification succeeds</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.ModInverse(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Computes the modular inverse of a with respect to modulus m
            </summary>
            <param name="a">The value to invert</param>
            <param name="m">The modulus</param>
            <returns>The modular inverse</returns>
        </member>
        <member name="M:NeoSharp.Crypto.Sign.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Extended Euclidean algorithm
            </summary>
        </member>
        <member name="T:NeoSharp.Crypto.SignatureData">
            <summary>
            Represents signature data containing V, R, and S components for ECDSA signatures
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SignatureData.V">
            <summary>
            The recovery ID component
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SignatureData.R">
            <summary>
            The R component as byte array
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SignatureData.S">
            <summary>
            The S component as byte array  
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.SignatureData.Concatenated">
            <summary>
            Gets the concatenated R and S components (64 bytes total)
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.#ctor(System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Initializes signature data with V, R, and S components
            </summary>
            <param name="v">The recovery ID</param>
            <param name="r">The R component (must be 32 bytes)</param>
            <param name="s">The S component (must be 32 bytes)</param>
            <exception cref="T:System.ArgumentException">Thrown when R or S is not 32 bytes</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.#ctor(System.Byte[])">
            <summary>
            Initializes signature data from a 64-byte signature with V = 0
            </summary>
            <param name="signature">The 64-byte signature (32 bytes R + 32 bytes S)</param>
            <exception cref="T:System.ArgumentException">Thrown when signature is not 64 bytes</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes signature data from a 64-byte signature with specified V
            </summary>
            <param name="v">The recovery ID</param>
            <param name="signature">The 64-byte signature (32 bytes R + 32 bytes S)</param>
            <exception cref="T:System.ArgumentException">Thrown when signature is not 64 bytes</exception>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.FromByteArray(System.Byte[])">
            <summary>
            Creates signature data from a byte array with V = 0
            </summary>
            <param name="signature">The signature byte array</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.FromByteArray(System.Byte,System.Byte[])">
            <summary>
            Creates signature data from a byte array with specified V
            </summary>
            <param name="v">The recovery ID</param>
            <param name="signature">The signature byte array</param>
            <returns>The signature data</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.Equals(NeoSharp.Crypto.SignatureData)">
            <summary>
            Determines whether this signature data equals another
            </summary>
            <param name="other">The other signature data to compare</param>
            <returns>True if the signature data are equal</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.Equals(System.Object)">
            <summary>
            Determines whether this signature data equals another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.GetHashCode">
            <summary>
            Gets the hash code for this signature data
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignatureData.ToString">
            <summary>
            Returns a string representation of this signature data
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:NeoSharp.Crypto.SignException">
            <summary>
            Exception thrown when cryptographic signing operations fail
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SignException.#ctor">
            <summary>
            Initializes a new instance of the SignException class
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.SignException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SignException class with a specified error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:NeoSharp.Crypto.SignException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SignException class with a specified error message and inner exception
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:NeoSharp.Crypto.SignException.HeaderOutOfRange(System.Byte)">
            <summary>
            Creates a SignException for header out of range errors
            </summary>
            <param name="header">The invalid header value</param>
            <returns>A new SignException</returns>
        </member>
        <member name="M:NeoSharp.Crypto.SignException.RecoveryFailed">
            <summary>
            Creates a SignException for signature recovery failures
            </summary>
            <returns>A new SignException</returns>
        </member>
        <member name="T:NeoSharp.Crypto.WIF">
            <summary>
            Wallet Import Format (WIF) utilities for encoding and decoding private keys.
            WIF is a standardized way to encode private keys for easy import/export between wallets.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.WIF.PrivateKeySize">
            <summary>
            Size of a private key in bytes (256 bits = 32 bytes).
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.WIF.WifPrefix">
            <summary>
            WIF prefix byte for mainnet private keys.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.WIF.CompressedSuffix">
            <summary>
            Suffix byte indicating compressed public key format.
            </summary>
        </member>
        <member name="F:NeoSharp.Crypto.WIF.WifDecodedLength">
            <summary>
            Expected length of a WIF string when decoded to bytes (38 bytes total).
            1 (prefix) + 32 (private key) + 1 (compressed flag) + 4 (checksum) = 38 bytes
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.WIF.Encode(System.Byte[],System.Boolean)">
            <summary>
            Encodes a private key to WIF format.
            </summary>
            <param name="privateKey">The 32-byte private key to encode</param>
            <param name="compressed">Whether the corresponding public key should be compressed (default: true)</param>
            <returns>WIF encoded private key string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when privateKey is null</exception>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when privateKey has invalid length</exception>
        </member>
        <member name="M:NeoSharp.Crypto.WIF.Decode(System.String)">
            <summary>
            Decodes a WIF string to extract the private key.
            </summary>
            <param name="wifString">The WIF encoded private key string</param>
            <returns>A tuple containing the private key bytes and compressed flag</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when wifString is null</exception>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when WIF format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.WIF.IsValid(System.String)">
            <summary>
            Validates if a string is a properly formatted WIF.
            </summary>
            <param name="wifString">The string to validate</param>
            <returns>True if valid WIF format; otherwise, false</returns>
        </member>
        <member name="M:NeoSharp.Crypto.WIF.GetExpectedLength(System.Boolean)">
            <summary>
            Gets the expected WIF string length for the given parameters.
            </summary>
            <param name="compressed">Whether the key represents a compressed public key</param>
            <returns>Expected WIF string length</returns>
        </member>
        <member name="T:NeoSharp.Crypto.WIFExtensions">
            <summary>
            Extension methods for WIF encoding and decoding.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.WIFExtensions.ToWIF(System.Byte[],System.Boolean)">
            <summary>
            Converts a private key byte array to WIF format.
            </summary>
            <param name="privateKey">The private key bytes</param>
            <param name="compressed">Whether to use compressed public key format (default: true)</param>
            <returns>WIF encoded string</returns>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when private key format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.WIFExtensions.FromWIF(System.String)">
            <summary>
            Decodes a WIF string to extract the private key.
            </summary>
            <param name="wifString">The WIF encoded string</param>
            <returns>A tuple containing the private key bytes and compressed flag</returns>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when WIF format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.WIFExtensions.PrivateKeyFromWIF(System.String)">
            <summary>
            Decodes a WIF string to extract only the private key bytes.
            </summary>
            <param name="wifString">The WIF encoded string</param>
            <returns>The private key bytes</returns>
            <exception cref="T:NeoSharp.Crypto.WIFException">Thrown when WIF format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Crypto.WIFExtensions.IsValidWIF(System.String)">
            <summary>
            Validates if a string is a properly formatted WIF.
            </summary>
            <param name="wifString">The string to validate</param>
            <returns>True if valid WIF format; otherwise, false</returns>
        </member>
        <member name="T:NeoSharp.Crypto.WIFException">
            <summary>
            Exception thrown when Wallet Import Format (WIF) operations fail.
            WIF is a standard format for encoding private keys for easy import/export.
            </summary>
        </member>
        <member name="P:NeoSharp.Crypto.WIFException.ErrorCode">
            <summary>
            Gets the error code associated with this WIF operation.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor">
            <summary>
            Initializes a new instance of the WIFException class.
            </summary>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WIFException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the WIFException class with a specified error message and error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">A specific error code for this WIF operation.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the WIFException class with a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the WIFException class with a specified error message, error code, and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">A specific error code for this WIF operation.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the WIFException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.InvalidFormat(System.String)">
            <summary>
            Creates a WIFException for invalid format errors.
            </summary>
            <param name="message">The specific format error message.</param>
            <returns>A new WIFException with appropriate error code.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.InvalidChecksum(System.String)">
            <summary>
            Creates a WIFException for checksum validation errors.
            </summary>
            <param name="message">The specific checksum error message.</param>
            <returns>A new WIFException with appropriate error code.</returns>
        </member>
        <member name="M:NeoSharp.Crypto.WIFException.EncodingError(System.String,System.Exception)">
            <summary>
            Creates a WIFException for encoding/decoding errors.
            </summary>
            <param name="message">The specific encoding error message.</param>
            <param name="innerException">The underlying encoding exception.</param>
            <returns>A new WIFException with appropriate error code.</returns>
        </member>
        <member name="T:NeoSharp.NeoConstants">
            <summary>
            Neo protocol constants.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxArraySize">
            <summary>
            Maximum array size.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxItemSize">
            <summary>
            Maximum item size.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MainNetMagic">
            <summary>
            Magic number for Neo MainNet.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.TestNetMagic">
            <summary>
            Magic number for Neo TestNet.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.AddressVersion">
            <summary>
            Address version for Neo3.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.SignatureSize">
            <summary>
            Size of a signature in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.PublicKeySizeCompressed">
            <summary>
            Size of a compressed public key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.PublicKeySizeUncompressed">
            <summary>
            Size of an uncompressed public key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.PrivateKeySize">
            <summary>
            Size of a private key in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.Hash160Size">
            <summary>
            Size of a Hash160 in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.Hash256Size">
            <summary>
            Size of a Hash256 in bytes.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxStackSize">
            <summary>
            Maximum stack size.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxInvocationStackSize">
            <summary>
            Maximum invocation stack size.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxContractDescriptionLength">
            <summary>
            Maximum contract description length.
            </summary>
        </member>
        <member name="F:NeoSharp.NeoConstants.MaxManifestSize">
            <summary>
            Maximum manifest size.
            </summary>
        </member>
        <member name="T:NeoSharp.NeoConstants.NativeContracts">
            <summary>
            Native contract names.
            </summary>
        </member>
        <member name="T:NeoSharp.NeoConstants.NativeContractHashes">
            <summary>
            Native contract hashes.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.ContractMethodToken">
            <summary>
            Represents a contract method token.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractMethodToken.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractMethodToken.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractMethodToken.ParamCount">
            <summary>
            Gets or sets the parameter count.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractMethodToken.HasReturnValue">
            <summary>
            Gets or sets whether it has return value.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractMethodToken.CallFlags">
            <summary>
            Gets or sets the call flags.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.ContractNef">
            <summary>
            Represents a contract NEF (Neo Executable Format).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Magic">
            <summary>
            Gets or sets the magic number.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Compiler">
            <summary>
            Gets or sets the compiler information.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Source">
            <summary>
            Gets or sets the source URL.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Tokens">
            <summary>
            Gets or sets the tokens.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Script">
            <summary>
            Gets or sets the script.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractNef.Checksum">
            <summary>
            Gets or sets the checksum.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.ContractState">
            <summary>
            Represents a contract state.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractState.Id">
            <summary>
            Gets or sets the contract ID.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractState.UpdateCounter">
            <summary>
            Gets or sets the update counter.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractState.Hash">
            <summary>
            Gets or sets the contract hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractState.Nef">
            <summary>
            Gets or sets the NEF (Neo Executable Format) data.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.ContractState.Manifest">
            <summary>
            Gets or sets the contract manifest.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.ContractState.GetResult">
            <summary>
            Gets the result from the contract state
            </summary>
            <returns>The contract state result</returns>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.InvocationResult">
            <summary>
            Result of a contract invocation
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.State">
            <summary>
            Gets or sets the execution state
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.GasConsumed">
            <summary>
            Gets or sets the gas consumed
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.Stack">
            <summary>
            Gets or sets the stack of return values
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.Exception">
            <summary>
            Gets or sets the exception message if execution failed
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.Tx">
            <summary>
            Gets or sets the transaction hash
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.SessionId">
            <summary>
            Gets or sets the session ID for iterator operations
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvocationResult.HasStateFault">
            <summary>
            Gets whether the invocation resulted in a fault state
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.InvocationResult.GetResult">
            <summary>
            Gets the result as InvocationResult (for compatibility)
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.InvocationResult.GetFirstStackItem">
            <summary>
            Gets the first stack item from the results
            </summary>
            <returns>The first stack item or null</returns>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.InvokeFunctionResponse">
            <summary>
            Response for invokefunction RPC call
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvokeFunctionResponse.Session">
            <summary>
            Gets or sets the session ID
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.InvokeFunctionResponse.Iterator">
            <summary>
            Gets or sets the iterator results
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NativeContractState">
            <summary>
            Represents a native contract state.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NativeContractState.Id">
            <summary>
            Gets or sets the contract ID.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NativeContractState.Hash">
            <summary>
            Gets or sets the contract hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NativeContractState.Nef">
            <summary>
            Gets or sets the NEF (Neo Executable Format) data.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NativeContractState.Manifest">
            <summary>
            Gets or sets the contract manifest.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NativeContractState.UpdateCounter">
            <summary>
            Gets or sets the update counter.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoAddress">
            <summary>
            Represents a Neo address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoAddress.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoAddress.HasKey">
            <summary>
            Gets or sets whether it has a key.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoAddress.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoAddress.WatchOnly">
            <summary>
            Gets or sets whether it is a watch-only address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoApplicationLog">
            <summary>
            Response class for getapplicationlog method.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.TxId">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.VmState">
            <summary>
            Gets or sets the VM state.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.GasConsumed">
            <summary>
            Gets or sets the GAS consumed.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.Stack">
            <summary>
            Gets or sets the stack.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.Notifications">
            <summary>
            Gets or sets the notifications.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoApplicationLog.Executions">
            <summary>
            Gets or sets the executions.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.Notification">
            <summary>
            Represents a notification.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Notification.Contract">
            <summary>
            Gets or sets the contract hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Notification.EventName">
            <summary>
            Gets or sets the event name.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Notification.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.Execution">
            <summary>
            Represents an execution.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.Trigger">
            <summary>
            Gets or sets the trigger.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.VmState">
            <summary>
            Gets or sets the VM state.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.GasConsumed">
            <summary>
            Gets or sets the GAS consumed.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.Stack">
            <summary>
            Gets or sets the stack.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.Notifications">
            <summary>
            Gets or sets the notifications.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Execution.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoBlock">
            <summary>
            Represents a block in the Neo blockchain.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Hash">
            <summary>
            Gets or sets the block hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Size">
            <summary>
            Gets or sets the block size in bytes.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Version">
            <summary>
            Gets or sets the block version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.PreviousBlockHash">
            <summary>
            Gets or sets the previous block hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.MerkleRoot">
            <summary>
            Gets or sets the merkle root.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Time">
            <summary>
            Gets or sets the block time (Unix timestamp in seconds).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Index">
            <summary>
            Gets or sets the block index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Primary">
            <summary>
            Gets or sets the primary index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.NextConsensus">
            <summary>
            Gets or sets the next consensus address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Witnesses">
            <summary>
            Gets or sets the witnesses.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Transactions">
            <summary>
            Gets or sets the transactions.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.Confirmations">
            <summary>
            Gets or sets the confirmations.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.NextBlockHash">
            <summary>
            Gets or sets the next block hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoBlock.DateTime">
            <summary>
            Gets the block time as DateTime.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoFindStates">
            <summary>
            Response class for findstates method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoFindStates.States">
            <summary>
            Represents the states.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.States.Truncated">
            <summary>
            Gets or sets whether the proof was truncated.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.States.FirstProof">
            <summary>
            Gets or sets the first proof.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.States.LastProof">
            <summary>
            Gets or sets the last proof.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.States.Results">
            <summary>
            Gets or sets the results.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoFindStates.StateResult">
            <summary>
            Represents a state result.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.StateResult.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoFindStates.StateResult.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetMemPool">
            <summary>
            Response class for getmempool method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetMemPool.MemPoolDetails">
            <summary>
            Represents the memory pool details.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetMemPool.MemPoolDetails.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetMemPool.MemPoolDetails.Verified">
            <summary>
            Gets or sets the list of verified transactions.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetMemPool.MemPoolDetails.Unverified">
            <summary>
            Gets or sets the list of unverified transactions.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances">
            <summary>
            Response class for getnep11balances method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balances">
            <summary>
            Represents the NEP-11 balances.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balances.Balance">
            <summary>
            Gets or sets the balance list.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balances.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balance">
            <summary>
            Represents a NEP-11 balance.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balance.AssetHash">
            <summary>
            Gets or sets the asset hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balance.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balance.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Balance.Tokens">
            <summary>
            Gets or sets the tokens.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Token">
            <summary>
            Represents a NEP-11 token.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Token.TokenId">
            <summary>
            Gets or sets the token ID.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Token.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Balances.Nep11Token.LastUpdatedBlock">
            <summary>
            Gets or sets the last updated block.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers">
            <summary>
            Response class for getnep11transfers method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfers">
            <summary>
            Represents the NEP-11 transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfers.Sent">
            <summary>
            Gets or sets the sent transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfers.Received">
            <summary>
            Gets or sets the received transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfers.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer">
            <summary>
            Represents a NEP-11 transfer.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.AssetHash">
            <summary>
            Gets or sets the asset hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.TransferAddress">
            <summary>
            Gets or sets the transfer address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.TokenId">
            <summary>
            Gets or sets the token ID.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.BlockIndex">
            <summary>
            Gets or sets the block index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.TransferNotifyIndex">
            <summary>
            Gets or sets the transfer notify index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep11Transfers.Nep11Transfer.TxHash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances">
            <summary>
            Response class for getnep17balances method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balances">
            <summary>
            Represents the NEP-17 balances.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balances.Balance">
            <summary>
            Gets or sets the balance list.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balances.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance">
            <summary>
            Represents a NEP-17 balance.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.AssetHash">
            <summary>
            Gets or sets the asset hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.Decimals">
            <summary>
            Gets or sets the decimals.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Balances.Nep17Balance.LastUpdatedBlock">
            <summary>
            Gets or sets the last updated block.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers">
            <summary>
            Response class for getnep17transfers method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfers">
            <summary>
            Represents the NEP-17 transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfers.Sent">
            <summary>
            Gets or sets the sent transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfers.Received">
            <summary>
            Gets or sets the received transfers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfers.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer">
            <summary>
            Represents a NEP-17 transfer.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.AssetHash">
            <summary>
            Gets or sets the asset hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.TransferAddress">
            <summary>
            Gets or sets the transfer address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.BlockIndex">
            <summary>
            Gets or sets the block index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.TransferNotifyIndex">
            <summary>
            Gets or sets the transfer notify index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNep17Transfers.Nep17Transfer.TxHash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNextBlockValidators">
            <summary>
            Response class for getnextblockvalidators method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetNextBlockValidators.Validator">
            <summary>
            Represents a validator.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNextBlockValidators.Validator.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetNextBlockValidators.Validator.Votes">
            <summary>
            Gets or sets the votes.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetPeers">
            <summary>
            Response class for getpeers method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peers">
            <summary>
            Represents the peers information.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peers.Unconnected">
            <summary>
            Gets or sets the list of unconnected peers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peers.Bad">
            <summary>
            Gets or sets the list of bad peers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peers.Connected">
            <summary>
            Gets or sets the list of connected peers.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peer">
            <summary>
            Represents a peer.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peer.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetPeers.Peer.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetStateHeight">
            <summary>
            Response class for getstateheight method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetStateHeight.StateHeight">
            <summary>
            Represents the state height.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateHeight.StateHeight.LocalRootIndex">
            <summary>
            Gets or sets the local root index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateHeight.StateHeight.ValidatedRootIndex">
            <summary>
            Gets or sets the validated root index.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetStateRoot">
            <summary>
            Response class for getstateroot method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetStateRoot.StateRoot">
            <summary>
            Represents a state root.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateRoot.StateRoot.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateRoot.StateRoot.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateRoot.StateRoot.RootHash">
            <summary>
            Gets or sets the root hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetStateRoot.StateRoot.Witnesses">
            <summary>
            Gets or sets the witnesses.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetUnclaimedGas">
            <summary>
            Response class for getunclaimedgas method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetUnclaimedGas.GetUnclaimedGas">
            <summary>
            Represents the unclaimed gas information.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetUnclaimedGas.GetUnclaimedGas.Unclaimed">
            <summary>
            Gets or sets the unclaimed amount.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetUnclaimedGas.GetUnclaimedGas.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetWalletBalance">
            <summary>
            Response class for getwalletbalance method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoGetWalletBalance.Balance">
            <summary>
            Represents the balance information.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoGetWalletBalance.Balance.BalanceAmount">
            <summary>
            Gets or sets the balance amount.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoListPlugins">
            <summary>
            Response class for listplugins method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoListPlugins.Plugin">
            <summary>
            Represents a plugin.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoListPlugins.Plugin.Name">
            <summary>
            Gets or sets the plugin name.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoListPlugins.Plugin.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoListPlugins.Plugin.Interfaces">
            <summary>
            Gets or sets the interfaces.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoNetworkFee">
            <summary>
            Response class for calculatenetworkfee method.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoNetworkFee.NetworkFee">
            <summary>
            Gets or sets the network fee.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoSendRawTransaction">
            <summary>
            Response class for sendrawtransaction method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoSendRawTransaction.RawTransaction">
            <summary>
            Represents the raw transaction result.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoSendRawTransaction.RawTransaction.Hash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoValidateAddress">
            <summary>
            Response class for validateaddress method.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoValidateAddress.Result">
            <summary>
            Represents the validation result.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoValidateAddress.Result.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoValidateAddress.Result.IsValid">
            <summary>
            Gets or sets whether the address is valid.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.NeoWitness">
            <summary>
            Represents a witness in the Neo blockchain.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoWitness.Invocation">
            <summary>
            Gets or sets the invocation script.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.NeoWitness.Verification">
            <summary>
            Gets or sets the verification script.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.StackItem">
            <summary>
            Represents a stack item in Neo VM.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Type">
            <summary>
            Gets or sets the type of the stack item.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Id">
            <summary>
            Gets or sets the id (for iterators and other reference types).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Interface">
            <summary>
            Gets or sets the interface (for interop interface types).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Iterator">
            <summary>
            Gets or sets the iterator (for iterator types).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.Truncated">
            <summary>
            Gets or sets the truncated flag (for large items).
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.IsByteString">
            <summary>
            Gets a value indicating whether this item is a ByteString
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.IsInteger">
            <summary>
            Gets a value indicating whether this item is an Integer
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.IsBoolean">
            <summary>
            Gets a value indicating whether this item is a Boolean
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.IsArray">
            <summary>
            Gets a value indicating whether this item is an Array
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.StackItem.IsAny">
            <summary>
            Gets a value indicating whether this item is Any type (null or empty)
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItem.GetByteArray">
            <summary>
            Gets the value as a byte array
            </summary>
            <returns>The byte array representation</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItem.GetInteger">
            <summary>
            Gets the value as an integer
            </summary>
            <returns>The integer value</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItem.GetBoolean">
            <summary>
            Gets the value as a boolean
            </summary>
            <returns>The boolean value</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItem.GetList">
            <summary>
            Gets the value as a list of stack items
            </summary>
            <returns>The list of stack items</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItem.GetHexString">
            <summary>
            Gets the value as a hex string
            </summary>
            <returns>The hex string value</returns>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.StackItemExtensions">
            <summary>
            Extension methods for StackItem to match Swift SDK functionality
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetString(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the string value from a StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetByteArray(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the byte array value from a StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsBuffer(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is a buffer type
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsInteropInterface(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is an interop interface
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetIteratorId(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the iterator ID from an interop interface StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetHexString(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the hex string value from a StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetInteger(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the integer value from a StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetBoolean(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the boolean value from a StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.GetList(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Gets the list of StackItems from an array StackItem
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsArray(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is an array type
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsByteString(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is a byte string type
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsInteger(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is an integer type
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsBoolean(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is a boolean type
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Core.Response.StackItemExtensions.IsAny(NeoSharp.Protocol.Core.Response.StackItem)">
            <summary>
            Checks if the StackItem is an any (null) type
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.Transaction">
            <summary>
            Represents a transaction in the Neo blockchain.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Hash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Size">
            <summary>
            Gets or sets the transaction size in bytes.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Version">
            <summary>
            Gets or sets the transaction version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Sender">
            <summary>
            Gets or sets the sender.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.SystemFee">
            <summary>
            Gets or sets the system fee.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.NetworkFee">
            <summary>
            Gets or sets the network fee.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.ValidUntilBlock">
            <summary>
            Gets or sets the valid until block.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Signers">
            <summary>
            Gets or sets the signers.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Script">
            <summary>
            Gets or sets the script.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Witnesses">
            <summary>
            Gets or sets the witnesses.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.BlockHash">
            <summary>
            Gets or sets the block hash where this transaction was included.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.Confirmations">
            <summary>
            Gets or sets the confirmations.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.BlockTime">
            <summary>
            Gets or sets the block time.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.Transaction.VmState">
            <summary>
            Gets or sets the VM state.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.TransactionAttribute">
            <summary>
            Represents a transaction attribute.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionAttribute.Type">
            <summary>
            Gets or sets the attribute type.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionAttribute.AllowMultiple">
            <summary>
            Gets or sets the allow multiple flag.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.TransactionSendToken">
            <summary>
            Represents a transaction send token.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSendToken.Asset">
            <summary>
            Gets or sets the token hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSendToken.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSendToken.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.TransactionSigner">
            <summary>
            Represents a transaction signer.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSigner.Account">
            <summary>
            Gets or sets the account script hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSigner.Scopes">
            <summary>
            Gets or sets the witness scopes.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSigner.AllowedContracts">
            <summary>
            Gets or sets the allowed contracts.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSigner.AllowedGroups">
            <summary>
            Gets or sets the allowed groups.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.TransactionSigner.Rules">
            <summary>
            Gets or sets the witness rules.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.WitnessRule">
            <summary>
            Represents a witness rule.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessRule.Action">
            <summary>
            Gets or sets the action.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessRule.Condition">
            <summary>
            Gets or sets the condition.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Core.Response.WitnessCondition">
            <summary>
            Represents a witness condition.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessCondition.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessCondition.Expressions">
            <summary>
            Gets or sets the expression list.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessCondition.Hash">
            <summary>
            Gets or sets the hash value.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Core.Response.WitnessCondition.Group">
            <summary>
            Gets or sets the group value.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Http.HttpService">
            <summary>
            HTTP service for JSON-RPC communication.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Http.HttpService.#ctor(System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{NeoSharp.Protocol.Http.HttpService})">
            <summary>
            Initializes a new instance of the HttpService class.
            </summary>
            <param name="url">The RPC endpoint URL.</param>
            <param name="httpClient">The HTTP client to use.</param>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:NeoSharp.Protocol.Http.HttpService.SendAsync``1(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request.
            </summary>
            <typeparam name="T">The response type.</typeparam>
            <param name="method">The RPC method name.</param>
            <param name="parameters">The method parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The response.</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Http.HttpService.Dispose">
            <summary>
            Disposes the HTTP service.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Http.HttpService.Dispose(System.Boolean)">
            <summary>
            Disposes the HTTP service.
            </summary>
            <param name="disposing">Whether to dispose managed resources.</param>
        </member>
        <member name="T:NeoSharp.Protocol.Http.JsonRpcRequest">
            <summary>
            JSON-RPC request.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcRequest.JsonRpc">
            <summary>
            Gets or sets the JSON-RPC version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcRequest.Method">
            <summary>
            Gets or sets the method name.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcRequest.Params">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcRequest.Id">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Http.JsonRpcResponse`1">
            <summary>
            JSON-RPC response.
            </summary>
            <typeparam name="T">The result type.</typeparam>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcResponse`1.JsonRpc">
            <summary>
            Gets or sets the JSON-RPC version.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcResponse`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcResponse`1.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcResponse`1.Id">
            <summary>
            Gets or sets the request ID.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Http.JsonRpcError">
            <summary>
            JSON-RPC error.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcError.Code">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcError.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Http.JsonRpcError.Data">
            <summary>
            Gets or sets additional error data.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Http.JsonRpcException">
            <summary>
            JSON-RPC exception.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Http.JsonRpcException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JsonRpcException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:NeoSharp.Protocol.Http.JsonRpcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the JsonRpcException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:NeoSharp.Protocol.INeoSharp">
            <summary>
            Interface for NeoSharp client
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBestBlockHashAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the hash of the tallest block in the main chain.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockHashAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the hash of a specific block by its index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockAsync(NeoSharp.Types.Hash256,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets block information by block hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets block information by block index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawBlockAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets the raw block data by block hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawBlockAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the raw block data by block index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockHeaderCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the number of block headers in the blockchain.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the number of blocks in the blockchain.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockHeaderAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets block header information by block hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetBlockHeaderAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets block header information by block index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawBlockHeaderAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets the raw block header data by block hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawBlockHeaderAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the raw block header data by block index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNativeContractsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about native contracts.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetContractStateAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the contract state by contract hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNativeContractStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the native contract state by name.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetMemPoolAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current memory pool details.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawMemPoolAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of transaction hashes in the memory pool.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetTransactionAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets a transaction by its hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetRawTransactionAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets the raw transaction data by transaction hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetStorageAsync(NeoSharp.Types.Hash160,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the value stored in a contract's storage.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetTransactionHeightAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets the block height in which a transaction was included.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNextBlockValidatorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the validators for the next block.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetCommitteeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of current committee members.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetConnectionCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the current number of connections for the node.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetPeersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of nodes that this node is connected to.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetVersionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the version information about the node.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendRawTransactionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a raw transaction to the network.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SubmitBlockAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Submits a new block to the network.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeFunctionAsync(NeoSharp.Types.Hash160,System.String,System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a smart contract function without parameters.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeFunctionAsync(NeoSharp.Types.Hash160,System.String,System.Collections.Generic.IList{NeoSharp.Types.ContractParameter},System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a smart contract function with parameters.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeFunctionDiagnosticsAsync(NeoSharp.Types.Hash160,System.String,System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a smart contract function with diagnostics.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeFunctionDiagnosticsAsync(NeoSharp.Types.Hash160,System.String,System.Collections.Generic.IList{NeoSharp.Types.ContractParameter},System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a smart contract function with parameters and diagnostics.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeScriptAsync(System.String,System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a script given its hex representation.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeScriptDiagnosticsAsync(System.String,System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a script with diagnostics.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.TraverseIteratorAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Traverses an iterator.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.TerminateSessionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Terminates a session.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.InvokeContractVerifyAsync(NeoSharp.Types.Hash160,System.Collections.Generic.IList{NeoSharp.Types.ContractParameter},System.Collections.Generic.IList{NeoSharp.Types.Signer},System.Threading.CancellationToken)">
            <summary>
            Invokes a contract verification method.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetUnclaimedGasAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the amount of unclaimed GAS for an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.ListPluginsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of loaded plugins.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.ValidateAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.CloseWalletAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the currently opened wallet.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.OpenWalletAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a wallet file.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.DumpPrivKeyAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Exports the private key of an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetWalletBalanceAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the balance of a specific asset.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNewAddressAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a new address in the currently opened wallet.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetWalletUnclaimedGasAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the amount of unclaimed GAS in the wallet.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.ImportPrivKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Imports a private key to the currently opened wallet.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.CalculateNetworkFeeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Calculates the network fee for a transaction.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.ListAddressAsync(System.Threading.CancellationToken)">
            <summary>
            Lists all addresses in the currently opened wallet.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendFromAsync(NeoSharp.Types.Hash160,NeoSharp.Types.Hash160,NeoSharp.Types.Hash160,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one address to another.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendFromAsync(NeoSharp.Types.Hash160,NeoSharp.Protocol.Core.Response.TransactionSendToken,System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one address using TransactionSendToken.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendManyAsync(System.Collections.Generic.IList{NeoSharp.Protocol.Core.Response.TransactionSendToken},System.Threading.CancellationToken)">
            <summary>
            Sends assets to multiple addresses.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendManyAsync(NeoSharp.Types.Hash160,System.Collections.Generic.IList{NeoSharp.Protocol.Core.Response.TransactionSendToken},System.Threading.CancellationToken)">
            <summary>
            Sends assets to multiple addresses from a specific address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendToAddressAsync(NeoSharp.Types.Hash160,NeoSharp.Types.Hash160,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Transfers an asset to an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.SendToAddressAsync(NeoSharp.Protocol.Core.Response.TransactionSendToken,System.Threading.CancellationToken)">
            <summary>
            Transfers an asset to an address using TransactionSendToken.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep17BalancesAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-17 token balances of an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep17TransfersAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-17 transfer history of an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep17TransfersAsync(NeoSharp.Types.Hash160,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-17 transfer history of an address from a specific date.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep17TransfersAsync(NeoSharp.Types.Hash160,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-17 transfer history of an address between two dates.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep11BalancesAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-11 token balances of an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep11TransfersAsync(NeoSharp.Types.Hash160,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-11 transfer history of an address.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep11TransfersAsync(NeoSharp.Types.Hash160,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-11 transfer history of an address from a specific date.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep11TransfersAsync(NeoSharp.Types.Hash160,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets the NEP-11 transfer history of an address between two dates.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetNep11PropertiesAsync(NeoSharp.Types.Hash160,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the properties of a NEP-11 token.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetApplicationLogAsync(NeoSharp.Types.Hash256,System.Threading.CancellationToken)">
            <summary>
            Gets the application log for a transaction.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetStateRootAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the state root by block index.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetProofAsync(NeoSharp.Types.Hash256,NeoSharp.Types.Hash160,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a proof for storage key.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.VerifyProofAsync(NeoSharp.Types.Hash256,System.String,System.Threading.CancellationToken)">
            <summary>
            Verifies a proof.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetStateHeightAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the state height.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.GetStateAsync(NeoSharp.Types.Hash256,NeoSharp.Types.Hash160,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the state value.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.INeoSharp.FindStatesAsync(NeoSharp.Types.Hash256,NeoSharp.Types.Hash160,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Finds states by prefix.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Models.NeoAccountState">
            <summary>
            Represents a Neo account state
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoAccountState.ScriptHash">
            <summary>
            Gets or sets the account script hash
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoAccountState.Balance">
            <summary>
            Gets or sets the account balance
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoAccountState.LastUpdatedBlock">
            <summary>
            Gets or sets the last updated block index
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoAccountState.IsFrozen">
            <summary>
            Gets or sets whether the account is frozen
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoAccountState.VoteTo">
            <summary>
            Gets or sets the account vote target
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Models.NeoAccountState.#ctor(NeoSharp.Types.Hash160,System.Numerics.BigInteger,System.Int64)">
            <summary>
            Initializes a new NeoAccountState with specified values
            </summary>
            <param name="scriptHash">The account script hash</param>
            <param name="balance">The account balance</param>
            <param name="lastUpdatedBlock">The last updated block index</param>
        </member>
        <member name="M:NeoSharp.Protocol.Models.NeoAccountState.#ctor">
            <summary>
            Initializes a new empty NeoAccountState
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Models.NeoAccountState.WithNoBalance(NeoSharp.Types.Hash160)">
            <summary>
            Creates a NeoAccountState with no balance
            </summary>
            <param name="scriptHash">The account script hash</param>
            <returns>A NeoAccountState with zero balance</returns>
        </member>
        <member name="M:NeoSharp.Protocol.Models.NeoAccountState.WithNoVote(NeoSharp.Types.Hash160,System.Numerics.BigInteger,System.Int64)">
            <summary>
            Creates a NeoAccountState with no vote
            </summary>
            <param name="scriptHash">The account script hash</param>
            <param name="balance">The account balance</param>
            <param name="lastUpdatedBlock">The last updated block index</param>
            <returns>A NeoAccountState with no vote target</returns>
        </member>
        <member name="T:NeoSharp.Protocol.Models.NeoGetVersion">
            <summary>
            Response from getversion RPC call
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion">
            <summary>
            Version information
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion.TcpPort">
            <summary>
            TCP port
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion.WsPort">
            <summary>
            WebSocket port
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion.UserAgent">
            <summary>
            User agent
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.NeoVersion.Protocol">
            <summary>
            Protocol information
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo">
            <summary>
            Protocol information
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.Network">
            <summary>
            Network ID
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.ValidatorsCount">
            <summary>
            Validators count
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.MillisecondsPerBlock">
            <summary>
            Milliseconds per block
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.MaxTraceableBlocks">
            <summary>
            Maximum transactions per block
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.AddressVersion">
            <summary>
            Address version
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.MaxTransactionsPerBlock">
            <summary>
            Maximum transactions per block
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.MemoryPoolMaxTransactions">
            <summary>
            Memory pool maximum transactions
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Models.NeoGetVersion.ProtocolInfo.InitialGasDistribution">
            <summary>
            Initial gas distribution
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.NeoSharp">
            <summary>
            Main NeoSharp client implementation.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharp.Config">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharp.NnsResolver">
            <summary>
            Gets the NNS resolver hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharp.BlockInterval">
            <summary>
            Gets the block interval in milliseconds.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharp.PollingInterval">
            <summary>
            Gets the polling interval in milliseconds.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharp.MaxValidUntilBlockIncrement">
            <summary>
            Gets the maximum valid until block increment.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharp.#ctor(System.String,NeoSharp.Protocol.NeoSharpConfig,Microsoft.Extensions.Logging.ILogger{NeoSharp.Protocol.NeoSharp})">
            <summary>
            Initializes a new instance of the NeoSharp class.
            </summary>
            <param name="url">The RPC endpoint URL.</param>
            <param name="config">The configuration.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharp.AllowTransmissionOnFault">
            <summary>
            Allows transmission of scripts that lead to a FAULT VM state.
            </summary>
        </member>
        <member name="T:NeoSharp.Protocol.NeoSharpConfig">
            <summary>
            Configuration for NeoSharp client.
            </summary>
        </member>
        <member name="F:NeoSharp.Protocol.NeoSharpConfig.DEFAULT_BLOCK_TIME">
            <summary>
            Default block time in milliseconds.
            </summary>
        </member>
        <member name="F:NeoSharp.Protocol.NeoSharpConfig.DEFAULT_POLLING_INTERVAL">
            <summary>
            Default polling interval in milliseconds.
            </summary>
        </member>
        <member name="F:NeoSharp.Protocol.NeoSharpConfig.MAX_VALID_UNTIL_BLOCK_INCREMENT_BASE">
            <summary>
            Maximum valid until block increment base.
            </summary>
        </member>
        <member name="F:NeoSharp.Protocol.NeoSharpConfig.DEFAULT_ADDRESS_VERSION">
            <summary>
            Default address version for Neo3.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.NnsResolver">
            <summary>
            Gets or sets the NNS resolver hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.BlockInterval">
            <summary>
            Gets or sets the block interval in milliseconds.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.PollingInterval">
            <summary>
            Gets or sets the polling interval in milliseconds.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.MaxValidUntilBlockIncrement">
            <summary>
            Gets or sets the maximum valid until block increment.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.AllowTransmissionOnFault">
            <summary>
            Gets or sets whether to allow transmission on fault.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.NetworkMagic">
            <summary>
            Gets or sets the network magic number.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.NeoSharpConfig.AddressVersion">
            <summary>
            Gets or sets the address version.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharpConfig.EnableTransmissionOnFault">
            <summary>
            Allows transmission of scripts that lead to a FAULT VM state.
            </summary>
            <returns>The updated configuration.</returns>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharpConfig.UseMainNet">
            <summary>
            Sets the network to MainNet.
            </summary>
            <returns>The updated configuration.</returns>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharpConfig.UseTestNet">
            <summary>
            Sets the network to TestNet.
            </summary>
            <returns>The updated configuration.</returns>
        </member>
        <member name="M:NeoSharp.Protocol.NeoSharpConfig.UseCustomNet(System.UInt32)">
            <summary>
            Sets a custom network magic.
            </summary>
            <param name="magic">The network magic number.</param>
            <returns>The updated configuration.</returns>
        </member>
        <member name="T:NeoSharp.Protocol.ProtocolException">
            <summary>
            Exception thrown when protocol-related errors occur
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProtocolException class
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:NeoSharp.Protocol.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ProtocolException class
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:NeoSharp.Protocol.Responses.NeoAccountState">
            <summary>
            Represents a NEO account state.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Responses.NeoAccountState.Balance">
            <summary>
            Gets or sets the NEO balance.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Responses.NeoAccountState.BalanceHeight">
            <summary>
            Gets or sets the balance height.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Responses.NeoAccountState.PublicKey">
            <summary>
            Gets or sets the public key.
            </summary>
        </member>
        <member name="P:NeoSharp.Protocol.Responses.NeoAccountState.VoteTo">
            <summary>
            Gets or sets whether the account has voted.
            </summary>
        </member>
        <member name="M:NeoSharp.Protocol.Responses.NeoAccountState.GetBalance">
            <summary>
            Gets the balance as a BigInteger.
            </summary>
            <returns>The balance.</returns>
        </member>
        <member name="T:NeoSharp.Script.OpCode">
            <summary>
            Represents Neo VM operation codes
            </summary>
        </member>
        <member name="T:NeoSharp.Script.OpCodeExtensions">
            <summary>
            Extension methods for OpCode
            </summary>
        </member>
        <member name="M:NeoSharp.Script.OpCodeExtensions.ToByte(NeoSharp.Script.OpCode)">
            <summary>
            Gets the byte value of the opcode
            </summary>
            <param name="opCode">The opcode</param>
            <returns>The byte value</returns>
        </member>
        <member name="M:NeoSharp.Script.OpCodeExtensions.ToHexString(NeoSharp.Script.OpCode)">
            <summary>
            Gets the hex string representation of the opcode
            </summary>
            <param name="opCode">The opcode</param>
            <returns>The hex string</returns>
        </member>
        <member name="M:NeoSharp.Script.OpCodeExtensions.GetPrice(NeoSharp.Script.OpCode)">
            <summary>
            Gets the execution price of the opcode in GAS
            </summary>
            <param name="opCode">The opcode</param>
            <returns>The execution price</returns>
        </member>
        <member name="M:NeoSharp.Script.OpCodeExtensions.GetOperandSize(NeoSharp.Script.OpCode)">
            <summary>
            Gets the operand size information for the opcode
            </summary>
            <param name="opCode">The opcode</param>
            <returns>The operand size, or null if no operand</returns>
        </member>
        <member name="T:NeoSharp.Script.OperandSize">
            <summary>
            Represents operand size information for opcodes
            </summary>
        </member>
        <member name="P:NeoSharp.Script.OperandSize.PrefixSize">
            <summary>
            The prefix size (for variable-length operands)
            </summary>
        </member>
        <member name="P:NeoSharp.Script.OperandSize.Size">
            <summary>
            The fixed size (for fixed-length operands)
            </summary>
        </member>
        <member name="M:NeoSharp.Script.OperandSize.#ctor(System.Int32)">
            <summary>
            Initializes operand size with fixed size
            </summary>
            <param name="size">The fixed size</param>
        </member>
        <member name="M:NeoSharp.Script.OperandSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes operand size with prefix size
            </summary>
            <param name="size">The size</param>
            <param name="prefixSize">The prefix size</param>
        </member>
        <member name="T:NeoSharp.Script.ScriptBuilder">
            <summary>
            Builder for Neo VM scripts
            </summary>
        </member>
        <member name="P:NeoSharp.Script.ScriptBuilder.Length">
            <summary>
            Gets the current length of the script
            </summary>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.#ctor">
            <summary>
            Initializes a new ScriptBuilder
            </summary>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.OpCode(NeoSharp.Script.OpCode[])">
            <summary>
            Appends OpCodes to the script
            </summary>
            <param name="opCodes">The OpCodes to append</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.OpCode(NeoSharp.Script.OpCode,System.Byte[])">
            <summary>
            Appends an OpCode with argument to the script
            </summary>
            <param name="opCode">The OpCode to append</param>
            <param name="argument">The argument of the OpCode</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.ContractCall(NeoSharp.Types.Hash160,System.String,NeoSharp.Types.ContractParameter[],NeoSharp.Core.CallFlags)">
            <summary>
            Appends a contract call to the script
            </summary>
            <param name="scriptHash">The script hash of the contract to call</param>
            <param name="method">The method to call</param>
            <param name="parameters">The parameters for the call</param>
            <param name="callFlags">The call flags to use</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.SysCall(System.String)">
            <summary>
            Appends a system call to the script
            </summary>
            <param name="operation">The interop service to call</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushParameters(NeoSharp.Types.ContractParameter[])">
            <summary>
            Adds contract parameters to the script
            </summary>
            <param name="parameters">The parameters to add</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushParameter(NeoSharp.Types.ContractParameter)">
            <summary>
            Adds a single contract parameter to the script
            </summary>
            <param name="parameter">The parameter to add</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushInteger(System.Numerics.BigInteger)">
            <summary>
            Adds a push operation with the given BigInteger to the script
            </summary>
            <param name="value">The BigInteger to push</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.EmitPush(System.Object)">
            <summary>
            Emits a push operation with the given value
            </summary>
            <param name="value">The value to push</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.EmitSysCall(System.String)">
            <summary>
            Emits a system call operation
            </summary>
            <param name="method">The method name to call</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushInteger(System.Int32)">
            <summary>
            Adds a push operation with the given integer to the script
            </summary>
            <param name="value">The integer to push</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PadNumber(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Pads a number to the specified byte length
            </summary>
            <param name="value">The value to pad</param>
            <param name="length">The target length</param>
            <returns>The padded bytes</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushBoolean(System.Boolean)">
            <summary>
            Adds a push operation with the given boolean to the script
            </summary>
            <param name="value">The boolean to push</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushData(System.String)">
            <summary>
            Adds data to the script with the correct length prefix
            </summary>
            <param name="data">The string data to add</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushData(System.Byte[])">
            <summary>
            Adds data to the script with the correct length prefix
            </summary>
            <param name="data">The byte data to add</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushArray(NeoSharp.Types.ContractParameter[])">
            <summary>
            Pushes an array parameter to the script
            </summary>
            <param name="parameters">The array parameters</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.PushMap(System.Collections.Generic.Dictionary{NeoSharp.Types.ContractParameter,NeoSharp.Types.ContractParameter})">
            <summary>
            Pushes a map parameter to the script
            </summary>
            <param name="map">The map to push</param>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.Pack">
            <summary>
            Adds a pack operation to the script
            </summary>
            <returns>This ScriptBuilder instance</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.ToArray">
            <summary>
            Gets the script as a byte array
            </summary>
            <returns>The script bytes</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.BuildVerificationScript(System.Byte[])">
            <summary>
            Builds a verification script for a single public key
            </summary>
            <param name="publicKey">The public key in compressed format</param>
            <returns>The verification script</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.BuildVerificationScript(System.Collections.Generic.IEnumerable{NeoSharp.Crypto.ECPublicKey},System.Int32)">
            <summary>
            Builds a verification script for multi-signature
            </summary>
            <param name="publicKeys">The public keys</param>
            <param name="threshold">The signing threshold</param>
            <returns>The verification script</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.BuildContractHashScript(NeoSharp.Types.Hash160,System.Int32,System.String)">
            <summary>
            Builds a script for calculating contract hash
            </summary>
            <param name="sender">The deploying account</param>
            <param name="nefChecksum">The NEF checksum</param>
            <param name="contractName">The contract name</param>
            <returns>The contract hash script</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.BuildContractCallAndUnwrapIterator(NeoSharp.Types.Hash160,System.String,NeoSharp.Types.ContractParameter[],System.Int32,NeoSharp.Core.CallFlags)">
            <summary>
            Builds a script that calls a contract and unwraps an iterator
            </summary>
            <param name="contractHash">The contract script hash</param>
            <param name="method">The method to call</param>
            <param name="parameters">The method parameters</param>
            <param name="maxItems">The maximum number of items to retrieve</param>
            <param name="callFlags">The call flags</param>
            <returns>The unwrap iterator script</returns>
        </member>
        <member name="M:NeoSharp.Script.ScriptBuilder.Dispose">
            <summary>
            Releases all resources used by the ScriptBuilder
            </summary>
        </member>
        <member name="T:NeoSharp.Serialization.BinaryReader">
            <summary>
            Binary reader for Neo serialization format with little-endian byte order
            </summary>
        </member>
        <member name="P:NeoSharp.Serialization.BinaryReader.Position">
            <summary>
            Gets the current position in the stream
            </summary>
        </member>
        <member name="P:NeoSharp.Serialization.BinaryReader.Available">
            <summary>
            Gets the number of bytes available to read
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.#ctor(System.Byte[])">
            <summary>
            Initializes a new BinaryReader with the specified byte array
            </summary>
            <param name="input">The input byte array</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new BinaryReader with a MemoryStream
            </summary>
            <param name="stream">The memory stream to read from</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.Mark">
            <summary>
            Marks the current position for later reset
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.Reset">
            <summary>
            Resets to the previously marked position
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no mark has been set</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadBoolean">
            <summary>
            Reads a boolean value
            </summary>
            <returns>The boolean value</returns>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when there are insufficient bytes</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadByte">
            <summary>
            Reads a single byte
            </summary>
            <returns>The byte value</returns>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when there are insufficient bytes</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadUnsignedByte">
            <summary>
            Reads a byte as an unsigned integer
            </summary>
            <returns>The unsigned integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes
            </summary>
            <param name="length">The number of bytes to read</param>
            <returns>The byte array</returns>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when there are insufficient bytes</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer
            </summary>
            <returns>The unsigned integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadInt16">
            <summary>
            Reads a 16-bit signed integer
            </summary>
            <returns>The signed integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer
            </summary>
            <returns>The unsigned integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadInt32">
            <summary>
            Reads a 32-bit signed integer
            </summary>
            <returns>The signed integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadInt64">
            <summary>
            Reads a 64-bit signed integer
            </summary>
            <returns>The signed integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadEncodedECPoint">
            <summary>
            Reads an encoded EC point (compressed format)
            </summary>
            <returns>The encoded EC point bytes</returns>
            <exception cref="T:System.FormatException">Thrown when the point format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadECPoint">
            <summary>
            Reads an EC point
            </summary>
            <returns>The EC point</returns>
            <exception cref="T:System.FormatException">Thrown when the point format is invalid</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadSerializable``1">
            <summary>
            Reads a serializable object
            </summary>
            <typeparam name="T">The type of object to read</typeparam>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadSerializableListVarBytes``1">
            <summary>
            Reads a list of serializable objects with variable-length encoding
            </summary>
            <typeparam name="T">The type of objects to read</typeparam>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadSerializableList``1">
            <summary>
            Reads a list of serializable objects
            </summary>
            <typeparam name="T">The type of objects to read</typeparam>
            <returns>The list of objects</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadVarBytes">
            <summary>
            Reads a variable-length byte array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadVarString">
            <summary>
            Reads a variable-length string
            </summary>
            <returns>The UTF-8 string</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadPushData">
            <summary>
            Reads PUSHDATA operation data
            </summary>
            <returns>The data bytes</returns>
            <exception cref="T:System.FormatException">Thrown when not positioned at a PUSHDATA opcode</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadVarBytes(System.Int32)">
            <summary>
            Reads a variable-length byte array with maximum size limit
            </summary>
            <param name="max">The maximum allowed size</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadVarInt">
            <summary>
            Reads a variable-length integer
            </summary>
            <returns>The integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadVarInt(System.Int32)">
            <summary>
            Reads a variable-length integer with maximum value limit
            </summary>
            <param name="max">The maximum allowed value</param>
            <returns>The integer value</returns>
            <exception cref="T:System.FormatException">Thrown when value exceeds maximum</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadPushString">
            <summary>
            Reads a PUSH string operation
            </summary>
            <returns>The UTF-8 string</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadPushInt">
            <summary>
            Reads a PUSH integer operation
            </summary>
            <returns>The integer value</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.ReadPushBigInt">
            <summary>
            Reads a PUSH big integer operation
            </summary>
            <returns>The BigInteger value</returns>
            <exception cref="T:System.FormatException">Thrown when opcode is not a PUSH integer</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.EnsureAvailable(System.Int32)">
            <summary>
            Ensures that the specified number of bytes are available
            </summary>
            <param name="count">The number of bytes required</param>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when insufficient bytes are available</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReader.Dispose">
            <summary>
            Releases all resources used by the BinaryReader
            </summary>
        </member>
        <member name="T:NeoSharp.Serialization.BinaryReaderExtensions">
            <summary>
            Extension methods for System.IO.BinaryReader.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReaderExtensions.ReadVarInt(System.IO.BinaryReader,System.Int64)">
            <summary>
            Reads a variable-length integer.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryReaderExtensions.ReadVarBytes(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a variable-length byte array.
            </summary>
        </member>
        <member name="T:NeoSharp.Serialization.BinaryWriter">
            <summary>
            Binary writer for Neo serialization format with little-endian byte order
            </summary>
        </member>
        <member name="P:NeoSharp.Serialization.BinaryWriter.Length">
            <summary>
            Gets the current length of the written data
            </summary>
        </member>
        <member name="P:NeoSharp.Serialization.BinaryWriter.Position">
            <summary>
            Gets the current position in the stream
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.#ctor">
            <summary>
            Initializes a new BinaryWriter
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new BinaryWriter with initial capacity
            </summary>
            <param name="capacity">The initial capacity</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new BinaryWriter with an existing stream
            </summary>
            <param name="stream">The memory stream to write to</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean value
            </summary>
            <param name="value">The boolean value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteByte(System.Byte)">
            <summary>
            Writes a single byte
            </summary>
            <param name="value">The byte value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte array
            </summary>
            <param name="value">The byte array</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array (alias for WriteBytes)
            </summary>
            <param name="value">The byte array</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a 16-bit signed integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a 32-bit signed integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a 64-bit signed integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteECPoint(NeoSharp.Crypto.ECPoint)">
            <summary>
            Writes an EC point in compressed format
            </summary>
            <param name="point">The EC point</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteSerializable(NeoSharp.Serialization.INeoSerializable)">
            <summary>
            Writes a serializable object
            </summary>
            <param name="serializable">The serializable object</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteSerializableCollection``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Writes a collection of serializable objects
            </summary>
            <param name="collection">The collection of serializable objects</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteVarBytes(System.Byte[])">
            <summary>
            Writes a variable-length byte array
            </summary>
            <param name="value">The byte array</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteVarString(System.String)">
            <summary>
            Writes a variable-length string
            </summary>
            <param name="value">The UTF-8 string</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteVarInt(System.Int64)">
            <summary>
            Writes a variable-length integer
            </summary>
            <param name="value">The integer value</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is negative</exception>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WriteVarBigInteger(System.Numerics.BigInteger)">
            <summary>
            Writes a BigInteger as a variable-length signed integer
            </summary>
            <param name="value">The BigInteger value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WritePushData(System.Byte[])">
            <summary>
            Writes PUSHDATA operation for the specified data
            </summary>
            <param name="data">The data to write</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WritePushString(System.String)">
            <summary>
            Writes a PUSH string operation
            </summary>
            <param name="value">The string value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WritePushInt(System.Int32)">
            <summary>
            Writes a PUSH integer operation
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.WritePushBigInteger(System.Numerics.BigInteger)">
            <summary>
            Writes a PUSH big integer operation
            </summary>
            <param name="value">The BigInteger value</param>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.ToArray">
            <summary>
            Gets the written data as a byte array
            </summary>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.Flush">
            <summary>
            Flushes the underlying stream
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to the specified position
            </summary>
            <param name="offset">The offset</param>
            <param name="origin">The seek origin</param>
            <returns>The new position</returns>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriter.Dispose">
            <summary>
            Releases all resources used by the BinaryWriter
            </summary>
        </member>
        <member name="T:NeoSharp.Serialization.BinaryWriterExtensions">
            <summary>
            Extension methods for System.IO.BinaryWriter.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriterExtensions.WriteVarInt(System.IO.BinaryWriter,System.Int64)">
            <summary>
            Writes a variable-length integer.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriterExtensions.WriteVarBytes(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a variable-length byte array.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriterExtensions.GetVarSize(System.Int64)">
            <summary>
            Gets the encoded size of a variable-length integer.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.BinaryWriterExtensions.GetVarSize(System.Byte[])">
            <summary>
            Gets the encoded size of a variable-length byte array.
            </summary>
        </member>
        <member name="T:NeoSharp.Serialization.INeoSerializable">
            <summary>
            Interface for Neo serializable objects.
            </summary>
        </member>
        <member name="P:NeoSharp.Serialization.INeoSerializable.Size">
            <summary>
            Gets the size of the serialized data.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.INeoSerializable.Serialize(NeoSharp.Serialization.BinaryWriter)">
            <summary>
            Serializes the object to a BinaryWriter.
            </summary>
            <param name="writer">The BinaryWriter to write to.</param>
        </member>
        <member name="M:NeoSharp.Serialization.INeoSerializable.Deserialize(NeoSharp.Serialization.BinaryReader)">
            <summary>
            Deserializes the object from a BinaryReader.
            </summary>
            <param name="reader">The BinaryReader to read from.</param>
        </member>
        <member name="T:NeoSharp.Serialization.NeoSerializableExtensions">
            <summary>
            Extension methods for INeoSerializable.
            </summary>
        </member>
        <member name="M:NeoSharp.Serialization.NeoSerializableExtensions.ToArray(NeoSharp.Serialization.INeoSerializable)">
            <summary>
            Serializes the object to a byte array.
            </summary>
            <param name="serializable">The serializable object.</param>
            <returns>The serialized byte array.</returns>
        </member>
        <member name="M:NeoSharp.Serialization.NeoSerializableExtensions.FromArray``1(System.Byte[])">
            <summary>
            Creates an instance from a byte array.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="data">The byte array data.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NeoSharp.Transaction.AccountSigner">
            <summary>
            Represents an account-based signer for transactions
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.AccountSigner.Account">
            <summary>
            The account to use for signing
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.AccountSigner.#ctor(NeoSharp.Wallet.Account,NeoSharp.Types.WitnessScope)">
            <summary>
            Initializes a new AccountSigner
            </summary>
            <param name="account">The account to use for signing</param>
            <param name="scopes">The witness scopes (default: CalledByEntry)</param>
        </member>
        <member name="M:NeoSharp.Transaction.AccountSigner.#ctor(NeoSharp.Wallet.Account,NeoSharp.Types.WitnessScope,NeoSharp.Types.Hash160[])">
            <summary>
            Initializes a new AccountSigner with allowed contracts
            </summary>
            <param name="account">The account to use for signing</param>
            <param name="scopes">The witness scopes</param>
            <param name="allowedContracts">The allowed contracts</param>
        </member>
        <member name="M:NeoSharp.Transaction.AccountSigner.#ctor(NeoSharp.Wallet.Account,NeoSharp.Types.WitnessScope,NeoSharp.Types.Hash160[],NeoSharp.Crypto.ECPoint[])">
            <summary>
            Initializes a new AccountSigner with allowed groups
            </summary>
            <param name="account">The account to use for signing</param>
            <param name="scopes">The witness scopes</param>
            <param name="allowedContracts">The allowed contracts</param>
            <param name="allowedGroups">The allowed groups</param>
        </member>
        <member name="T:NeoSharp.Transaction.Transaction">
            <summary>
            Represents a Neo transaction.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Version">
            <summary>
            Gets or sets the transaction version.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Nonce">
            <summary>
            Gets or sets the nonce.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.SystemFee">
            <summary>
            Gets or sets the system fee.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.NetworkFee">
            <summary>
            Gets or sets the network fee.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.ValidUntilBlock">
            <summary>
            Gets or sets the valid until block.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Signers">
            <summary>
            Gets or sets the signers.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Script">
            <summary>
            Gets or sets the script.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Witnesses">
            <summary>
            Gets or sets the witnesses.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Hash">
            <summary>
            Gets the transaction hash.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Transaction.Size">
            <summary>
            Gets the size of the transaction.
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.#ctor">
            <summary>
            Initializes a new instance of the Transaction class.
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.SerializeUnsigned(NeoSharp.Serialization.BinaryWriter)">
            <summary>
            Serializes the transaction without witnesses.
            </summary>
            <param name="writer">The writer to serialize to.</param>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.Serialize(NeoSharp.Serialization.BinaryWriter)">
            <summary>
            Serializes the transaction.
            </summary>
            <param name="writer">The writer to serialize to.</param>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.Deserialize(NeoSharp.Serialization.BinaryReader)">
            <summary>
            Deserializes the transaction.
            </summary>
            <param name="reader">The reader to deserialize from.</param>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.DeserializeUnsigned(NeoSharp.Serialization.BinaryReader)">
            <summary>
            Deserializes the transaction without witnesses.
            </summary>
            <param name="reader">The reader to deserialize from.</param>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.GetHashData(System.UInt32)">
            <summary>
            Gets the hash data for signing.
            </summary>
            <param name="magic">The network magic number.</param>
            <returns>The hash data.</returns>
        </member>
        <member name="M:NeoSharp.Transaction.Transaction.Sign(NeoSharp.Wallet.Account,System.UInt32)">
            <summary>
            Signs the transaction with the given account.
            </summary>
            <param name="account">The account to sign with.</param>
            <param name="magic">The network magic number.</param>
        </member>
        <member name="T:NeoSharp.Transaction.TransactionAttribute">
            <summary>
            Represents a transaction attribute.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.TransactionAttribute.Type">
            <summary>
            Gets or sets the attribute type.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.TransactionAttribute.Data">
            <summary>
            Gets or sets the attribute data.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.TransactionAttribute.Size">
            <summary>
            Gets the size of the attribute.
            </summary>
        </member>
        <member name="T:NeoSharp.Transaction.TransactionAttributeType">
            <summary>
            Transaction attribute types.
            </summary>
        </member>
        <member name="F:NeoSharp.Transaction.TransactionAttributeType.HighPriority">
            <summary>
            High priority attribute.
            </summary>
        </member>
        <member name="F:NeoSharp.Transaction.TransactionAttributeType.OracleResponse">
            <summary>
            Oracle response attribute.
            </summary>
        </member>
        <member name="T:NeoSharp.Transaction.TransactionBuilder">
            <summary>
            Builder for Neo transactions
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.TransactionBuilder.#ctor(NeoSharp.Protocol.INeoSharp)">
            <summary>
            Initializes a new instance of the TransactionBuilder class
            </summary>
            <param name="neoSharp">The Neo client instance</param>
        </member>
        <member name="P:NeoSharp.Transaction.TransactionBuilder.Signers">
            <summary>
            Gets the signers for this transaction
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.TransactionBuilder.AddScript(System.Byte[])">
            <summary>
            Adds a script to the transaction
            </summary>
            <param name="script">The script bytes</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:NeoSharp.Transaction.TransactionBuilder.AddSigner(NeoSharp.Types.Signer)">
            <summary>
            Adds a signer to the transaction
            </summary>
            <param name="signer">The signer to add</param>
            <returns>This builder for chaining</returns>
        </member>
        <member name="M:NeoSharp.Transaction.TransactionBuilder.Build">
            <summary>
            Builds the transaction
            </summary>
            <returns>The transaction bytes</returns>
        </member>
        <member name="M:NeoSharp.Transaction.TransactionBuilder.Create(NeoSharp.Protocol.INeoSharp)">
            <summary>
            Creates a new transaction builder
            </summary>
            <param name="neoSharp">The Neo client instance</param>
            <returns>A new TransactionBuilder instance</returns>
        </member>
        <member name="T:NeoSharp.Transaction.Witness">
            <summary>
            Represents a witness in a transaction.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Witness.InvocationScript">
            <summary>
            Gets or sets the invocation script.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Witness.VerificationScript">
            <summary>
            Gets or sets the verification script.
            </summary>
        </member>
        <member name="P:NeoSharp.Transaction.Witness.Size">
            <summary>
            Gets the size of the witness.
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.Witness.#ctor">
            <summary>
            Initializes a new instance of the Witness class.
            </summary>
        </member>
        <member name="M:NeoSharp.Transaction.Witness.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the Witness class.
            </summary>
            <param name="invocationScript">The invocation script.</param>
            <param name="verificationScript">The verification script.</param>
        </member>
        <member name="T:NeoSharp.Types.ContractManifest">
            <summary>
            Represents a contract manifest
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Name">
            <summary>
            Gets or sets the contract name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Groups">
            <summary>
            Gets or sets the contract groups
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.SupportedStandards">
            <summary>
            Gets or sets the supported standards
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Abi">
            <summary>
            Gets or sets the contract ABI
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Permissions">
            <summary>
            Gets or sets the permissions
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Trusts">
            <summary>
            Gets or sets the trusted contracts
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractManifest.Extra">
            <summary>
            Gets or sets extra metadata
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractGroup">
            <summary>
            Represents a contract group
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractGroup.PublicKey">
            <summary>
            Gets or sets the public key
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractGroup.Signature">
            <summary>
            Gets or sets the signature
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractAbi">
            <summary>
            Represents a contract ABI
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractAbi.Methods">
            <summary>
            Gets or sets the methods
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractAbi.Events">
            <summary>
            Gets or sets the events
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractMethod">
            <summary>
            Represents a contract method
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethod.Name">
            <summary>
            Gets or sets the method name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethod.Parameters">
            <summary>
            Gets or sets the parameters
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethod.ReturnType">
            <summary>
            Gets or sets the return type
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethod.Offset">
            <summary>
            Gets or sets the offset
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethod.Safe">
            <summary>
            Gets or sets whether the method is safe
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractMethodParameter">
            <summary>
            Represents a contract method parameter
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethodParameter.Name">
            <summary>
            Gets or sets the parameter name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractMethodParameter.Type">
            <summary>
            Gets or sets the parameter type
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractEvent">
            <summary>
            Represents a contract event
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractEvent.Name">
            <summary>
            Gets or sets the event name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractEvent.Parameters">
            <summary>
            Gets or sets the parameters
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractPermission">
            <summary>
            Represents a contract permission
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractPermission.Contract">
            <summary>
            Gets or sets the contract hash or group
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractPermission.Methods">
            <summary>
            Gets or sets the allowed methods
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractParameter">
            <summary>
            Represents a contract parameter for smart contract invocations
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractParameter.Name">
            <summary>
            The parameter name (optional)
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractParameter.Type">
            <summary>
            The parameter type
            </summary>
        </member>
        <member name="P:NeoSharp.Types.ContractParameter.Value">
            <summary>
            The parameter value
            </summary>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.#ctor(System.String,NeoSharp.Types.ContractParameterType,System.Object)">
            <summary>
            Initializes a new contract parameter
            </summary>
            <param name="name">The parameter name</param>
            <param name="type">The parameter type</param>
            <param name="value">The parameter value</param>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.#ctor(NeoSharp.Types.ContractParameterType,System.Object)">
            <summary>
            Initializes a new contract parameter without a name
            </summary>
            <param name="type">The parameter type</param>
            <param name="value">The parameter value</param>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Any(System.Object)">
            <summary>
            Creates an Any parameter
            </summary>
            <param name="value">The value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.String(System.String)">
            <summary>
            Creates a String parameter
            </summary>
            <param name="value">The string value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.ByteArray(System.Byte[])">
            <summary>
            Creates a ByteArray parameter from bytes
            </summary>
            <param name="value">The byte array</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.ByteArray(System.String)">
            <summary>
            Creates a ByteArray parameter from hex string
            </summary>
            <param name="value">The hex string</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.ByteArrayFromString(System.String)">
            <summary>
            Creates a ByteArray parameter from UTF-8 string
            </summary>
            <param name="value">The string value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.FromObject(System.Object)">
            <summary>
            Creates a ContractParameter from an object value
            </summary>
            <param name="value">The object value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Signature(System.Byte[])">
            <summary>
            Creates a Signature parameter from bytes
            </summary>
            <param name="value">The signature bytes</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Signature(NeoSharp.Crypto.SignatureData)">
            <summary>
            Creates a Signature parameter from signature data
            </summary>
            <param name="value">The signature data</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Signature(System.String)">
            <summary>
            Creates a Signature parameter from hex string
            </summary>
            <param name="value">The hex string</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Boolean(System.Boolean)">
            <summary>
            Creates a Boolean parameter
            </summary>
            <param name="value">The boolean value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Integer(System.Int32)">
            <summary>
            Creates an Integer parameter from int
            </summary>
            <param name="value">The integer value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Integer(System.Byte)">
            <summary>
            Creates an Integer parameter from byte
            </summary>
            <param name="value">The byte value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Integer(System.Numerics.BigInteger)">
            <summary>
            Creates an Integer parameter from BigInteger
            </summary>
            <param name="value">The BigInteger value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Hash160(NeoSharp.Wallet.Account)">
            <summary>
            Creates a Hash160 parameter from account
            </summary>
            <param name="account">The account</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Hash160(NeoSharp.Types.Hash160)">
            <summary>
            Creates a Hash160 parameter from hash
            </summary>
            <param name="value">The Hash160 value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Hash256(NeoSharp.Types.Hash256)">
            <summary>
            Creates a Hash256 parameter from hash
            </summary>
            <param name="value">The Hash256 value</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Hash256(System.Byte[])">
            <summary>
            Creates a Hash256 parameter from bytes
            </summary>
            <param name="value">The hash bytes</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Hash256(System.String)">
            <summary>
            Creates a Hash256 parameter from hex string
            </summary>
            <param name="value">The hex string</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.PublicKey(System.Byte[])">
            <summary>
            Creates a PublicKey parameter from bytes
            </summary>
            <param name="value">The public key bytes</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.PublicKey(System.String)">
            <summary>
            Creates a PublicKey parameter from hex string
            </summary>
            <param name="value">The hex string</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.PublicKey(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates a PublicKey parameter from ECPublicKey
            </summary>
            <param name="value">The public key</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Array(System.Object[])">
            <summary>
            Creates an Array parameter
            </summary>
            <param name="values">The array elements</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Map(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Creates a Map parameter
            </summary>
            <param name="values">The map entries</param>
            <returns>A new contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.MapToContractParameter(System.Object)">
            <summary>
            Maps an object to the appropriate contract parameter type
            </summary>
            <param name="value">The object to map</param>
            <returns>The contract parameter</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Equals(NeoSharp.Types.ContractParameter)">
            <summary>
            Determines whether this parameter equals another
            </summary>
            <param name="other">The other parameter to compare</param>
            <returns>True if the parameters are equal</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.Equals(System.Object)">
            <summary>
            Determines whether this parameter equals another object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.GetHashCode">
            <summary>
            Gets the hash code for this parameter
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.ToString">
            <summary>
            Returns a string representation of this parameter
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameter.ToJson">
            <summary>
            Converts the contract parameter to JSON format for RPC calls.
            </summary>
            <returns>A dictionary representing the JSON format.</returns>
        </member>
        <member name="T:NeoSharp.Types.ContractParameterType">
            <summary>
            Represents the different types of contract parameters supported by Neo
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Any">
            <summary>
            Represents any type (null/void)
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Boolean">
            <summary>
            Boolean type
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Integer">
            <summary>
            Signed integer type
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.ByteArray">
            <summary>
            Byte array type
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.String">
            <summary>
            String type
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Hash160">
            <summary>
            160-bit hash type (typically for addresses/script hashes)
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Hash256">
            <summary>
            256-bit hash type (typically for transaction/block hashes)
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.PublicKey">
            <summary>
            Public key type (33 bytes compressed format)
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Signature">
            <summary>
            Digital signature type (64 bytes ECDSA signature)
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Array">
            <summary>
            Array type containing multiple parameters
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Map">
            <summary>
            Map/dictionary type with key-value pairs
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.InteropInterface">
            <summary>
            Interop interface type for complex objects
            </summary>
        </member>
        <member name="F:NeoSharp.Types.ContractParameterType.Void">
            <summary>
            Void type (no return value)
            </summary>
        </member>
        <member name="T:NeoSharp.Types.ContractParameterTypeExtensions">
            <summary>
            Extension methods for ContractParameterType
            </summary>
        </member>
        <member name="M:NeoSharp.Types.ContractParameterTypeExtensions.GetJsonValue(NeoSharp.Types.ContractParameterType)">
            <summary>
            Gets the JSON representation value for this parameter type
            </summary>
            <param name="type">The parameter type</param>
            <returns>The JSON string value</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameterTypeExtensions.FromJsonValue(System.String)">
            <summary>
            Parses a ContractParameterType from its JSON string value
            </summary>
            <param name="jsonValue">The JSON string value</param>
            <returns>The corresponding ContractParameterType</returns>
            <exception cref="T:System.ArgumentException">Thrown when the JSON value is not recognized</exception>
        </member>
        <member name="M:NeoSharp.Types.ContractParameterTypeExtensions.IsCollection(NeoSharp.Types.ContractParameterType)">
            <summary>
            Determines if this parameter type represents a collection
            </summary>
            <param name="type">The parameter type</param>
            <returns>True if the type is a collection (Array or Map)</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameterTypeExtensions.IsHash(NeoSharp.Types.ContractParameterType)">
            <summary>
            Determines if this parameter type represents a hash
            </summary>
            <param name="type">The parameter type</param>
            <returns>True if the type is a hash (Hash160 or Hash256)</returns>
        </member>
        <member name="M:NeoSharp.Types.ContractParameterTypeExtensions.IsBinaryData(NeoSharp.Types.ContractParameterType)">
            <summary>
            Determines if this parameter type represents binary data
            </summary>
            <param name="type">The parameter type</param>
            <returns>True if the type represents binary data</returns>
        </member>
        <member name="T:NeoSharp.Types.Hash160">
            <summary>
            A Hash160 is a 20 bytes long hash created from some data by first applying SHA-256 and then RIPEMD-160.
            These hashes are mostly used for obtaining the script hash of a smart contract or an account.
            </summary>
        </member>
        <member name="F:NeoSharp.Types.Hash160._hash">
            <summary>
            The hash is stored as a byte array in big-endian order.
            </summary>
        </member>
        <member name="F:NeoSharp.Types.Hash160.Zero">
            <summary>
            A zero-value hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash160.ToHex">
            <summary>
            The script hash as a hexadecimal string in big-endian order without the '0x' prefix.
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Hash160.Size">
            <summary>
            The size of a Hash160 in bytes.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash160.#ctor">
            <summary>
            Constructs a new hash with 20 zero bytes.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash160.#ctor(System.Byte[])">
            <summary>
            Constructs a new hash from the given byte array. The byte array must be in big-endian order and 160 bits long.
            </summary>
            <param name="hash">The hash in big-endian order</param>
            <exception cref="T:System.ArgumentException">Thrown if hash is not exactly 20 bytes</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash160.#ctor(System.String)">
            <summary>
            Constructs a new hash from the given hexadecimal string. The string must be in big-endian order and 160 bits long.
            </summary>
            <param name="hash">The hash in big-endian order as hex string</param>
            <exception cref="T:System.ArgumentException">Thrown if hash string is invalid</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash160.ToArray">
            <summary>
            Returns the script hash as a byte array in big-endian order.
            </summary>
            <returns>The hash as byte array</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.ToLittleEndianArray">
            <summary>
            Returns the script hash as a byte array in little-endian order.
            </summary>
            <returns>The hash as byte array in little-endian order</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.ToAddress">
            <summary>
            Returns the address corresponding to this script hash.
            </summary>
            <returns>The address string</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromAddress(System.String)">
            <summary>
            Creates a script hash from the given address.
            </summary>
            <param name="address">The address from which to derive the script hash</param>
            <returns>The script hash</returns>
            <exception cref="T:System.ArgumentException">Thrown if address is invalid</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash160.Parse(System.String)">
            <summary>
            Parses a Hash160 from a hexadecimal string.
            </summary>
            <param name="hex">The hexadecimal string</param>
            <returns>The parsed Hash160</returns>
            <exception cref="T:System.ArgumentException">Thrown if hex string is invalid</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromScript(System.Byte[])">
            <summary>
            Creates a script hash from the given script in byte array form.
            </summary>
            <param name="script">The script to calculate the script hash for</param>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromScript(System.String)">
            <summary>
            Creates a script hash from the given script in hexadecimal string form.
            </summary>
            <param name="script">The script to calculate the script hash for</param>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromPublicKey(System.Byte[])">
            <summary>
            Creates a script hash from the given public key.
            </summary>
            <param name="encodedPublicKey">The encoded public key</param>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromPublicKeys(NeoSharp.Crypto.ECPublicKey[],System.Int32)">
            <summary>
            Creates a script hash from the given public keys for multi-sig.
            </summary>
            <param name="publicKeys">The public keys</param>
            <param name="signingThreshold">The signing threshold</param>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.FromLittleEndianBytes(System.Byte[])">
            <summary>
            Creates a Hash160 from little-endian byte array.
            </summary>
            <param name="littleEndianBytes">The bytes in little-endian order</param>
            <returns>The hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash160.Serialize(NeoSharp.Serialization.BinaryWriter)">
            <summary>
            Serializes this hash to the given writer.
            </summary>
            <param name="writer">The binary writer</param>
        </member>
        <member name="M:NeoSharp.Types.Hash160.Deserialize(NeoSharp.Serialization.BinaryReader)">
            <summary>
            Deserializes a hash from the given reader.
            </summary>
            <param name="reader">The binary reader</param>
        </member>
        <member name="T:NeoSharp.Types.Hash256">
            <summary>
            A Hash256 is a 32 bytes long hash created from some data by applying SHA-256.
            These hashes are typically used for block hashes, transaction hashes, and Merkle tree nodes.
            </summary>
        </member>
        <member name="F:NeoSharp.Types.Hash256._hash">
            <summary>
            The hash is stored as a byte array in big-endian order.
            </summary>
        </member>
        <member name="F:NeoSharp.Types.Hash256.Zero">
            <summary>
            A zero-value hash.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash256.ToHex">
            <summary>
            The hash as a hexadecimal string in big-endian order without the '0x' prefix.
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Hash256.Size">
            <summary>
            The size of a Hash256 in bytes.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash256.#ctor">
            <summary>
            Constructs a new hash with 32 zero bytes.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Hash256.#ctor(System.Byte[])">
            <summary>
            Constructs a new hash from the given byte array. The byte array must be in big-endian order and 256 bits long.
            </summary>
            <param name="hash">The hash in big-endian order</param>
            <exception cref="T:System.ArgumentException">Thrown if hash is not exactly 32 bytes</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash256.#ctor(System.String)">
            <summary>
            Constructs a new hash from the given hexadecimal string. The string must be in big-endian order and 256 bits long.
            </summary>
            <param name="hash">The hash in big-endian order as hex string</param>
            <exception cref="T:System.ArgumentException">Thrown if hash string is invalid</exception>
        </member>
        <member name="M:NeoSharp.Types.Hash256.ToArray">
            <summary>
            Returns the hash as a byte array in big-endian order.
            </summary>
            <returns>The hash as byte array</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash256.ToLittleEndianArray">
            <summary>
            Returns the hash as a byte array in little-endian order.
            </summary>
            <returns>The hash as byte array in little-endian order</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash256.Parse(System.String)">
            <summary>
            Parses a Hash256 from a hexadecimal string
            </summary>
            <param name="hex">The hexadecimal string</param>
            <returns>The parsed Hash256</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash256.FromData(System.Byte[])">
            <summary>
            Creates a hash from the given data by applying SHA-256.
            </summary>
            <param name="data">The data to hash</param>
            <returns>The hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash256.FromLittleEndianBytes(System.Byte[])">
            <summary>
            Creates a Hash256 from little-endian byte array.
            </summary>
            <param name="littleEndianBytes">The bytes in little-endian order</param>
            <returns>The hash</returns>
        </member>
        <member name="M:NeoSharp.Types.Hash256.Serialize(NeoSharp.Serialization.BinaryWriter)">
            <summary>
            Serializes this hash to the given writer.
            </summary>
            <param name="writer">The binary writer</param>
        </member>
        <member name="M:NeoSharp.Types.Hash256.Deserialize(NeoSharp.Serialization.BinaryReader)">
            <summary>
            Deserializes a hash from the given reader.
            </summary>
            <param name="reader">The binary reader</param>
            <returns>The deserialized hash</returns>
        </member>
        <member name="T:NeoSharp.Types.InteropService">
            <summary>
            Neo interop service identifiers
            </summary>
        </member>
        <member name="T:NeoSharp.Types.InteropService.System">
            <summary>
            System calls
            </summary>
        </member>
        <member name="T:NeoSharp.Types.InteropService.Crypto">
            <summary>
            Crypto calls
            </summary>
        </member>
        <member name="T:NeoSharp.Types.InteropService.Contract">
            <summary>
            Contract calls
            </summary>
        </member>
        <member name="T:NeoSharp.Types.Iterator`1">
            <summary>
            Represents a Neo iterator
            </summary>
            <typeparam name="T">The element type</typeparam>
        </member>
        <member name="M:NeoSharp.Types.Iterator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new iterator with static items
            </summary>
            <param name="items">The items to iterate over</param>
        </member>
        <member name="M:NeoSharp.Types.Iterator`1.#ctor(NeoSharp.Protocol.INeoSharp,System.String,System.String,System.Func{NeoSharp.Protocol.Core.Response.StackItem,`0})">
            <summary>
            Initializes a new iterator for RPC session-based iteration
            </summary>
            <param name="neoSharp">The Neo client instance</param>
            <param name="sessionId">The session ID</param>
            <param name="iteratorId">The iterator ID</param>
            <param name="mapper">The function to map stack items to T</param>
        </member>
        <member name="M:NeoSharp.Types.Iterator`1.TraverseAsync(System.Int32)">
            <summary>
            Traverses the iterator asynchronously (for RPC-based iterators)
            </summary>
            <param name="maxItems">Maximum number of items to retrieve</param>
            <returns>The list of mapped items</returns>
        </member>
        <member name="M:NeoSharp.Types.Iterator`1.TerminateSessionAsync">
            <summary>
            Terminates the session asynchronously (for RPC-based iterators)
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Iterator`1.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="T:NeoSharp.Types.NnsName">
            <summary>
            Represents a Neo Name Service (NNS) name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.NnsName.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:NeoSharp.Types.NnsName.Value">
            <summary>
            Gets the name value (alias for Name)
            </summary>
        </member>
        <member name="M:NeoSharp.Types.NnsName.#ctor(System.String)">
            <summary>
            Initializes a new NNS name
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:NeoSharp.Types.NnsName.ToString">
            <summary>
            Converts the NNS name to string
            </summary>
            <returns>The name string</returns>
        </member>
        <member name="M:NeoSharp.Types.NnsName.op_Implicit(System.String)~NeoSharp.Types.NnsName">
            <summary>
            Implicit conversion from string
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:NeoSharp.Types.NnsName.op_Implicit(NeoSharp.Types.NnsName)~System.String">
            <summary>
            Implicit conversion to string
            </summary>
            <param name="nnsName">The NNS name</param>
        </member>
        <member name="T:NeoSharp.Types.Signer">
            <summary>
            Represents a transaction signer
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Signer.#ctor">
            <summary>
            Initializes a new instance of the Signer class
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Signer.#ctor(NeoSharp.Types.Hash160,NeoSharp.Types.WitnessScope)">
            <summary>
            Initializes a new instance of the Signer class
            </summary>
            <param name="account">The signer account hash</param>
            <param name="scopes">The witness scopes</param>
        </member>
        <member name="M:NeoSharp.Types.Signer.#ctor(NeoSharp.Types.Hash160,NeoSharp.Types.WitnessScope,NeoSharp.Types.Hash160[])">
            <summary>
            Initializes a new instance of the Signer class with allowed contracts
            </summary>
            <param name="account">The signer account hash</param>
            <param name="scopes">The witness scopes</param>
            <param name="allowedContracts">The allowed contracts</param>
        </member>
        <member name="M:NeoSharp.Types.Signer.#ctor(NeoSharp.Types.Hash160,NeoSharp.Types.WitnessScope,NeoSharp.Types.Hash160[],NeoSharp.Crypto.ECPoint[])">
            <summary>
            Initializes a new instance of the Signer class with allowed contracts and groups
            </summary>
            <param name="account">The signer account hash</param>
            <param name="scopes">The witness scopes</param>
            <param name="allowedContracts">The allowed contracts</param>
            <param name="allowedGroups">The allowed groups</param>
        </member>
        <member name="P:NeoSharp.Types.Signer.Account">
            <summary>
            Gets or sets the signer account
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Signer.Scopes">
            <summary>
            Gets or sets the witness scopes
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Signer.AllowedContracts">
            <summary>
            Gets or sets the allowed contracts
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Signer.AllowedGroups">
            <summary>
            Gets or sets the allowed groups
            </summary>
        </member>
        <member name="P:NeoSharp.Types.Signer.Size">
            <summary>
            Gets the size of the signer.
            </summary>
        </member>
        <member name="M:NeoSharp.Types.Signer.ToJson">
            <summary>
            Converts the signer to JSON format for RPC calls.
            </summary>
            <returns>A dictionary representing the JSON format.</returns>
        </member>
        <member name="T:NeoSharp.Types.WitnessScope">
            <summary>
            Witness scope enumeration
            </summary>
        </member>
        <member name="T:NeoSharp.Utils.AddressExtensions">
            <summary>
            Extension methods for address conversions
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.AddressExtensions.ScriptHashToAddress(System.Byte[])">
            <summary>
            Converts script hash to Neo address
            </summary>
            <param name="scriptHash">The script hash bytes</param>
            <returns>The Neo address</returns>
        </member>
        <member name="M:NeoSharp.Utils.AddressExtensions.AddressToScriptHash(System.String)">
            <summary>
            Converts Neo address to script hash
            </summary>
            <param name="address">The Neo address</param>
            <returns>The script hash bytes</returns>
        </member>
        <member name="M:NeoSharp.Utils.AddressExtensions.ToScriptHash(System.String)">
            <summary>
            Converts Neo address to script hash (alias for AddressToScriptHash)
            </summary>
            <param name="address">The Neo address</param>
            <returns>The script hash as Hash160</returns>
        </member>
        <member name="T:NeoSharp.Utils.Base58">
            <summary>
            Base58 encoding/decoding implementation.
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.Base58.Encode(System.Byte[])">
            <summary>
            Encodes a byte array to Base58 string.
            </summary>
            <param name="data">The data to encode.</param>
            <returns>The Base58 encoded string.</returns>
        </member>
        <member name="M:NeoSharp.Utils.Base58.Decode(System.String)">
            <summary>
            Decodes a Base58 string to byte array.
            </summary>
            <param name="encoded">The Base58 encoded string.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:NeoSharp.Utils.Base58.IsValid(System.String)">
            <summary>
            Checks if a string is valid Base58.
            </summary>
            <param name="encoded">The string to check.</param>
            <returns>True if valid Base58, false otherwise.</returns>
        </member>
        <member name="T:NeoSharp.Utils.ByteArrayComparer">
            <summary>
            Comparer for byte arrays
            </summary>
        </member>
        <member name="F:NeoSharp.Utils.ByteArrayComparer.Default">
            <summary>
            Default instance of ByteArrayComparer
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayComparer.Compare(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays lexicographically
            </summary>
            <param name="x">First byte array</param>
            <param name="y">Second byte array</param>
            <returns>Comparison result</returns>
        </member>
        <member name="T:NeoSharp.Utils.ByteArrayExtensions">
            <summary>
            Extension methods for byte array operations.
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.SHA256(System.Byte[])">
            <summary>
            Computes SHA256 hash of the byte array.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The SHA256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.RIPEMD160(System.Byte[])">
            <summary>
            Computes RIPEMD160 hash of the byte array.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The RIPEMD160 hash.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Hash160(System.Byte[])">
            <summary>
            Computes Hash160 (RIPEMD160(SHA256)) of the byte array.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Hash160 hash.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Hash256(System.Byte[])">
            <summary>
            Computes Hash256 (double SHA256) of the byte array.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The Hash256 hash.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Concat(System.Byte[],System.Byte[])">
            <summary>
            Concatenates two byte arrays.
            </summary>
            <param name="first">The first array.</param>
            <param name="second">The second array.</param>
            <returns>The concatenated array.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Take(System.Byte[],System.Int32)">
            <summary>
            Takes a specified number of bytes from the beginning of the array.
            </summary>
            <param name="array">The source array.</param>
            <param name="count">The number of bytes to take.</param>
            <returns>The taken bytes.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Skip(System.Byte[],System.Int32)">
            <summary>
            Skips a specified number of bytes from the beginning of the array.
            </summary>
            <param name="array">The source array.</param>
            <param name="count">The number of bytes to skip.</param>
            <returns>The remaining bytes.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.Reverse(System.Byte[])">
            <summary>
            Reverses the byte array.
            </summary>
            <param name="array">The array to reverse.</param>
            <returns>The reversed array.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.ToHex(System.Byte[])">
            <summary>
            Converts the byte array to a hex string.
            </summary>
            <param name="array">The byte array.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.ArrayEquals(System.Byte[],System.Byte[])">
            <summary>
            Checks if two byte arrays are equal.
            </summary>
            <param name="a">The first array.</param>
            <param name="b">The second array.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ByteArrayExtensions.GetBitLength(System.Byte[])">
            <summary>
            Gets the bit length of a byte array
            </summary>
            <param name="bytes">The byte array</param>
            <returns>The bit length</returns>
        </member>
        <member name="T:NeoSharp.Utils.ExtensionMethods">
            <summary>
            Extension methods for various types
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.ToByteArray(System.String)">
            <summary>
            Converts a hex string to byte array
            </summary>
            <param name="hex">The hex string</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.ToScriptHash(System.Byte[])">
            <summary>
            Converts a byte array to script hash
            </summary>
            <param name="script">The script byte array</param>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.ToDecimal(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Converts a BigInteger to decimal representation
            </summary>
            <param name="value">The BigInteger value</param>
            <param name="decimals">Number of decimal places</param>
            <returns>The decimal value</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.ToDecimal(System.Int64,System.Int32)">
            <summary>
            Converts a long to decimal representation
            </summary>
            <param name="value">The long value</param>
            <param name="decimals">Number of decimal places</param>
            <returns>The decimal value</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.ToHexStringWithPrefix(System.Byte[])">
            <summary>
            Converts bytes to hexadecimal string with 0x prefix
            </summary>
            <param name="bytes">The byte array</param>
            <returns>The hex string with 0x prefix</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.IsValidHex(System.String)">
            <summary>
            Checks if a string is valid hexadecimal
            </summary>
            <param name="str">The string to check</param>
            <returns>True if valid hex</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.FromHexString(System.String)">
            <summary>
            Converts hex string to byte array
            </summary>
            <param name="hex">The hex string</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.Base64Encode(System.Byte[])">
            <summary>
            Encodes bytes to Base64
            </summary>
            <param name="bytes">The byte array</param>
            <returns>The Base64 string</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.Base64Decode(System.String)">
            <summary>
            Decodes Base64 string to bytes
            </summary>
            <param name="base64">The Base64 string</param>
            <returns>The byte array</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.GetSequenceHashCode(System.Byte[])">
            <summary>
            Gets sequence hash code for byte arrays
            </summary>
            <param name="bytes">The byte array</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:NeoSharp.Utils.ExtensionMethods.GetSequenceHashCode``1(``0[])">
            <summary>
            Gets sequence hash code for arrays
            </summary>
            <typeparam name="T">The element type</typeparam>
            <param name="items">The array</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:NeoSharp.Utils.HexExtensions">
            <summary>
            Extension methods for hex string operations.
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.HexToBytes(System.String)">
            <summary>
            Converts a hex string to byte array.
            </summary>
            <param name="hex">The hex string.</param>
            <returns>The byte array.</returns>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to hex string.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.ToHexStringWithPrefix(System.Byte[])">
            <summary>
            Converts a byte array to hex string with 0x prefix.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The hex string with 0x prefix.</returns>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.IsHex(System.String)">
            <summary>
            Checks if a string is valid hex.
            </summary>
            <param name="hex">The string to check.</param>
            <returns>True if valid hex, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.CleanHexPrefix(System.String)">
            <summary>
            Removes the hex prefix from a string.
            </summary>
            <param name="hex">The hex string.</param>
            <returns>The hex string without prefix.</returns>
        </member>
        <member name="M:NeoSharp.Utils.HexExtensions.ReverseHex(System.String)">
            <summary>
            Reverses a hex string (useful for endianness conversion).
            </summary>
            <param name="hex">The hex string.</param>
            <returns>The reversed hex string.</returns>
        </member>
        <member name="T:NeoSharp.Utils.ScriptExtensions">
            <summary>
            Extension methods for script operations.
            </summary>
        </member>
        <member name="M:NeoSharp.Utils.ScriptExtensions.ToScriptHash(System.Byte[])">
            <summary>
            Converts a script to its script hash.
            </summary>
            <param name="script">The script bytes.</param>
            <returns>The script hash.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ScriptExtensions.IsStandardContract(System.Byte[])">
            <summary>
            Checks if a script is a standard verification script.
            </summary>
            <param name="script">The script bytes.</param>
            <returns>True if standard, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ScriptExtensions.GetPublicKeysFromScript(System.Byte[])">
            <summary>
            Gets the public keys from a multi-signature redeem script.
            </summary>
            <param name="script">The script bytes.</param>
            <returns>The public keys, or null if not a valid multi-sig script.</returns>
        </member>
        <member name="M:NeoSharp.Utils.ScriptExtensions.GetSignatureThresholdFromScript(System.Byte[])">
            <summary>
            Gets the signature threshold from a multi-signature redeem script.
            </summary>
            <param name="script">The script bytes.</param>
            <returns>The threshold, or 0 if not a valid multi-sig script.</returns>
        </member>
        <member name="T:NeoSharp.Utils.StringExtensions">
            <summary>
            Extension methods for string operations
            </summary>
        </member>
        <member name="T:NeoSharp.Wallet.Account">
            <summary>
            Represents a Neo account.
            An account can be a single-signature or multi-signature account.
            The latter does not contain EC key material because it is based on multiple EC key pairs.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.KeyPair">
            <summary>
            This account's EC key pair if available. Null if the key pair is not available, e.g., the account was encrypted.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.Address">
            <summary>
            Gets the account address
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.Label">
            <summary>
            Gets or sets the account label
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.VerificationScript">
            <summary>
            Gets the verification script
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.IsLocked">
            <summary>
            Gets whether the account is locked
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.EncryptedPrivateKey">
            <summary>
            Gets the encrypted private key
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.Wallet">
            <summary>
            Gets or sets the wallet this account belongs to
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.SigningThreshold">
            <summary>
            The signing threshold (null if the account is single-sig)
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.NumberOfParticipants">
            <summary>
            The number of involved keys (null if the account is single-sig)
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.ScriptHash">
            <summary>
            Gets the script hash for this account
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.IsDefault">
            <summary>
            Whether the account is default in the wallet
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.IsMultiSig">
            <summary>
            True if this account is a multi-sig account. Otherwise false.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Account.HasPrivateKey">
            <summary>
            Gets whether this account has a private key
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.Account.#ctor(NeoSharp.Crypto.ECKeyPair,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new account with the given EC key pair
            </summary>
            <param name="keyPair">The key pair of the account</param>
            <param name="signingThreshold">The signing threshold (null if the account is single-sig)</param>
            <param name="numberOfParticipants">The number of involved keys (null if the account is single-sig)</param>
        </member>
        <member name="M:NeoSharp.Wallet.Account.#ctor(System.String,System.String,NeoSharp.Wallet.VerificationScript,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructs a new account with address and optional verification script
            </summary>
            <param name="address">The account address</param>
            <param name="label">The account label</param>
            <param name="verificationScript">The verification script (optional)</param>
            <param name="signingThreshold">The signing threshold (null if single-sig)</param>
            <param name="numberOfParticipants">The number of participants (null if single-sig)</param>
        </member>
        <member name="M:NeoSharp.Wallet.Account.#ctor(NeoSharp.Crypto.ECKeyPair,System.String,System.String,NeoSharp.Wallet.VerificationScript,System.Boolean,System.String,NeoSharp.Wallet.Wallet,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Internal constructor for full account state
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.Account.SetLabel(System.String)">
            <summary>
            Sets the label for this account
            </summary>
            <param name="label">The new label</param>
            <returns>This account (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.SetWallet(NeoSharp.Wallet.Wallet)">
            <summary>
            Sets the wallet for this account
            </summary>
            <param name="wallet">The wallet</param>
            <returns>This account (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.Lock">
            <summary>
            Locks this account
            </summary>
            <returns>This account (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.Unlock">
            <summary>
            Unlocks this account
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.Account.DecryptPrivateKey(System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Decrypts this account's private key according to the NEP-2 standard if not already decrypted
            </summary>
            <param name="password">The passphrase used to decrypt this account's private key</param>
            <param name="scryptParams">The Scrypt parameters used for decryption (defaults to standard params)</param>
        </member>
        <member name="M:NeoSharp.Wallet.Account.EncryptPrivateKey(System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Encrypts this account's private key according to the NEP-2 standard
            </summary>
            <param name="password">The passphrase used to encrypt this account's private key</param>
            <param name="scryptParams">The Scrypt parameters used for encryption (defaults to standard params)</param>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetScriptHash">
            <summary>
            Gets the script hash for this account
            </summary>
            <returns>The script hash</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetSigningThreshold">
            <summary>
            Gets the signing threshold for multi-sig accounts
            </summary>
            <returns>The signing threshold</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if account is not multi-sig</exception>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetNumberOfParticipants">
            <summary>
            Gets the number of participants for multi-sig accounts
            </summary>
            <returns>The number of participants</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if account is not multi-sig</exception>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetNep17BalancesAsync(NeoSharp.Protocol.INeoSharp)">
            <summary>
            Gets the balances of all NEP-17 tokens that this account owns
            </summary>
            <param name="neoSharp">The NeoSharp object used to call the neo node</param>
            <returns>The map of token script hashes to token amounts</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.ToNEP6Account">
            <summary>
            Converts this account to a NEP-6 account format
            </summary>
            <returns>The NEP-6 account</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if private key is available but not encrypted</exception>
        </member>
        <member name="M:NeoSharp.Wallet.Account.Sign(System.Byte[])">
            <summary>
            Signs data with this account's private key
            </summary>
            <param name="data">The data to sign</param>
            <returns>The signature</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no private key is available</exception>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetPublicKey">
            <summary>
            Gets the public key of this account
            </summary>
            <returns>The public key</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.SignData(System.Byte[])">
            <summary>
            Signs data with the account's private key (alias for Sign)
            </summary>
            <param name="data">The data to sign</param>
            <returns>The signature</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.GetVerificationScript">
            <summary>
            Gets the verification script for this account
            </summary>
            <returns>The verification script bytes</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromVerificationScript(NeoSharp.Wallet.VerificationScript)">
            <summary>
            Creates an account from the given verification script
            </summary>
            <param name="script">The verification script</param>
            <returns>The account with a verification script</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromPublicKey(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Creates an account from the given public key
            </summary>
            <param name="publicKey">The public key</param>
            <returns>The account with a verification script</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.CreateMultiSigAccount(NeoSharp.Crypto.ECPublicKey[],System.Int32)">
            <summary>
            Creates a multi-sig account from the given public keys
            </summary>
            <param name="publicKeys">The public keys</param>
            <param name="signingThreshold">The number of signatures needed</param>
            <returns>The multi-sig account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.CreateMultiSigAccount(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a multi-sig account with the given address
            </summary>
            <param name="address">The address of the multi-sig account</param>
            <param name="signingThreshold">The number of signatures needed</param>
            <param name="numberOfParticipants">The number of participating accounts</param>
            <returns>The multi-sig account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromWIF(System.String)">
            <summary>
            Creates an account from the given WIF
            </summary>
            <param name="wif">The WIF of the account</param>
            <returns>The account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromNEP6Account(NeoSharp.Wallet.NEP6.NEP6Account)">
            <summary>
            Creates an account from the provided NEP-6 account
            </summary>
            <param name="nep6Account">The account in NEP-6 format</param>
            <returns>The account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromAddress(System.String)">
            <summary>
            Creates an account from the given address
            </summary>
            <param name="address">The address of the account</param>
            <returns>The account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.FromScriptHash(NeoSharp.Types.Hash160)">
            <summary>
            Creates an account from the given script hash
            </summary>
            <param name="scriptHash">The script hash of the account</param>
            <returns>The account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.Create">
            <summary>
            Creates a new account with a fresh key pair
            </summary>
            <returns>The new account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.IsValidAddress(System.String)">
            <summary>
            Validates if an address is valid
            </summary>
            <param name="address">The address to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Account.Dispose">
            <summary>
            Disposes the account and clears sensitive data
            </summary>
        </member>
        <member name="T:NeoSharp.Wallet.VerificationScript">
            <summary>
            Represents a verification script for an account
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.VerificationScript.Script">
            <summary>
            Gets the script bytes
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.#ctor(System.Byte[])">
            <summary>
            Initializes a new verification script from bytes
            </summary>
            <param name="script">The script bytes</param>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.#ctor(NeoSharp.Crypto.ECPublicKey)">
            <summary>
            Initializes a new verification script from a public key
            </summary>
            <param name="publicKey">The public key</param>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.CreateMultiSigScript(NeoSharp.Crypto.ECPublicKey[],System.Int32)">
            <summary>
            Creates a multi-sig verification script
            </summary>
            <param name="publicKeys">The public keys</param>
            <param name="signingThreshold">The signing threshold</param>
            <returns>The verification script</returns>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.IsMultiSigScript">
            <summary>
            Checks if this is a multi-sig script
            </summary>
            <returns>True if multi-sig, false otherwise</returns>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.IsSingleSigScript">
            <summary>
            Checks if this is a single-sig script
            </summary>
            <returns>True if single-sig, false otherwise</returns>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.GetSigningThreshold">
            <summary>
            Gets the signing threshold for multi-sig scripts
            </summary>
            <returns>The signing threshold</returns>
        </member>
        <member name="M:NeoSharp.Wallet.VerificationScript.GetNumberOfAccounts">
            <summary>
            Gets the number of accounts in the script
            </summary>
            <returns>The number of accounts</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP2">
            <summary>
            NEP-2 private key encryption implementation.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.Encrypt(NeoSharp.Crypto.ECKeyPair,System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Encrypts the private key of the given EC key pair following the NEP-2 standard.
            </summary>
            <param name="keyPair">The ECKeyPair to be encrypted</param>
            <param name="password">The password used to encrypt</param>
            <param name="scryptParams">The scrypt parameters used for encryption</param>
            <returns>The NEP-2 encrypted private key string</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.Encrypt(System.Byte[],System.String,NeoSharp.Wallet.NEP6.ScryptParams,System.String)">
            <summary>
            Encrypts a private key using NEP-2 format.
            </summary>
            <param name="privateKey">The private key bytes.</param>
            <param name="password">The password.</param>
            <param name="scryptParams">The scrypt parameters.</param>
            <param name="address">The address for verification (optional, will be calculated if not provided)</param>
            <returns>The NEP-2 encrypted private key string.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.Decrypt(System.String,System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Decrypts the given encrypted private key in NEP-2 format with the given password.
            </summary>
            <param name="nep2Key">The NEP-2 encrypted private key</param>
            <param name="password">The passphrase used for decryption</param>
            <param name="scryptParams">The scrypt parameters used for encryption</param>
            <returns>An EC key pair constructed from the decrypted private key</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.DecryptToBytes(System.String,System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Decrypts a NEP-2 encrypted private key to raw bytes.
            </summary>
            <param name="nep2Key">The NEP-2 encrypted key string.</param>
            <param name="password">The password.</param>
            <param name="scryptParams">The scrypt parameters.</param>
            <returns>The decrypted private key bytes.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.IsNEP2(System.String)">
            <summary>
            Verifies if a string is a valid NEP-2 encrypted key.
            </summary>
            <param name="nep2Key">The key to verify.</param>
            <returns>True if valid NEP-2 format, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.Encrypt(NeoSharp.Crypto.ECKeyPair,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encrypts the private key of the given EC key pair with custom scrypt parameters.
            </summary>
            <param name="keyPair">The ECKeyPair to be encrypted</param>
            <param name="password">The password used to encrypt</param>
            <param name="n">The N parameter for scrypt</param>
            <param name="r">The R parameter for scrypt</param>
            <param name="p">The P parameter for scrypt</param>
            <returns>The NEP-2 encrypted private key string</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.GetAddressHash(System.String)">
            <summary>
            Gets the address hash for a given address (first 4 bytes of double SHA256)
            </summary>
            <param name="address">The address</param>
            <returns>The address hash (4 bytes)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.XorPrivateKeyAndDerivedHalf(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            XORs private key bytes with derived key half for specified range
            </summary>
            <param name="privateKey">The private key bytes</param>
            <param name="derivedHalf">The derived key half</param>
            <param name="start">Start index</param>
            <param name="length">Length to XOR</param>
            <returns>XORed bytes</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP2.PerformAesCipher(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Performs AES encryption/decryption using ECB mode
            </summary>
            <param name="data">The data to encrypt/decrypt</param>
            <param name="key">The AES key</param>
            <param name="decrypt">True for decryption, false for encryption</param>
            <returns>The result bytes</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP6.NEP6Account">
            <summary>
            Represents a NEP-6 standard account.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Address">
            <summary>
            Gets or sets the account address.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Label">
            <summary>
            Gets or sets the account label.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.IsDefault">
            <summary>
            Gets or sets whether this is the default account.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Lock">
            <summary>
            Gets or sets whether the account is locked.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Key">
            <summary>
            Gets or sets the encrypted private key (NEP-2 format).
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Contract">
            <summary>
            Gets or sets the contract.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Account.Extra">
            <summary>
            Gets or sets extra data.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.#ctor">
            <summary>
            Initializes a new instance of the NEP6Account class.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.#ctor(System.String,System.String,NeoSharp.Wallet.NEP6.NEP6Contract)">
            <summary>
            Initializes a new instance of the NEP6Account class.
            </summary>
            <param name="address">The account address.</param>
            <param name="key">The encrypted private key.</param>
            <param name="contract">The contract.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.Copy">
            <summary>
            Creates a copy of this account.
            </summary>
            <returns>A copy of the account.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.IsValid">
            <summary>
            Validates the account data.
            </summary>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.UpdateLabel(System.String)">
            <summary>
            Updates the label of the account.
            </summary>
            <param name="newLabel">The new label.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.SetLock(System.Boolean)">
            <summary>
            Locks or unlocks the account.
            </summary>
            <param name="locked">True to lock, false to unlock.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.CanSign">
            <summary>
            Checks if this account can sign transactions.
            </summary>
            <returns>True if the account can sign, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.ToString">
            <summary>
            Gets a string representation of the account.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Account.GetHashCode">
            <summary>
            Gets the hash code for this account.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP6.NEP6Contract">
            <summary>
            Represents a NEP-6 standard contract.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Contract.Script">
            <summary>
            Gets or sets the contract script.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Contract.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Contract.Deployed">
            <summary>
            Gets or sets whether the contract is deployed.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.#ctor">
            <summary>
            Initializes a new instance of the NEP6Contract class.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.#ctor(System.String,System.Collections.Generic.List{NeoSharp.Wallet.NEP6.NEP6Parameter},System.Boolean)">
            <summary>
            Initializes a new instance of the NEP6Contract class.
            </summary>
            <param name="script">The contract script.</param>
            <param name="parameters">The parameters.</param>
            <param name="deployed">Whether the contract is deployed.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.CreateSingleSigContract(NeoSharp.Crypto.ECPoint)">
            <summary>
            Creates a single-signature contract.
            </summary>
            <param name="publicKey">The public key.</param>
            <returns>The NEP6 contract.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.CreateMultiSigContract(System.Int32,System.Collections.Generic.List{NeoSharp.Crypto.ECPoint})">
            <summary>
            Creates a multi-signature contract.
            </summary>
            <param name="m">The minimum number of signatures required.</param>
            <param name="publicKeys">The public keys.</param>
            <returns>The NEP6 contract.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.Copy">
            <summary>
            Creates a copy of this contract.
            </summary>
            <returns>A copy of the contract.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.GetScriptHash">
            <summary>
            Gets the script hash of this contract.
            </summary>
            <returns>The script hash.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.GetAddress">
            <summary>
            Gets the address of this contract.
            </summary>
            <returns>The contract address.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.IsValid">
            <summary>
            Validates the contract data.
            </summary>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.IsStandard">
            <summary>
            Checks if this is a standard contract.
            </summary>
            <returns>True if standard, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.GetRequiredSignatureCount">
            <summary>
            Gets the required signature count for this contract.
            </summary>
            <returns>The number of signatures required.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Contract.GetHashCode">
            <summary>
            Gets the hash code for this contract.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP6.NEP6Parameter">
            <summary>
            Represents a parameter in a NEP-6 contract.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Parameter.Name">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Parameter.Type">
            <summary>
            Gets or sets the parameter type.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Parameter.#ctor">
            <summary>
            Initializes a new instance of the NEP6Parameter class.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Parameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NEP6Parameter class.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="type">The parameter type.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Parameter.Copy">
            <summary>
            Creates a copy of this parameter.
            </summary>
            <returns>A copy of the parameter.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Parameter.IsValid">
            <summary>
            Validates the parameter data.
            </summary>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP6.NEP6Wallet">
            <summary>
            Represents a NEP-6 standard wallet.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Wallet.Name">
            <summary>
            Gets or sets the wallet name.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Wallet.Version">
            <summary>
            Gets or sets the wallet version.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Wallet.Scrypt">
            <summary>
            Gets or sets the scrypt parameters.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Wallet.Accounts">
            <summary>
            Gets or sets the accounts.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.NEP6Wallet.Extra">
            <summary>
            Gets or sets extra data.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.#ctor">
            <summary>
            Initializes a new instance of the NEP6Wallet class.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.#ctor(System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Initializes a new instance of the NEP6Wallet class.
            </summary>
            <param name="name">The wallet name.</param>
            <param name="scrypt">The scrypt parameters.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.CreateAccount(System.String)">
            <summary>
            Creates a new account in the wallet.
            </summary>
            <param name="password">The password to encrypt the private key.</param>
            <returns>The created account.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.ImportAccount(System.String,System.String)">
            <summary>
            Imports an account from a WIF private key.
            </summary>
            <param name="wif">The WIF private key.</param>
            <param name="password">The password to encrypt the private key.</param>
            <returns>The imported account.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.GetAccount(System.String)">
            <summary>
            Gets an account by address.
            </summary>
            <param name="address">The account address.</param>
            <returns>The account or null if not found.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.RemoveAccount(System.String)">
            <summary>
            Removes an account by address.
            </summary>
            <param name="address">The account address.</param>
            <returns>True if the account was removed, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.GetDefaultAccount">
            <summary>
            Gets the default account.
            </summary>
            <returns>The default account or null if no default account.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.SetDefaultAccount(System.String)">
            <summary>
            Sets the default account.
            </summary>
            <param name="address">The address of the account to make default.</param>
            <returns>True if successful, false if account not found.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.DecryptAccount(System.String,System.String)">
            <summary>
            Decrypts an account's private key.
            </summary>
            <param name="address">The account address.</param>
            <param name="password">The password to decrypt with.</param>
            <returns>The account or null if decryption fails.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.Save(System.String)">
            <summary>
            Saves the wallet to a file.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.Load(System.String)">
            <summary>
            Loads a wallet from a file.
            </summary>
            <param name="path">The file path.</param>
            <returns>The loaded wallet.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.NEP6Wallet.Create(System.String,System.String,System.String,NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Creates a new wallet and saves it to a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="name">The wallet name.</param>
            <param name="password">The password for the default account.</param>
            <param name="scrypt">The scrypt parameters.</param>
            <returns>The created wallet.</returns>
        </member>
        <member name="T:NeoSharp.Wallet.NEP6.ScryptParams">
            <summary>
            Represents Scrypt parameters for key derivation.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.N">
            <summary>
            Gets or sets the CPU/memory cost parameter.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.R">
            <summary>
            Gets or sets the block size parameter.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.P">
            <summary>
            Gets or sets the parallelization parameter.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.DkLen">
            <summary>
            Gets or sets the derived key length.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.Default">
            <summary>
            Gets the default Scrypt parameters for NEP-6.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.Light">
            <summary>
            Gets light Scrypt parameters for faster operations.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.NEP6.ScryptParams.Heavy">
            <summary>
            Gets heavy Scrypt parameters for enhanced security.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.#ctor">
            <summary>
            Initializes a new instance of the ScryptParams class.
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ScryptParams class.
            </summary>
            <param name="n">The CPU/memory cost parameter.</param>
            <param name="r">The block size parameter.</param>
            <param name="p">The parallelization parameter.</param>
            <param name="dkLen">The derived key length.</param>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.IsValid">
            <summary>
            Validates the Scrypt parameters.
            </summary>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.Copy">
            <summary>
            Creates a copy of these parameters.
            </summary>
            <returns>A copy of the parameters.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.EstimateMemoryUsage">
            <summary>
            Estimates the memory usage in bytes.
            </summary>
            <returns>The estimated memory usage.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.EstimateRelativeTime">
            <summary>
            Estimates the time complexity relative to default parameters.
            </summary>
            <returns>The relative time complexity.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.ToString">
            <summary>
            Gets a string representation of the parameters.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if equal, false otherwise.</returns>
        </member>
        <member name="M:NeoSharp.Wallet.NEP6.ScryptParams.GetHashCode">
            <summary>
            Gets the hash code for these parameters.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:NeoSharp.Wallet.Wallet">
            <summary>
            The wallet manages a collection of accounts.
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Wallet.Name">
            <summary>
            Gets or sets the wallet name
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Wallet.Version">
            <summary>
            Gets or sets the wallet version
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Wallet.ScryptParams">
            <summary>
            Gets or sets the scrypt parameters
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Wallet.Accounts">
            <summary>
            Gets the accounts in this wallet (sorted by script hash)
            </summary>
        </member>
        <member name="P:NeoSharp.Wallet.Wallet.DefaultAccount">
            <summary>
            Gets the default account of this wallet
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.#ctor">
            <summary>
            Initializes a new wallet with default settings
            </summary>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.#ctor(System.String)">
            <summary>
            Initializes a new wallet with specified name
            </summary>
            <param name="name">The wallet name</param>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SetDefaultAccount(NeoSharp.Wallet.Account)">
            <summary>
            Sets the given account to the default account of this wallet
            </summary>
            <param name="account">The new default account</param>
            <returns>The wallet (self)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SetDefaultAccount(NeoSharp.Types.Hash160)">
            <summary>
            Sets the account with the given script hash to the default account of this wallet
            </summary>
            <param name="accountHash">The new default account's script hash</param>
            <returns>The wallet (self)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.IsDefault(NeoSharp.Wallet.Account)">
            <summary>
            Checks whether an account is the default account in the wallet
            </summary>
            <param name="account">The account to be checked</param>
            <returns>Whether the given account is the default account in this wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.IsDefault(System.Nullable{NeoSharp.Types.Hash160})">
            <summary>
            Checks whether an account is the default account in the wallet
            </summary>
            <param name="accountHash">The account hash to be checked</param>
            <returns>Whether the given account is the default account in this wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SetName(System.String)">
            <summary>
            Sets the wallet name
            </summary>
            <param name="name">The name</param>
            <returns>This wallet (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SetVersion(System.String)">
            <summary>
            Sets the wallet version
            </summary>
            <param name="version">The version</param>
            <returns>This wallet (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SetScryptParams(NeoSharp.Wallet.NEP6.ScryptParams)">
            <summary>
            Sets the scrypt parameters
            </summary>
            <param name="scryptParams">The scrypt parameters</param>
            <returns>This wallet (for method chaining)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.AddAccounts(NeoSharp.Wallet.Account[])">
            <summary>
            Adds the given accounts to this wallet, if it doesn't contain an account with the same script hash
            </summary>
            <param name="accounts">The accounts to add</param>
            <returns>The wallet (self)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.AddAccounts(System.Collections.Generic.IEnumerable{NeoSharp.Wallet.Account})">
            <summary>
            Adds the given accounts to this wallet, if it doesn't contain an account with the same script hash
            </summary>
            <param name="accounts">The accounts to add</param>
            <returns>The wallet (self)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.RemoveAccount(NeoSharp.Wallet.Account)">
            <summary>
            Removes the account from this wallet
            </summary>
            <param name="account">The account to be removed</param>
            <returns>True if an account was removed, false if no account with the given address was found</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.RemoveAccount(NeoSharp.Types.Hash160)">
            <summary>
            Removes the account from this wallet
            </summary>
            <param name="accountHash">The Hash160 of the account to be removed</param>
            <returns>True if an account was removed, false if no account with the given address was found</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.DecryptAllAccounts(System.String)">
            <summary>
            Decrypts all accounts in the wallet
            </summary>
            <param name="password">The password to use for decryption</param>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.EncryptAllAccounts(System.String)">
            <summary>
            Encrypts all accounts in the wallet
            </summary>
            <param name="password">The password to use for encryption</param>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.ToNEP6Wallet">
            <summary>
            Converts this wallet to NEP-6 format
            </summary>
            <returns>The NEP-6 wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.GetAccount(NeoSharp.Types.Hash160)">
            <summary>
            Gets an account by script hash
            </summary>
            <param name="accountHash">The script hash</param>
            <returns>The account or null if not found</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.GetAccount(System.String)">
            <summary>
            Gets an account by address
            </summary>
            <param name="address">The address</param>
            <returns>The account or null if not found</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.HoldsAccount(NeoSharp.Types.Hash160)">
            <summary>
            Checks if the wallet holds an account with the given script hash
            </summary>
            <param name="accountHash">The script hash</param>
            <returns>True if the wallet contains the account</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.GetNep17TokenBalancesAsync(NeoSharp.Protocol.INeoSharp)">
            <summary>
            Gets the balances of all NEP-17 tokens that this wallet owns
            </summary>
            <param name="neoSharp">The NeoSharp object used to call the neo node</param>
            <returns>The map of token script hashes to token amounts</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.Create">
            <summary>
            Creates a new wallet with one account
            </summary>
            <returns>The new wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.Create(System.String)">
            <summary>
            Creates a new wallet with one account that is set as the default account and encrypts it
            </summary>
            <param name="password">The passphrase used to encrypt the account</param>
            <returns>The new wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.Create(System.String,System.String)">
            <summary>
            Creates a new wallet with one account and persists it to a NEP6 wallet file
            </summary>
            <param name="password">Password used to encrypt the account</param>
            <param name="destinationPath">Destination to the new NEP6 wallet file</param>
            <returns>The new wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.WithAccounts(NeoSharp.Wallet.Account[])">
            <summary>
            Creates a new wallet with the given accounts
            </summary>
            <param name="accounts">The accounts to add to the new wallet</param>
            <returns>The new wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.FromNEP6Wallet(System.String)">
            <summary>
            Loads a wallet from a NEP6 wallet file
            </summary>
            <param name="filePath">The file path</param>
            <returns>The loaded wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.FromNEP6Wallet(NeoSharp.Wallet.NEP6.NEP6Wallet)">
            <summary>
            Creates a wallet from a NEP6Wallet object
            </summary>
            <param name="nep6Wallet">The NEP6 wallet</param>
            <returns>The wallet</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.SaveNEP6Wallet(System.String)">
            <summary>
            Creates a NEP-6 compatible wallet file
            </summary>
            <param name="destinationPath">The file path where the wallet file should be saved</param>
            <returns>The wallet (self)</returns>
        </member>
        <member name="M:NeoSharp.Wallet.Wallet.Dispose">
            <summary>
            Disposes the wallet and all accounts
            </summary>
        </member>
    </members>
</doc>
